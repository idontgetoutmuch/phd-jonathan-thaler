	Contents
	--------
1) List of included project files
2) Review of main program files
3) Change Log


List of included project files
==============================
Sugarscape.html			The HTML file used to execute the program.
Sugarscape.java			The main program file & the only Java file 
				in the root/main folder. 
a.bat				MS-DOS batch file to compile & execute the program.
*.class				All intermediate code files created by the Java
					compiler.
------------------------
HTMLDocs	: subfolder containing documentation generated by JavaDoc
-----------------------
Documentation	: Sub-folder containing written documentation describing the Sugarscape, 
				program installation and execution instructions.
	Program Instructions	Instructions for compiling & executing the program.
	Project Design Docs	Text document, contains project design details.
	Sugarscape Overview	A description of the evolving ideas behind the 
				project	& future plans.
	Sugarscape - TestRun	Word document - serves as an intro to Sugarscape and
				walks the user through their initial paces.
-----------------------
Sugarscape	: The sub-folder containing the rest of the program files (listed below).
	CellSpace.java		Code for the processes occuring within & on the
				2D-grid/sugarscape.
	Cell.java		Code for data & methods comprising the Cellobject.
	Citizen.java		Code for data & methods comprising the Citizen object.
	GoLconst.java		The file containing configurable parameters 
				(changes require re-compilation).
------------------------
Images		: subfolder containing images used by the Sugarscape website.
	31 files 		Files include PNG, GIF & JPG files.



Review of the main program files
================================

Sugarscape.java
---------------
This file contains the code that builds/controls the program's GUI and gets the program thread running. 
A tabbed-pane interface is provided to display real-time statistics and to enable manipulation of variables cointrolling the current run.
The 'Scoreboard' pane displays aggregates and distributions arising among the populace.
The 'Sugarscape' pane enables control of variables influencing the overall program/simulation.
The 'Cell' pane enables control of variables that influence individual cells.
The 'Citizen' pane enables control of variables that influence the makeup of the citizen population.
The 'Configure' pane enables on/off control of feedback from various processes & sub-processes. This is achieved by setting the relevant value to 'true' or 'false'. Bear in mind that activating the feedback option for a process, activates the feedback for all its sub-processes regardless of the value of the sub-processes switches. Debugging output is displayed in a multi-line text field placed in the 'History' pane. The size of the display area and the grid can be changed dynamically via the Sugarscape pane or the command line in the History pane.

The code here creates an instance of the CellSpace and uses it to execute the sub-processes occurring on the Sugarscape.
Actions performed in response to keyboard & mouse events are also handled by the code in this file.

Cellspace.java
--------------
This files contains the code that builds/periodically refreshes the Sugarscape grid. The distribution of sugar, the execution of the various grid-level processes are also generated by code in this file. This file also contains code to collect & display program feedback to the user.
The code here creates multiple instances(cols x rows) of the Cell object and uses it to execute the sub-processes occurring within each cell of the grid. CellSpace can therefore be referred to as a "container" of Cell objects.

Cell.java
---------
This file encapsulates data and methods pertaining to the Cell object. As with the relationship between the CellSpace & Cell objects, each Cell object provides a "container" for Citizen objects. Citizens can thus traverse the grid moving from one Cell to another via this Container mechanism. 

Citizen.java
------------
This file contains code for the Citizen object. It contains the subset of Citizen methods that do not require interaction with the CellSpace or Cell objects. Code for processes involving interaction with those objects are included in the files listed above.

GoLconst.java
-------------
This file contains constants that determine various attributes of the simulation. These parameters are grouped into:
	1) GUI control variables
	2) Population & Citizen control variables
	3) Feedback (debugging) variables
	4) Mating & Procreation variables
It also contains a method to validate the initial values of the constants and one or more static functions accessed globally.

Change Log
==========
2.3) This is the version of the project released using both arrays & linked list. Linked Lists seems to lead to cleaner code without any performance penalty. After version 2.3, I plan to concentrate on the Linkedlist version of the code.
For now, I have uploaded 2 packages  - one for the Array version(no more after 2.3), the other for the Linked List version. Both packages share version 2.3, indicating projects using different designs but providing the same feel & functionality to the user.

This version contains the following changes:
	Eliminated "Active Cell found unexpectedly" error
	Eliminated grid sugar renewal problem - now regenerated with new sugarscape
	Added debugging variable, DEBUG_PROGRAM_FLOW - enables tracing of method sequence
	Added command line interface to enable interactive control of program parameters
The first two were logical bugs that caused subtle and unwanted bias in the results. The third adds a debugging variable, that enables tracing of the program sequence. This should be of use to those examining thesource code. The final and most significant addition is a command line interface. This allows a user to type in commands to control the program and alter the variables at runtime. The previous versions required the user to modify a program file (GoLconst.java) and recompile.


2.35) Have added mate selection, child birth and death by aging to the Citizen object. The Citizen object now recognizes familial relationships (sibling, parent, child).
Reworked the debug feedback elements. The program feedback has a much smaller delay during execution.

2.36 added climate change and pollution. - grid fertility adjustable by season

2.37 Unreleased version, implements the option
	- to resize the grid at runtime.
	- of timing the major events(gathering & mating).
	- of executing a specified number timePeriods via the command-line.
	- to inspect data values for any citizen on the grid and the entire population.
	- to start/stop climate change & pollution.

2.40 Major design changes resulting from creation of new Cell object. The Cell object is
	now a subclass of the CellSpace object and a superclass of the Citizen object.
	A seperate linked list of references to each citizen is maintained which simplifies
	operations involving all citizens, shuffling citizens randomly and locating occupants
	of a particular cell.
	The major benefit of this redesign (suggested by Digvijay Parmar) is in performance.
	The resulting code is atleast five times faster than my earlier design. That the code
	is cleaner & more readable is a welcome by-product.
	I would also like to express my gratitude to Ms. Richa Parmar, who expert advice,
	eliminated seemingly enormous obstacles for this novice programmer.
BEWARE - the ability to click or drag cells to create/destroy citizens has not been fully
	implemented, due to plain laziness :)
2.41 	Added command 'DEMO' / 'TEST' to help demonstrate common program features.
	Add 2nd commodity, SPICE to the Sugarscape. Citizens need both
	Changed graphics to represent 2nd commodity & color-coded citizens based on type
	Added variables in GoLconst to enable manipulation of new/modified objects
2.42	Add Barter process to the Sugarscape. 
	Module incorporates internal evaluation, price negotiation and goods exchange. <BR>
	Added 'persona' to citizen - determines Barter strategy. Either maximizing trades
	involving single units (risk-taker) or maximizing volume by selling multiple units
	in safe trades (risk-averse) strategies. Allows creation of additional strategies.<BR>
2.43 	Added a tabbed-pane interface to replace the simple TextArea object that was 
   	previously used to display results.
	Separate panes now display simulation progress data, allow configuration and 
	debugging.
	Forced to switch from AWT to Swing graphics libraries, applet therefore executes only 	
	in AppletViewer, working to improve the situation.
	Rectified error in barter processes that caused corruption of trade data.
	Added time counter for the barter processes.
	Moved GUI objects to separate top-level mini-classes within Sugarscape.java to 	
	overcome problems hindering program execution as an applet.
 2.44 Added culture and group formation to the Sugarscape
 -> The Cellspace & Citizen panels contains the fields to control the cultural 
	and disease processes. Feedback from these processes can be controlled from the 
 	Configure panel.
 -> Cultural Transmission, Inheritance & Group Formation implemented. 
 	- child inherits beliefs of parents.
 	- culture transfer options - transmit, absorb or by ranking.
 	- added concept of sticky tags (persistent beliefs that rarely change)
 -> Disease Generation, Infection, Transmission  & Immunization
 	- random generation of disease superset with specified min & max length
 	- inheritance of original, not evolving immune systems from parents
 	- random seeding of diseases into newborn citizens
 	- infection detection & immunization; simpler diseases cured earlier
 	- infection of neighbors if not already infected or immune
 2.44.1 Resumed Work in July 2005
 -> Grid display now reflects change of seasons
 -> Resolved bug caused when Mating process was switched off

