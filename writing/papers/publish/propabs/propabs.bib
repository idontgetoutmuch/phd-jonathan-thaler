@book{robinson_simulation:_2014,
	title = {Simulation: {The} {Practice} of {Model} {Development} and {Use}},
	isbn = {978-1-137-32802-1},
	shorttitle = {Simulation},
	abstract = {The new edition of this successful textbook provides a comprehensive introduction to simulation, foregrounding the topic as an applied problem-solving tool. Guiding readers through the key stages in a simulation project in terms of both the technical requirements and the project management issues surrounding it, the book will enable students to develop appropriate valid conceptual models, perform simulation experiments, analyse the results and draw insightful conclusions. The author’s engaging style and authoritative knowledge of the subject make the book as accessible as it is essential, drawing on case studies and complementary online content to encourage a critical engagement with the topic.This is an ideal textbook for those studying on upper level undergraduate and postgraduate degree courses in Business and Management and MBA programmes, and is a core text for those specialising in operations management. In addition, it is an important text for students taking Simulation modules on Engineering, Computer Science or Mathematics degree programmes.},
	language = {en},
	publisher = {Macmillan Education UK},
	author = {Robinson, Stewart},
	month = sep,
	year = {2014},
	note = {Google-Books-ID: Dtn0oAEACAAJ},
	keywords = {Business \& Economics / General, Business \& Economics / Business Mathematics}
}

@incollection{balci_verification_1998,
	title = {Verification, {Validation}, and {Testing}},
	copyright = {Copyright © 1998 John Wiley \& Sons, Inc.},
	isbn = {978-0-470-17244-5},
	url = {http://onlinelibrary.wiley.com/doi/10.1002/9780470172445.ch10/summary},
	abstract = {This chapter contains sections titled:


*
Introduction


*
Life Cycle and a Case Study


*
Verification, Validation, and Testing Principles


*
Verification, Validation, and Testing Techniques


*
Credibility Assessment Stages


*
Concluding Remarks


*
References},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Handbook of {Simulation}},
	publisher = {John Wiley \& Sons, Inc.},
	author = {Balci, Osman},
	editor = {Banks, Jerry},
	year = {1998},
	doi = {10.1002/9780470172445.ch10},
	keywords = {counterintuitive behavior, military combat systems validation, response-surface methodologies, simulation language compiler, trace-driven simulation methods},
	pages = {335--393},
	file = {Snapshot:/home/jonathan/Zotero/storage/B8BT8SA3/summary.html:text/html}
}

@article{polhill_ghost_2005,
	title = {The {Ghost} in the {Model} (and {Other} {Effects} of {Floating} {Point} {Arithmetic})},
	volume = {8},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/8/1/5.html},
	abstract = {This paper will explore the effects of errors in floating point arithmetic in two published agent-based models: the first a model of land use change (Polhill et al. 2001; Gotts et al. 2003), the second a model of the stock market (LeBaron et al. 1999). The first example demonstrates how branching statements with floating point operands of comparison operators create a high degree of nonlinearity, leading in this case to the creation of 'ghost' agents – visible to some parts of the program but not to others. A potential solution to this problem is proposed. The second example shows how mathematical descriptions of models in the literature are insufficient to enable exact replication of work since mathematically equivalent implementations in terms of real number arithmetic are not equivalent in terms of floating point arithmetic.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Polhill, J. Gary and Izquierdo, Luis R. and Gotts, Nicholas M.},
	year = {2005},
	keywords = {Replication, Agent Based Modelling, Floating Point Arithmetic, Interval Arithmetic},
	pages = {1}
}

@incollection{ormerod_validation_2006,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Validation and {Verification} of {Agent}-{Based} {Models} in the {Social} {Sciences}},
	isbn = {978-3-642-01108-5 978-3-642-01109-2},
	url = {https://link.springer.com/chapter/10.1007/978-3-642-01109-2_10},
	abstract = {This paper considers some of the difficulties in establishing verificaction and validation of agent based models. The fact that most ABMs are solved by simulation rather than analytically blurs the distinction between validation and verification. We suggest that a clear description of the phenomena to be explained by the model and testing for the simplest possible realistic agent rules of behaviour are key to the successful validation of ABMs and will provide the strongest base for enabling model comparison and acceptance. In particular, the empirical evidence that in general agents act intuitively rather than rationally is now strong. This implies that models which assign high levels of cognition to their agents require particularly strong justification if they are to be considered valid.},
	language = {en},
	urldate = {2018-06-07},
	booktitle = {Epistemological {Aspects} of {Computer} {Simulation} in the {Social} {Sciences}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Ormerod, Paul and Rosewell, Bridget},
	month = oct,
	year = {2006},
	doi = {10.1007/978-3-642-01109-2_10},
	pages = {130--140},
	file = {Snapshot:/home/jonathan/Zotero/storage/WCM352LP/978-3-642-01109-2_10.html:text/html}
}

@article{galan_errors_2009,
	title = {Errors and {Artefacts} in {Agent}-{Based} {Modelling}},
	volume = {12},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/12/1/1.html},
	abstract = {The objectives of this paper are to define and classify different types of errors and artefacts that can appear in the process of developing an agent-based model, and to propose activities aimed at avoiding them during the model construction and testing phases. To do this in a structured way, we review the main concepts of the process of developing such a model – establishing a general framework that summarises the process of designing, implementing, and using agent-based models. Within this framework we identify the various stages where different types of errors and artefacts may appear. Finally we propose activities that could be used to detect (and hence eliminate) each type of error or artefact.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Galán, José Manuel and Izquierdo, Luis R. and Izquierdo, Segismundo S. and Santos, José Ignacio and del Olmo, Ricardo and López-Paredes, Adolfo and Edmonds, Bruce},
	year = {2009},
	keywords = {Replication, Verification, Agent-Based Modelling, Artefact, Error, Modelling Roles},
	pages = {1}
}

@book{beck_test_2002,
	address = {Boston},
	edition = {01 edition},
	title = {Test {Driven} {Development}: {By} {Example}},
	isbn = {978-0-321-14653-3},
	shorttitle = {Test {Driven} {Development}},
	abstract = {Quite simply, test-driven development is meant to eliminate fear in application development. While some fear is healthy (often viewed as a conscience that tells programmers to "be careful!"), the author believes that byproducts of fear include tentative, grumpy, and uncommunicative programmers who are unable to absorb constructive criticism. When programming teams buy into TDD, they immediately see positive results. They eliminate the fear involved in their jobs, and are better equipped to tackle the difficult challenges that face them. TDD eliminates tentative traits, it teaches programmers to communicate, and it encourages team members to seek out criticism However, even the author admits that grumpiness must be worked out individually! In short, the premise behind TDD is that code should be continually tested and refactored. Kent Beck teaches programmers by example, so they can painlessly and dramatically increase the quality of their work.},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Beck, Kent},
	month = nov,
	year = {2002}
}

@inproceedings{claessen_quickcheck_2000,
	address = {New York, NY, USA},
	series = {{ICFP} '00},
	title = {{QuickCheck} - {A} {Lightweight} {Tool} for {Random} {Testing} of {Haskell} {Programs}},
	isbn = {978-1-58113-202-1},
	shorttitle = {{QuickCheck}},
	url = {http://doi.acm.org/10.1145/351240.351266},
	doi = {10.1145/351240.351266},
	abstract = {Quick Check is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are described as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffices to obtain good coverage of the definition under test.},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the {Fifth} {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Claessen, Koen and Hughes, John},
	year = {2000},
	pages = {268--279},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/JZJFVIQK/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing .pdf:application/pdf;ACM Full Text PDF:/home/jonathan/Zotero/storage/CKGG42NQ/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing .pdf:application/pdf}
}

@article{claessen_testing_2002,
	title = {Testing {Monadic} {Code} with {QuickCheck}},
	volume = {37},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/636517.636527},
	doi = {10.1145/636517.636527},
	abstract = {QuickCheck is a previously published random testing tool for Haskell programs. In this paper we show how to use it for testing monadic code, and in particular imperative code written using the ST monad. QuickCheck tests a program against a specification: we show that QuickCheck's specification language is sufficiently powerful to represent common forms of specifications: algebraic, model-based (both functional and relational), and pre-/post-conditional. Moreover, all these forms of specification can be used directly for testing. We define a new language of monadic properties, and make a link between program testing and the notion of observational equivalence.},
	number = {12},
	urldate = {2017-05-11},
	journal = {SIGPLAN Not.},
	author = {Claessen, Koen and Hughes, John},
	month = dec,
	year = {2002},
	pages = {47--59},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/3SMCN5GK/Claessen and Hughes - 2002 - Testing Monadic Code with QuickCheck.pdf:application/pdf}
}

@inproceedings{runciman_smallcheck_2008,
	address = {New York, NY, USA},
	series = {Haskell '08},
	title = {Smallcheck and {Lazy} {Smallcheck}: {Automatic} {Exhaustive} {Testing} for {Small} {Values}},
	isbn = {978-1-60558-064-7},
	shorttitle = {Smallcheck and {Lazy} {Smallcheck}},
	url = {http://doi.acm.org/10.1145/1411286.1411292},
	doi = {10.1145/1411286.1411292},
	abstract = {This paper describes two Haskell libraries for property-based testing. Following the lead of QuickCheck, these testing libraries SmallCheck and Lazy SmallCheck also use type-based generators to obtain test-sets of finite values for which properties are checked, and report any counter-examples found. But instead of using a sample of randomly generated values they test properties for all values up to some limiting depth, progressively increasing this limit. The paper explains the design and implementation of both libraries and evaluates them in comparison with each other and with QuickCheck.},
	urldate = {2018-09-18},
	booktitle = {Proceedings of the {First} {ACM} {SIGPLAN} {Symposium} on {Haskell}},
	publisher = {ACM},
	author = {Runciman, Colin and Naylor, Matthew and Lindblad, Fredrik},
	year = {2008},
	keywords = {embedded language, exhaustive search, lazy evaluation, property-based testing, type classes},
	pages = {37--48},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/GI69KFTB/Runciman et al. - 2008 - Smallcheck and Lazy Smallcheck Automatic Exhausti.pdf:application/pdf}
}

@inproceedings{hudak_history_2007,
	address = {New York, NY, USA},
	series = {{HOPL} {III}},
	title = {A {History} of {Haskell}: {Being} {Lazy} with {Class}},
	isbn = {978-1-59593-766-7},
	shorttitle = {A {History} of {Haskell}},
	url = {http://doi.acm.org/10.1145/1238844.1238856},
	doi = {10.1145/1238844.1238856},
	abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
	urldate = {2017-05-10},
	booktitle = {Proceedings of the {Third} {ACM} {SIGPLAN} {Conference} on {History} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
	year = {2007},
	pages = {12--1--12--55},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/GJQ4BK8V/Hudak et al. - 2007 - A History of Haskell Being Lazy with Class.pdf:application/pdf}
}

@inproceedings{hughes_quickcheck_2007,
	address = {Berlin, Heidelberg},
	series = {{PADL}'07},
	title = {{QuickCheck} {Testing} for {Fun} and {Profit}},
	isbn = {978-3-540-69608-7},
	url = {http://dx.doi.org/10.1007/978-3-540-69611-7_1},
	doi = {10.1007/978-3-540-69611-7_1},
	abstract = {One of the nice things about purely functional languages is that functions often satisfy simple properties, and enjoy simple algebraic relationships. Indeed, if the functions of an API satisfy elegant laws, that in itself is a sign of a good design—the laws not only indicate conceptual simplicity, but are useful in practice for simplifying programs that use the API, by equational reasoning or otherwise.},
	urldate = {2018-09-24},
	booktitle = {Proceedings of the 9th {International} {Conference} on {Practical} {Aspects} of {Declarative} {Languages}},
	publisher = {Springer-Verlag},
	author = {Hughes, John},
	year = {2007},
	pages = {1--32}
}

@inproceedings{macal_agent-based_2010,
	address = {Baltimore, Maryland},
	series = {{WSC} '10},
	title = {To {Agent}-based {Simulation} from {System} {Dynamics}},
	isbn = {978-1-4244-9864-2},
	url = {http://dl.acm.org/citation.cfm?id=2433508.2433551},
	abstract = {Agent-based simulation (ABS) is a recent modeling technique that is being widely used in modeling complex social systems. Forrester's System Dynamics (SD) is another longstanding technique for modeling social systems. Several classical models of systems, such as the Kermack-McKendrick model of epidemiology, the Lotka-Volterra equations for modeling predator-prey relationships, and the Bass model for innovation diffusion are formulated as systems of differential equations and have corresponding System Dynamics representations as difference equations. The ABS and SD modeling approaches take fundamentally different perspectives when modeling a system, which can be characterized as bottom-up (ABS) versus top-down (SD). Yet many systems can be equivalently modeled by either approach. In this paper, we present a formal specification for SD and ABS models, use the specification to derive equivalent ABS representations, and present an example of an SIR epidemic model having SD and ABS counterparts.},
	urldate = {2017-10-05},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}},
	publisher = {Winter Simulation Conference},
	author = {Macal, Charles M.},
	year = {2010},
	pages = {371--382},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/7WFBF4UW/Macal - 2010 - To Agent-based Simulation from System Dynamics.pdf:application/pdf}
}

@book{epstein_growing_1996,
	address = {Washington, DC, USA},
	title = {Growing {Artificial} {Societies}: {Social} {Science} from the {Bottom} {Up}},
	isbn = {978-0-262-55025-3},
	shorttitle = {Growing {Artificial} {Societies}},
	publisher = {The Brookings Institution},
	author = {Epstein, Joshua M. and Axtell, Robert},
	year = {1996}
}

@incollection{savaglio_agent-based_2018,
	address = {Cham},
	series = {Studies in {Computational} {Intelligence}},
	title = {Agent-{Based} {Computing} in the {Internet} of {Things}: {A} {Survey}},
	isbn = {978-3-319-66379-1},
	shorttitle = {Agent-{Based} {Computing} in the {Internet} of {Things}},
	url = {https://doi.org/10.1007/978-3-319-66379-1_27},
	abstract = {The Internet of Things is a revolutionary concept, within cyberphysical systems, rich in potential as well as in multifacet requirements and development issues. To properly address them and to fully support IoT systems development, Agent-Based Computing represents a suitable and effective modeling, programming, simulation paradigm. As matter of facts, agent metaphors, concepts, techniques, methods and tools have been widely exploited to develop IoT systems. Main contemporary contributions in this direction are surveyed and reported in this work.},
	language = {en},
	urldate = {2019-05-23},
	booktitle = {Intelligent {Distributed} {Computing} {XI}},
	publisher = {Springer International Publishing},
	author = {Savaglio, Claudio and Fortino, Giancarlo and Ganzha, Maria and Paprzycki, Marcin and Bădică, Costin and Ivanović, Mirjana},
	editor = {Ivanović, Mirjana and Bădică, Costin and Dix, Jürgen and Jovanović, Zoran and Malgeri, Michele and Savić, Miloš},
	year = {2018},
	doi = {10.1007/978-3-319-66379-1_27},
	keywords = {Agent-based Computing, Architectures, Internet of Things, Methodology, Modeling, Simulation},
	pages = {307--320}
}

@inproceedings{collier_test-driven_2013,
	title = {Test-driven agent-based simulation development},
	doi = {10.1109/WSC.2013.6721538},
	abstract = {Developing a useful agent-based model and simulation typically involves acquiring knowledge of the model's domain, developing the model itself, and then translating the model into software. This process can be complex and is an iterative one where changes in domain knowledge and model requirements or specifications can cause changes in the software that in turn may require additional modeling and domain knowledge. Test-driven development is a software development technique that can help ameliorate this complexity by evolving a loosely coupled flexible design, driven by the creation of many small, automated unit tests. When the focus shifts to writing small tests that exercise the simulations behavior, the larger problem of translating a conceptual model into working code is decomposed into a series of much smaller, more manageable and highly focused translations. This paper explores the application of this technique to agent-based simulation development with examples from Repast Simphony, ReLogo and Repast HPC.},
	booktitle = {2013 {Winter} {Simulations} {Conference} ({WSC})},
	author = {Collier, N. and Ozik, J.},
	month = dec,
	year = {2013},
	keywords = {simulation, software agents, Testing, agent-based model, Buildings, Context, Diseases, domain knowledge, Employment, formal specification, knowledge acquisition, model requirements, model specifications, Schedules, Software, software development, test-driven agent-based simulation},
	pages = {1551--1559},
	file = {IEEE Xplore Abstract Record:/home/jonathan/Zotero/storage/C9W7NRJQ/6721538.html:text/html;IEEE Xplore Full Text PDF:/home/jonathan/Zotero/storage/A3PGS2JD/Collier and Ozik - 2013 - Test-driven agent-based simulation development.pdf:application/pdf}
}

@article{onggo_test-driven_2016,
	title = {Test-driven simulation modelling: {A} case study using agent-based maritime search-operation simulation},
	volume = {254},
	shorttitle = {Test-driven simulation modelling},
	doi = {10.1016/j.ejor.2016.03.050},
	abstract = {Model verification and validation (V\&V) is one of the most important activities in simulation modelling. Model validation is especially challenging for Agent-Based Simulation (ABS). Techniques that can help to improve V\&V in simulation modelling are needed. This paper proposes a V\&V technique called TestDriven Simulation Modelling (TDSM) which applies techniques from Test-Driven Development in software engineering to simulation modelling. The main principle in TDSM is that a unit test for a simulation model has to be specified before the simulation model is implemented. Hence, TDSM explicitly embeds V\&V in simulation modelling. We use a case study in maritime search operations to demonstrate how TDSM can be used in practice. Maritime search operations (and search operations in general) are one of the classic applications of Operational Research (OR). Hence, we can use analytical models from the vast search theory literature for unit tests in TDSM. The results show that TDSM is a useful technique in the verification and validation of simulation models, especially ABS models. This paper also shows that ABS can offer an alternative modelling approach in the analysis of maritime search operations. © 2016 Elsevier B.V. All rights reserved.},
	journal = {European Journal of Operational Research},
	author = {Onggo, Bhakti S. S. and Karatas, Mumtaz},
	year = {2016},
	keywords = {Agent-based model, Simulation, Software engineering, Test-driven development, Unit testing, Verification and validation},
	pages = {517--531}
}

@article{gurcan_generic_2013,
	title = {A generic testing framework for agent-based simulation models},
	volume = {7},
	issn = {1747-7786},
	url = {https://doi.org/10.1057/jos.2012.26},
	doi = {10.1057/jos.2012.26},
	abstract = {Agent-based modelling and simulation (ABMS) had an increasing attention during the last decade. However, the weak validation and verification of agent-based simulation models makes ABMS hard to trust. There is no comprehensive tool set for verification and validation of agent-based simulation models, which demonstrates that inaccuracies exist and/or reveals the existing errors in the model. Moreover, on the practical side, many ABMS frameworks are in use. In this sense, we designed and developed a generic testing framework for agent-based simulation models to conduct validation and verification of models. This paper presents our testing framework in detail and demonstrates its effectiveness by showing its applicability on a realistic agent-based simulation case study.},
	language = {en},
	number = {3},
	urldate = {2018-09-27},
	journal = {Journal of Simulation},
	author = {Gurcan, O. and Dikenelli, O. and Bernon, C.},
	month = aug,
	year = {2013},
	keywords = {agent-based modelling and simulation, model testing, verification and validation},
	pages = {183--201}
}

@inproceedings{nguyen_testing_2011,
	address = {Berlin, Heidelberg},
	series = {{AOSE}'10},
	title = {Testing in {Multi}-agent {Systems}},
	isbn = {978-3-642-19207-4},
	url = {http://dl.acm.org/citation.cfm?id=1965954.1965971},
	abstract = {Testing software agents and Multi-Agent Systems (MAS) needs suitable techniques to evaluate agent's autonomous behaviours as well as distribution, social and deliberative properties, which are particular to these systems. This paper reviews testing methods and techniques with respect to the MAS properties they are able to address. For this purpose, we provide a reference framework that provides a classification of MAS testing levels (such as unit, agent, integration, system, and acceptance) and of testing approaches along the development artefact they exploit (namely, design and code artefacts). Open issues in testing MAS are then discussed providing a basis for a research roadmap.},
	urldate = {2018-09-24},
	booktitle = {Proceedings of the 10th {International} {Conference} on {Agent}-oriented {Software} {Engineering}},
	publisher = {Springer-Verlag},
	author = {Nguyen, Cu D. and Perini, Anna and Bernon, Carole and Pavón, Juan and Thangarajah, John},
	year = {2011},
	pages = {180--190}
}

@book{burnstein_practical_2010,
	edition = {1st},
	title = {Practical {Software} {Testing}: {A} {Process}-{Oriented} {Approach}},
	isbn = {978-1-4419-2885-6},
	shorttitle = {Practical {Software} {Testing}},
	abstract = {Based on the needs of the educational community, and the software professional, this book takes a unique approach to teaching software testing. It introduces testing concepts that are managerial, technical, and process oriented, using the Testing Maturity Model (TMM) as a guiding framework. The TMM levels and goals support a structured presentation of fundamental and advanced test-related concepts to the reader. In this context, the interrelationships between theoretical, technical, and managerial concepts become more apparent. In addition, relationships between the testing process, maturity goals, and such key players as managers, testers and client groups are introduced. Topics and features:- Process/engineering-oriented text- Promotes the growth and value of software testing as a profession- Introduces both technical and managerial aspects of testing in a clear and precise style- Uses the TMM framework to introduce testing concepts in a systemmatic, evolutionary way to faciliate understanding- Describes the role of testing tools and measurements, and how to integrate them into the testing process Graduate students and industry professionals will benefit from the book, which is designed for a graduate course in software testing, software quality assurance, or software validation and verification Moreover, the number of universities with graduate courses that cover this material will grow, given the evoluation in software development as an engineering discipline and the creation of degree programs in software engineering.},
	publisher = {Springer Publishing Company, Incorporated},
	author = {Burnstein, Ilene},
	year = {2010}
}

@article{kermack_contribution_1927,
	title = {A {Contribution} to the {Mathematical} {Theory} of {Epidemics}},
	volume = {115},
	issn = {1364-5021, 1471-2946},
	url = {http://rspa.royalsocietypublishing.org/content/115/772/700},
	doi = {10.1098/rspa.1927.0118},
	language = {en},
	number = {772},
	urldate = {2017-11-06},
	journal = {Proceedings of the Royal Society of London A: Mathematical, Physical and Engineering Sciences},
	author = {Kermack, W. O. and McKendrick, A. G.},
	month = aug,
	year = {1927},
	pages = {700--721},
	file = {Full Text PDF:/home/jonathan/Zotero/storage/57XZARXB/Kermack and McKendrick - 1927 - A Contribution to the Mathematical Theory of Epide.pdf:application/pdf;Snapshot:/home/jonathan/Zotero/storage/PLT8SIX5/700.html:text/html}
}

@inproceedings{macal_agent-based_2010,
	address = {Baltimore, Maryland},
	series = {{WSC} '10},
	title = {To {Agent}-based {Simulation} from {System} {Dynamics}},
	isbn = {978-1-4244-9864-2},
	url = {http://dl.acm.org/citation.cfm?id=2433508.2433551},
	abstract = {Agent-based simulation (ABS) is a recent modeling technique that is being widely used in modeling complex social systems. Forrester's System Dynamics (SD) is another longstanding technique for modeling social systems. Several classical models of systems, such as the Kermack-McKendrick model of epidemiology, the Lotka-Volterra equations for modeling predator-prey relationships, and the Bass model for innovation diffusion are formulated as systems of differential equations and have corresponding System Dynamics representations as difference equations. The ABS and SD modeling approaches take fundamentally different perspectives when modeling a system, which can be characterized as bottom-up (ABS) versus top-down (SD). Yet many systems can be equivalently modeled by either approach. In this paper, we present a formal specification for SD and ABS models, use the specification to derive equivalent ABS representations, and present an example of an SIR epidemic model having SD and ABS counterparts.},
	urldate = {2017-10-05},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}},
	publisher = {Winter Simulation Conference},
	author = {Macal, Charles M.},
	year = {2010},
	pages = {371--382},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/7WFBF4UW/Macal - 2010 - To Agent-based Simulation from System Dynamics.pdf:application/pdf}
}

@article{porter_industrial_1962,
	title = {Industrial {Dynamics}. {Jay} {Forrester}. {M}.{I}.{T}. {Press}, {Cambridge}, {Mass}.; {Wiley}, {New} {York}, 1961. xv + 464 pp. {Illus}. \$18},
	volume = {135},
	copyright = {1962 by the American Association for the Advancement of Science},
	issn = {0036-8075, 1095-9203},
	url = {http://science.sciencemag.org/content/135/3502/426.2},
	doi = {10.1126/science.135.3502.426-a},
	language = {en},
	number = {3502},
	urldate = {2017-11-06},
	journal = {Science},
	author = {Porter, Donald E.},
	month = feb,
	year = {1962},
	pages = {426--427},
	file = {Full Text PDF:/home/jonathan/Zotero/storage/CG25GZ44/Porter - 1962 - Industrial Dynamics. Jay Forrester. M.I.T. Press, .pdf:application/pdf;Snapshot:/home/jonathan/Zotero/storage/F7EP3ERV/426.html:text/html}
}

@inproceedings{thaler_pure_2018,
	address = {New York, NY, USA},
	series = {{IFL} 2018},
	title = {Pure {Functional} {Epidemics}: {An} {Agent}-{Based} {Approach}},
	isbn = {978-1-4503-7143-8},
	shorttitle = {Pure {Functional} {Epidemics}},
	url = {http://doi.acm.org/10.1145/3310232.3310372},
	doi = {10.1145/3310232.3310372},
	abstract = {Agent-Based Simulation (ABS) is a methodology in which a system is simulated in a bottom-up approach by modelling the micro interactions of its constituting parts, called agents, out of which the global system behaviour emerges. So far mainly object-oriented techniques and languages have been used in ABS. Using the SIR model of epidemiology, which simulates the spreading of an infectious disease through a population, we demonstrate how to use pure Functional Reactive Programming to implement ABS. With our approach we can guarantee the reproducibility of the simulation at compile time and rule out specific classes of run-time bugs, something that is not possible with traditional object-oriented languages. Also, we found that the representation in a purely functional format is conceptually quite elegant and opens the way to formally reason about ABS.},
	urldate = {2019-05-03},
	booktitle = {Proceedings of the 30th {Symposium} on {Implementation} and {Application} of {Functional} {Languages}},
	publisher = {ACM},
	author = {Thaler, Jonathan and Altenkirch, Thorsten and Siebers, Peer-Olaf},
	year = {2018},
	note = {event-place: Lowell, MA, USA},
	keywords = {Functional Reactive Programming, Agent-Based Simulation, Monadic Stream Functions},
	pages = {1--12},
	file = {Submitted Version:/home/jonathan/Zotero/storage/WL2PCIGX/Thaler et al. - 2018 - Pure Functional Epidemics An Agent-Based Approach.pdf:application/pdf}
}

@misc{de_vries_-depth_2019,
	title = {An in-depth look at quickcheck-state-machine},
	url = {http://www.well-typed.com/blog/2019/01/qsm-in-depth/},
	abstract = {Stateful APIs are everywhere: file systems, databases, widget libraries, the list goes on. Automated testing of such APIs requires generating sequences of API calls, and when we find a failing test, ideally shrinking such a sequence to a minimal test case. Neither the generation nor the shrinking of such sequences is trivial. After all, it is the very nature of stateful systems that later calls may depend on earlier calls: we can only add rows to a database table after we create it, we can only write to a file after we open it, etc. Such dependencies need to be tracked carefully. Moreover, in order to verify the responses we get back from the system, the test needs to maintain some kind of internal representation of what it thinks the internal state of the system is: when we read from a file, we need to know what was in the file in order to be able to verify if the response was correct or not.

In this blog post we will take an in-depth look at quickcheck-state-machine, a library for testing stateful code. Our running example will be the development of a simple mock file system that should behave identically to a real file system. Although simple, the example will be large enough to give us an opportunity to discuss how we can verify that our generator is producing all test cases we need, and how we can inspect whether the shrinker is doing a good job; in both cases, test case labelling will turn out to be essential. Throughout we will also discuss design patterns for quickcheck-state-machine tests which improve separation of concerns and reduce duplication. It should probably be pointed out that this is an opinionated piece: there are other ways to set things up than we present here.

We will not show the full development in this blog post, and instead focus on explaining the underlying concepts. If you want to follow along, the code is
available for download. We will assume version 0.6 of quickcheck-state-machine, which was recently released. If you are using an older version, it is recommended to upgrade, since the newer version includes some important bug fixes, especially in the shrinker.},
	language = {English},
	urldate = {2019-02-24},
	journal = {Well-Typed},
	author = {De Vries, Edsko},
	month = jan,
	year = {2019}
}

@article{north_complex_2013,
	title = {Complex adaptive systems modeling with {Repast} {Simphony}},
	volume = {1},
	issn = {2194-3206},
	url = {https://doi.org/10.1186/2194-3206-1-3},
	doi = {10.1186/2194-3206-1-3},
	abstract = {This paper is to describe development of the features and functions of Repast Simphony, the widely used, free, and open source agent-based modeling environment that builds on the Repast 3 library. Repast Simphony was designed from the ground up with a focus on well-factored abstractions. The resulting code has a modular architecture that allows individual components such as networks, logging, and time scheduling to be replaced as needed. The Repast family of agent-based modeling software has collectively been under continuous development for more than 10 years.},
	number = {1},
	urldate = {2018-08-02},
	journal = {Complex Adaptive Systems Modeling},
	author = {North, Michael J. and Collier, Nicholson T. and Ozik, Jonathan and Tatara, Eric R. and Macal, Charles M. and Bragen, Mark and Sydelko, Pam},
	month = mar,
	year = {2013},
	pages = {3},
	file = {Full Text PDF:/home/jonathan/Zotero/storage/JHYNHZPM/North et al. - 2013 - Complex adaptive systems modeling with Repast Simp.pdf:application/pdf;Snapshot:/home/jonathan/Zotero/storage/5CDV3776/2194-3206-1-3.html:text/html}
}

@inproceedings{asta_investigation_2014,
	title = {An investigation on test driven discrete event simulation},
	url = {http://eprints.nottingham.ac.uk/28211/},
	abstract = {This paper deals with the application of modern software development tools on simulation development. Recently, Agile Software Development (ASD) methods enjoy an increasing popularity. eXtreme Programming (XP) techniques, one of the techniques which belong to the ASD group of methods is a software development method which improves software quality and responsiveness of software projects through introducing short development cycles and a Test Driven Development (TDD) philosophy throughout the development. In this paper, we particularly pay attention to the application of the TDD by approaching simulation development from a test-first perspective. This study consists of a feasibility study of applying the TDD technique in simulation development in its various levels, say, acceptance and unit testing. Moreover, a simulation case study of a surgical ward has been considered, designed and implemented using the AnyLogic simulation toolkit. Our study differs from the mainstream in many ways. It addresses the feasibility of Test-Driven Simulation Development in Visual Interactive Modelling and Simulation (VIMS) environments as well as providing an insight into how the test-first concept can further help with the choice of components and acceptance testing.},
	booktitle = {Operational {Research} {Society} {Simulation} {Workshop} 2014 ({SW}14)},
	author = {Asta, Shahriar and Özcan, Ender and Siebers, Peer-Olaf},
	month = apr,
	year = {2014}
}