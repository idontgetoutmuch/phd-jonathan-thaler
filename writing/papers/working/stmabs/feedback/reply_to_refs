We would like to thank the referees for their time reviewing our paper and their many very helpful comments. We addressed most of the changes which were requested by the referees. Specifically we made the following changes, additions and improvements:

We re-ran all experiments for two reasons: first, we moved to new hardware, which required a re-run to allow a just comparison; second and more importantly, we are now using the microbenchmarking library Criterion, which ensured much more precise timings and most important statistically highly robust results. At the initial point of writing this paper, we didn't know about Criterion therefore we havn't used it before. The move to Criterion makes the results much more robust and scientifically valid.
Due to the new hardware, which is different but roughly the same in terms of CPU clock, the results were roughly similar, with slight quantitative but no qualitative differences. Because the CPU of the new hardware has 8 cores (4 physical ones with 2 threads each) we added experiments on 5-8 cores in each case.
With the move to Criterion, we changed the Sugarscape experiment from measuring steps per seconds over 60 seconds to always run 1000 steps, measuring the time required. The reason for it is that the old measurement technique was not really applicable to Criterion.

As requested by one of the referees in a very insightful comment, we added an additional concurrent implementation of the SIR model using a read-write lock. The results are indicated in the paper and obviously show a much better performance than the naive locking implementation (still included), but it is still behind STM. In the case of the Sugarscape a read-write lock was not applicable due to model semantics - we explained this in the paper.

We also added another concurrent implementation of the SIR model, using an atomic modification operation. The reason for it was that first, it had much similarity with the read-write lock implementation; second, that it was so easy to add and third, that we were curious about its performance. Interestingly it slightly outperforms the STM implementation. However, it was not applicable to the Sugarscape model, also due to model semantics, which is also explained in the paper.

We slightly changed and re-ran the Amazon experimens: in the SIR model we ran the atomic modification implementation instead of the naive locking one; in the Sugarscape model we only ran the TArray implementation because all others showed clearly no potential for scaling to higher number of cores. The TArray experiments now also include experiments on 64 cores.

Regarding the unjust comparison of the TArray Sugarscape implementation with the lock-based one: after a little bit of thinking and trying, we came to the insight that our initial idea of an array of locks for the lock-based case is simply not possible due to model semantics and potential race conditions. The problem is that an agent needs to hold a consistent view of the environment during its execution, therefore it would need to grab a lock for each cell it might read and write, but this grabbing of many locks won't happen atomically and is therefore subject to race conditions and deadlocks when two (or more) neighbouring agents try to grab same locks. We pointed that out in the paper. Maybe a highly intricate locking algorithm could solve this problem but this is not the focus of our paper.

Regarding the issue of reproducbility and correctness in the case of the concurrent implementations: the referee is right to point this out but given the other work we did, we simply didn't have time to contribute any in-depth and systematic work and research on this. This issue is not simply solved in a matter of 2 weeks but needs thorough investigation, with the potential for an additional paper dedicated to just this problem.

We addressed the issues of informal language and the specific comments, which were also very helpful.

The performance figures were re-created and the font size of all figures was increased substantially for better readability.

"Semantics of STM (page numbers 7-9) might be better to be placed in a supplementary file with some numbers referencing  each of them.": we decided to keep the example in the text as it is more useful there, but we added some additional explanation, to make the role of StateT more clear. Also we added a second, simpler example which shows how to implement the concurrent money transfer problem, mentioned at the beginning of the background section, with STM.

Concluding we want to say that with the help of the useful comments of the referees we think the paper is now in much better shape with a lot of additional work done, making it more robust and scientifically valid. We therefore hope that our major changes are acknowledged and that the paper will get accepted.
