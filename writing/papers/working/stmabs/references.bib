
@book{epstein_growing_1996,
	address = {Washington, DC, USA},
	title = {Growing {Artificial} {Societies}: {Social} {Science} from the {Bottom} {Up}},
	isbn = {978-0-262-55025-3},
	shorttitle = {Growing {Artificial} {Societies}},
	publisher = {The Brookings Institution},
	author = {Epstein, Joshua M. and Axtell, Robert},
	year = {1996}
}

@book{enns_its_2010,
	edition = {1st},
	title = {It's a {Nonlinear} {World}},
	isbn = {978-0-387-75338-6},
	abstract = {Drawing examplesfrom mathematics, physics, chemistry, biology, engineering, economics, medicine, politics, and sports, this book illustrates how nonlinear dynamics plays a vital role in our world. Examples cover a wide range from the spread and possible control of communicable diseases, to the lack of predictability in long-range weather forecasting, to competition between political groups and nations. After an introductorychapter that explores what it means to be nonlinear, the book covers the mathematical conceptssuch as limit cycles, fractals, chaos, bifurcations, and solitons, that will be applied throughout the book. Numerous computer simulations and exercises allow students to explore topics in greater depth using the Maple computer algebra system. The mathematical level of the text assumes prior exposure to ordinary differential equations and familiarity with the wave and diffusion equations.No prior knowledge of Maple is assumed, and all Maple examples are included on a CD. The book may be used at the undergraduate or graduate level to prepare science and engineering students for problems in the "real world", or for self-study by practicing scientists and engineers.},
	publisher = {Springer Publishing Company, Incorporated},
	author = {Enns, Richard H.},
	year = {2010}
}

@article{kermack_contribution_1927,
	title = {A {Contribution} to the {Mathematical} {Theory} of {Epidemics}},
	volume = {115},
	issn = {1364-5021, 1471-2946},
	url = {http://rspa.royalsocietypublishing.org/content/115/772/700},
	doi = {10.1098/rspa.1927.0118},
	language = {en},
	number = {772},
	urldate = {2017-11-06},
	journal = {Proceedings of the Royal Society of London A: Mathematical, Physical and Engineering Sciences},
	author = {Kermack, W. O. and McKendrick, A. G.},
	month = aug,
	year = {1927},
	pages = {700--721},
	file = {Full Text PDF:/home/jonathan/Zotero/storage/57XZARXB/Kermack and McKendrick - 1927 - A Contribution to the Mathematical Theory of Epide.pdf:application/pdf;Snapshot:/home/jonathan/Zotero/storage/PLT8SIX5/700.html:text/html}
}

@inproceedings{macal_agent-based_2010,
	address = {Baltimore, Maryland},
	series = {{WSC} '10},
	title = {To {Agent}-based {Simulation} from {System} {Dynamics}},
	isbn = {978-1-4244-9864-2},
	url = {http://dl.acm.org/citation.cfm?id=2433508.2433551},
	abstract = {Agent-based simulation (ABS) is a recent modeling technique that is being widely used in modeling complex social systems. Forrester's System Dynamics (SD) is another longstanding technique for modeling social systems. Several classical models of systems, such as the Kermack-McKendrick model of epidemiology, the Lotka-Volterra equations for modeling predator-prey relationships, and the Bass model for innovation diffusion are formulated as systems of differential equations and have corresponding System Dynamics representations as difference equations. The ABS and SD modeling approaches take fundamentally different perspectives when modeling a system, which can be characterized as bottom-up (ABS) versus top-down (SD). Yet many systems can be equivalently modeled by either approach. In this paper, we present a formal specification for SD and ABS models, use the specification to derive equivalent ABS representations, and present an example of an SIR epidemic model having SD and ABS counterparts.},
	urldate = {2017-10-05},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}},
	publisher = {Winter Simulation Conference},
	author = {Macal, Charles M.},
	year = {2010},
	pages = {371--382},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/7WFBF4UW/Macal - 2010 - To Agent-based Simulation from System Dynamics.pdf:application/pdf}
}

@book{wooldridge_introduction_2009,
	edition = {2nd},
	title = {An {Introduction} to {MultiAgent} {Systems}},
	isbn = {978-0-470-51946-2},
	abstract = {The study of multi-agent systems (MAS) focuses on systems in which many intelligent agents interact with each other. These agents are considered to be autonomous entities such as software programs or robots. Their interactions can either be cooperative (for example as in an ant colony) or selfish (as in a free market economy). This book assumes only basic knowledge of algorithms and discrete maths, both of which are taught as standard in the first or second year of computer science degree programmes. A basic knowledge of artificial intelligence would useful to help understand some of the issues, but is not essential. The books main aims are: To introduce the student to the concept of agents and multi-agent systems, and the main applications for which they are appropriate To introduce the main issues surrounding the design of intelligent agents To introduce the main issues surrounding the design of a multi-agent society To introduce a number of typical applications for agent technology},
	publisher = {Wiley Publishing},
	author = {Wooldridge, Michael},
	year = {2009}
}

@book{wilensky_introduction_2015,
	title = {An {Introduction} to {Agent}-{Based} {Modeling}: {Modeling} {Natural}, {Social}, and {Engineered} {Complex} {Systems} with {NETLogo}},
	isbn = {978-0-262-73189-8},
	url = {https://www.amazon.co.uk/Introduction-Agent-Based-Modeling-Natural-Engineered/dp/0262731894},
	urldate = {2016-12-14},
	publisher = {MIT Press},
	author = {Wilensky, Uri and Rand, William},
	year = {2015}
}

@book{agha_actors:_1986,
	address = {Cambridge, MA, USA},
	title = {Actors: {A} {Model} of {Concurrent} {Computation} in {Distributed} {Systems}},
	isbn = {978-0-262-01092-4},
	shorttitle = {Actors},
	publisher = {MIT Press},
	author = {Agha, Gul},
	year = {1986}
}

@book{marlow_parallel_2013,
	title = {Parallel and {Concurrent} {Programming} in {Haskell}},
	isbn = {978-1-4493-3593-9},
	abstract = {If you have a working knowledge of Haskell, this hands-on book shows you how to use the language\{u2019\}s many APIs and frameworks for writing both parallel and concurrent programs. You\{u2019\}ll learn how parallelism exploits multicore processors to speed up computation-heavy programs, and how concurrency enables you to write programs with threads for multiple interactions. Author Simon Marlow walks you through the process with lots of code examples that you can run, experiment with, and extend. Divided into separate sections on Parallel and Concurrent Haskell, this book also includes exercises to help you become familiar with the concepts presented: Express parallelism in Haskell with the Eval monad and Evaluation Strategies Parallelize ordinary Haskell code with the Par monad Build parallel array-based computations, using the Repa library Use the Accelerate library to run computations directly on the GPU Work with basic interfaces for writing concurrent code Build trees of threads for larger and more complex programs Learn how to build high-speed concurrent network servers Write distributed programs that run on multiple machines in a network.},
	language = {en},
	publisher = {O'Reilly},
	author = {Marlow, Simon},
	year = {2013},
	note = {Google-Books-ID: k0W6AQAACAAJ}
}

@inproceedings{hudak_history_2007,
	address = {New York, NY, USA},
	series = {{HOPL} {III}},
	title = {A {History} of {Haskell}: {Being} {Lazy} with {Class}},
	isbn = {978-1-59593-766-7},
	shorttitle = {A {History} of {Haskell}},
	url = {http://doi.acm.org/10.1145/1238844.1238856},
	doi = {10.1145/1238844.1238856},
	abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
	urldate = {2017-05-10},
	booktitle = {Proceedings of the {Third} {ACM} {SIGPLAN} {Conference} on {History} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
	year = {2007},
	pages = {12--1--12--55},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/GJQ4BK8V/Hudak et al. - 2007 - A History of Haskell Being Lazy with Class.pdf:application/pdf}
}

@inproceedings{marlow_runtime_2009,
	address = {New York, NY, USA},
	series = {{ICFP} '09},
	title = {Runtime {Support} for {Multicore} {Haskell}},
	isbn = {978-1-60558-332-7},
	url = {http://doi.acm.org/10.1145/1596550.1596563},
	doi = {10.1145/1596550.1596563},
	abstract = {Purely functional programs should run well on parallel hardware because of the absence of side effects, but it has proved hard to realise this potential in practice. Plenty of papers describe promising ideas, but vastly fewer describe real implementations with good wall-clock performance. We describe just such an implementation, and quantitatively explore some of the complex design tradeoffs that make such implementations hard to build. Our measurements are necessarily detailed and specific, but they are reproducible, and we believe that they offer some general insights.},
	urldate = {2018-09-25},
	booktitle = {Proceedings of the 14th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Marlow, Simon and Peyton Jones, Simon and Singh, Satnam},
	year = {2009},
	keywords = {Haskell, parallel, runtime},
	pages = {65--78},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/GEPABTSK/Marlow et al. - 2009 - Runtime Support for Multicore Haskell.pdf:application/pdf}
}

@inproceedings{shavit_software_1995,
	address = {New York, NY, USA},
	series = {{PODC} '95},
	title = {Software {Transactional} {Memory}},
	isbn = {978-0-89791-710-0},
	url = {http://doi.acm.org/10.1145/224964.224987},
	doi = {10.1145/224964.224987},
	urldate = {2018-08-01},
	booktitle = {Proceedings of the {Fourteenth} {Annual} {ACM} {Symposium} on {Principles} of {Distributed} {Computing}},
	publisher = {ACM},
	author = {Shavit, Nir and Touitou, Dan},
	year = {1995},
	pages = {204--213},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/MU422693/Shavit and Touitou - 1995 - Software Transactional Memory.pdf:application/pdf}
}

@article{lysenko_framework_2008,
	title = {A {Framework} for {Megascale} {Agent} {Based} {Model} {Simulations} on {Graphics} {Processing} {Units}},
	volume = {11},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/11/4/10.html},
	abstract = {Agent-based modeling is a technique for modeling dynamic systems from the bottom up. Individual elements of the system are represented computationally as agents. The system-level behaviors emerge from the micro-level interactions of the agents. Contemporary state-of-the-art agent-based modeling toolkits are essentially discrete-event simulators designed to execute serially on the Central Processing Unit (CPU). They simulate Agent-Based Models (ABMs) by executing agent actions one at a time. In addition to imposing an un-natural execution order, these toolkits have limited scalability. In this article, we investigate data-parallel computer architectures such as Graphics Processing Units (GPUs) to simulate large scale ABMs. We have developed a series of efficient, data parallel algorithms for handling environment updates, various agent interactions, agent death and replication, and gathering statistics. We present three fundamental innovations that provide unprecedented scalability. The first is a novel stochastic memory allocator which enables parallel agent replication in O(1) average time. The second is a technique for resolving precedence constraints for agent actions in parallel. The third is a method that uses specialized graphics hardware, to gather and process statistical measures. These techniques have been implemented on a modern day GPU resulting in a substantial performance increase. We believe that our system is the first ever completely GPU based agent simulation framework. Although GPUs are the focus of our current implementations, our techniques can easily be adapted to other data-parallel architectures. We have benchmarked our framework against contemporary toolkits using two popular ABMs, namely, SugarScape and StupidModel.},
	number = {4},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Lysenko, Mikola and D'Souza, Roshan M.},
	year = {2008},
	keywords = {Agent Based Modeling, Data Parallel Algorithms, GPGPU, Stochastic},
	pages = {10}
}

@inproceedings{heindl_modeling_2009,
	address = {ICST, Brussels, Belgium, Belgium},
	series = {Simutools '09},
	title = {Modeling {Software} {Transactional} {Memory} with {AnyLogic}},
	isbn = {978-963-9799-45-5},
	url = {http://dx.doi.org/10.4108/ICST.SIMUTOOLS2009.5581},
	doi = {10.4108/ICST.SIMUTOOLS2009.5581},
	abstract = {A flexible simulation model is presented to study different variants of software transactional memory (STM), like pessimistic STM or optimistic STM either with inplace memory updates or write buffering. The dynamic behavior of transactions is encoded in timed statecharts as provided by the simulation tool AnyLogic in its implementation of real-time UML. Their graphical representation helps to convey the key design issues of the simulation model within this publication. Statistically significant numeric results for varying parameters, like number of threads, number of transactional operations, number of transactional data objects, are obtained efficiently as part of a Parameter Variation Experiment.},
	urldate = {2018-07-10},
	booktitle = {Proceedings of the 2Nd {International} {Conference} on {Simulation} {Tools} and {Techniques}},
	publisher = {ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering)},
	author = {Heindl, Armin and Pokam, Gilles},
	year = {2009},
	pages = {10:1--10:10},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/HCQL5I6K/Heindl and Pokam - 2009 - Modeling Software Transactional Memory with AnyLog.pdf:application/pdf}
}

@inproceedings{discolo_lock_2006,
	address = {Berlin, Heidelberg},
	series = {{FLOPS}'06},
	title = {Lock {Free} {Data} {Structures} {Using} {STM} in {Haskell}},
	isbn = {3-540-33438-6 978-3-540-33438-5},
	url = {http://dx.doi.org/10.1007/11737414\_6},
	doi = {10.1007/11737414\_6},
	booktitle = {Proceedings of the 8th {International} {Conference} on {Functional} and {Logic} {Programming}},
	publisher = {Springer-Verlag},
	author = {Discolo, Anthony and Harris, Tim and Marlow, Simon and Jones, Simon Peyton and Singh, Satnam},
	year = {2006},
	pages = {65--80}
}

@inproceedings{perfumo_limits_2008,
	address = {New York, NY, USA},
	series = {{CF} '08},
	title = {The {Limits} of {Software} {Transactional} {Memory} ({STM}): {Dissecting} {Haskell} {STM} {Applications} on a {Many}-core {Environment}},
	isbn = {978-1-60558-077-7},
	url = {http://doi.acm.org/10.1145/1366230.1366241},
	doi = {10.1145/1366230.1366241},
	abstract = {In this paper, we present a Haskell Transactional Memory benchmark to provide a comprehensive application suite for the use of Software Transactional Memory (STM) researchers. We develop a framework to profile the execution of the benchmark applications and to collect detailed runtime data on their transactional behavior, running them on a 128-core multiprocessor. Using a composite of the collected raw data, we propose new transactional performance metrics. We analyze key statistics related to scalability, atomic sections, transactional events, overall transactional overhead and the relative hardware performance, accordingly drawing conclusions on the results. Our findings advance our comprehension on the STM runtime and the characteristics of different applications under the transactional management of the pure, functional programming language, Haskell.},
	booktitle = {Proceedings of the 5th {Conference} on {Computing} {Frontiers}},
	publisher = {ACM},
	author = {Perfumo, Cristian and Sönmez, Nehir and Stipic, Srdjan and Unsal, Osman and Cristal, Adrián and Harris, Tim and Valero, Mateo},
	year = {2008},
	keywords = {haskell, instrumentation, transactional memory},
	pages = {67--78}
}

@inproceedings{harris_composable_2005,
	address = {New York, NY, USA},
	series = {{PPoPP} '05},
	title = {Composable {Memory} {Transactions}},
	isbn = {978-1-59593-080-4},
	url = {http://doi.acm.org/10.1145/1065944.1065952},
	doi = {10.1145/1065944.1065952},
	abstract = {Writing concurrent programs is notoriously difficult, and is of increasing practical importance. A particular source of concern is that even correctly-implemented concurrency abstractions cannot be composed together to form larger abstractions. In this paper we present a new concurrency model, based on transactional memory, that offers far richer composition. All the usual benefits of transactional memory are present (e.g. freedom from deadlock), but in addition we describe new modular forms of blocking and choice that have been inaccessible in earlier work.},
	urldate = {2018-06-21},
	booktitle = {Proceedings of the {Tenth} {ACM} {SIGPLAN} {Symposium} on {Principles} and {Practice} of {Parallel} {Programming}},
	publisher = {ACM},
	author = {Harris, Tim and Marlow, Simon and Peyton-Jones, Simon and Herlihy, Maurice},
	year = {2005},
	keywords = {locks, non-blocking algorithms, transactions},
	pages = {48--60},
	file = {ACM Full Text PDF:/home/jonathan/Zotero/storage/B7AD466N/Harris et al. - 2005 - Composable Memory Transactions.pdf:application/pdf}
}

@Misc{bezirgiannis_improving_2013,
	title = {Improving {Performance} of {Simulation} {Software} {Using} {Haskells} {Concurrency} \& {Parallelism}},
	school = {Utrecht University - Dept. of Information and Computing Sciences},
	author = {Bezirgiannis, Nikolaos},
	year = {2013},
	month = mar
}

@inproceedings{meyer_event-driven_2014,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Event-{Driven} {Multi}-agent {Simulation}},
	isbn = {978-3-319-14626-3 978-3-319-14627-0},
	url = {https://link.springer.com/chapter/10.1007/978-3-319-14627-0_1},
	doi = {10.1007/978-3-319-14627-0_1},
	abstract = {Most agent-based models today apply a time-driven approach, i.e. simulation time is advanced in equidistant steps. This time advance method is considerably easier to implement than the more flexible and efficient event-driven approach.Applying the event-driven approach requires that (a) the durations for agent and environment actions are determined before they terminate, (b) each agent is able to instantly react to changes in its environment, and (c) the update of the state of the environment can be kept efficient despite updating agents asynchronously.The simulation toolkit famos fulfils these requirements, extending an existing discrete-event simulator. The toolkit also supports a flexible representation of space and the movement of agents in that space. These are areas where existing toolkits for agent-based modelling show shortcomings, despite the fact that a majority of multi-agent models explicitly model space and allow for mobile agents.},
	language = {en},
	urldate = {2018-02-13},
	booktitle = {Multi-{Agent}-{Based} {Simulation} {XV}},
	publisher = {Springer, Cham},
	author = {Meyer, Ruth},
	month = may,
	year = {2014},
	pages = {3--16},
	file = {Snapshot:/home/jonathan/Zotero/storage/RGMQKZE9/978-3-319-14627-0_1.html:text/html}
}

@article{macal_everything_2016,
	title = {Everything you need to know about agent-based modelling and simulation},
	volume = {10},
	issn = {1747-7778, 1747-7786},
	url = {https://link.springer.com/article/10.1057/jos.2016.7},
	doi = {10.1057/jos.2016.7},
	abstract = {This paper addresses the background and current state of the field of agent-based modelling and simulation (ABMS). It revisits the issue of ABMS represents as a new development, considering the extremes of being an overhyped fad, doomed to disappear, or a revolutionary development, shifting fundamental paradigms of how research is conducted. This paper identifies key ABMS resources, publications, and communities. It also proposes several complementary definitions for ABMS, based on practice, intended to establish a common vocabulary for understanding ABMS, which seems to be lacking. It concludes by suggesting research challenges for ABMS to advance and realize its potential in the coming years.},
	language = {en},
	number = {2},
	urldate = {2018-02-09},
	journal = {Journal of Simulation},
	author = {Macal, C. M.},
	month = may,
	year = {2016},
	pages = {144--156},
	file = {Snapshot:/home/jonathan/Zotero/storage/TI6F7ZIL/jos.2016.html:text/html}
}

@inproceedings{thaler_art_2017,
	address = {Dublin, Ireland},
	series = {Springer {Proceedings} in {Complexity}},
	title = {The {Art} {Of} {Iterating}: {Update}-{Strategies} in {Agent}-{Based}},
	isbn = {978-3-030-30297-9},
	shorttitle = {Social {Simulation} for a {Digital} {Society}},
	url = {https://www.springer.com/gp/book/9783030302979},
	abstract = {When developing a model for an Agent-Based Simulation (ABS) it is very important to select the update-strategy which reflects the semantics of the model as simulation results can vary vastly across different update-strategies. This awareness, we claim, is still underdeveloped in the majority of the field of ABS. In this paper we propose a new terminology to classify update strategies and then identify different strategies using this terminology. This will allow implementers and researchers in this field to use a general terminology, removing ambiguities when discussing ABS and their models. We will give results of simulating a discrete and a continuous game using our update-strategies and show that in the case of the discrete game only one specific strategy seems to be able to produce its emergent patterns whereas the pattern of the continuous game seems to be robust under varying update-strategies.},
	language = {en},
	author = {Thaler, Jonathan and Siebers, Peer-Olaf},
	month = sep,
	year = {2017},
	urldate = {2019-10-12},
	publisher = {Springer International Publishing},
	editor = {Payne, Diane and Elkink, Jos and Friel, Nial and Grund, Thomas and Hochstrasser, Tamara and Lucas, Pablo and Ottewill, Adrian},
	year = {2019},
	file = {Snapshot:/home/jonathan/Zotero/storage/A9NX4EP2/9783030302979.html:text/html}
}

@inproceedings{thaler_pure_2018,
	address = {New York, NY, USA},
	series = {{IFL} 2018},
	title = {Pure {Functional} {Epidemics}: {An} {Agent}-{Based} {Approach}},
	isbn = {978-1-4503-7143-8},
	shorttitle = {Pure {Functional} {Epidemics}},
	url = {http://doi.acm.org/10.1145/3310232.3310372},
	doi = {10.1145/3310232.3310372},
	abstract = {Agent-Based Simulation (ABS) is a methodology in which a system is simulated in a bottom-up approach by modelling the micro interactions of its constituting parts, called agents, out of which the global system behaviour emerges. So far mainly object-oriented techniques and languages have been used in ABS. Using the SIR model of epidemiology, which simulates the spreading of an infectious disease through a population, we demonstrate how to use pure Functional Reactive Programming to implement ABS. With our approach we can guarantee the reproducibility of the simulation at compile time and rule out specific classes of run-time bugs, something that is not possible with traditional object-oriented languages. Also, we found that the representation in a purely functional format is conceptually quite elegant and opens the way to formally reason about ABS.},
	urldate = {2019-05-03},
	booktitle = {Proceedings of the 30th {Symposium} on {Implementation} and {Application} of {Functional} {Languages}},
	publisher = {ACM},
	author = {Thaler, Jonathan and Altenkirch, Thorsten and Siebers, Peer-Olaf},
	year = {2018},
	note = {event-place: Lowell, MA, USA},
	keywords = {Functional Reactive Programming, Agent-Based Simulation, Monadic Stream Functions},
	pages = {1--12},
	file = {Submitted Version:/home/jonathan/Zotero/storage/WL2PCIGX/Thaler et al. - 2018 - Pure Functional Epidemics An Agent-Based Approach.pdf:application/pdf}
}

@inproceedings{thaler_show_2019,
	address = {Berlin},
	title = {Show {Me} {Your} {Properties}!  {The} {Potential} {Of} {Property}-{Based} {Testing} {In} {Agent}-{Based} {Simulation}},
	abstract = {This paper presents property-based testing, an approach for testing implementations of agent-based simulations (ABS), never considered so far in this field. It is a complementary technique to unit-testing and allows to test specifications and laws of an implementation directly in code which is then checked using automated test-data generation. As case-studies, we present two different models, an agent-based SIR model and the SugarScape model, in which we will show how to apply property-based testing to explanatory and exploratory agent-based models and what its limits are.},
	author = {Thaler, Jonathan and Siebers, Peer-Olaf},
	month = jul,
	year = {2019}
}

@inproceedings{harris_transactional_2006,
	title = {Transactional memory with data invariants},
	url = {https://www.microsoft.com/en-us/research/publication/transactional-memory-data-invariants/},
	abstract = {This paper introduces a mechanism for asserting invariants that are maintained by a program that uses atomic memory transactions. The idea is simple: a programmer writes check E where E is an expression that should be preserved by every atomic update for the remainder of the program's execution. We have extended STM Haskell to dynamically evaluate check statements atomically with the user's updates: the result is that we can identify precisely which update is the first one to break an invariant.},
	booktitle = {First {ACM} {SIGPLAN} {Workshop} on {Languages}, {Compilers}, and {Hardware} {Support} for {Transactional} {Computing} ({TRANSACT}'06)},
	author = {Harris, Tim and Peyton Jones, Simon},
	month = jun,
	year = {2006}
}

@misc{criterion_serpentine,
	title = {criterion: a Haskell microbenchmarking library},
	url = {http://www.serpentine.com/criterion/},
	howpublished = {\url{http://www.serpentine.com/criterion/}},
	language = {English},
	author = {O'Sullivan, B.},
	month = Oct,
	year = {2014},
	note = {Last Access December 4, 2019}
}

@misc{array_hackage,
	title = {array: Mutable and immutable arrays},
	url = {http://hackage.haskell.org/package/array},
	howpublished = {\url{http://hackage.haskell.org/package/array}},
	language = {English},
	author = {libraries@haskell.org},
	month = Dec,
	year = {2014},
	note = {Last Access December 4, 2019}
}

@misc{criterion_hackage,
	title = {criterion: Robust, reliable performance measurement and analysis},
	url = {http://hackage.haskell.org/package/criterion},
	howpublished = {\url{http://hackage.haskell.org/package/criterion}},
	language = {English},
	author = {O'Sullivan, B.},
	month = Dec,
	year = {2014},
	note = {Last Access December 4, 2019}
}

@misc{thaler_stm_sir_repository,
	title = {Repository of {STM} implementations of the agent-based {SIR} model in {H}askell},
	url = {https://github.com/thalerjonathan/haskell-stm-sir},
	howpublished = {\url{https://github.com/thalerjonathan/haskell-stm-sir}},
	language = {English},
	author = {Thaler, J.},
	month = Oct,
	year = {2019},
	note = {Last Access December 4, 2019}
}

@misc{concurrent_extra_library,
	title = {concurrent-extra library},
	url = {http://hackage.haskell.org/package/concurrent-extra},
	howpublished = {\url{http://hackage.haskell.org/package/concurrent-extra}},
	language = {English},
	author = {van Dijk, B. and van Dijk, J.},
	month = Mar,
	year = {2018},
	note = {Last Access December 4, 2019}
}

@misc{stm_stats_library,
	title = {stm-stats library},
	url = {http://hackage.haskell.org/package/stm-stats},
	howpublished = {\url{http://hackage.haskell.org/package/stm-stats}},
	language = {English},
	author = {Breitner, J.},
	month = Oct,
	year = {2019},
	note = {Last Access December 4, 2019}
}

@misc{thaler_stm_sugarscape_repository,
	title = {Repository of {STM} implementations of the {S}ugarscape model in {H}askell},
	url = {https://github.com/thalerjonathan/haskell-stm-sugarscape},
	howpublished = {\url{https://github.com/thalerjonathan/haskell-stm-sugarscape}},
	language = {English},
	author = {Thaler, J.},
	month = Oct,
	year = {2019},
	note = {Last Access December 4, 2019}
}

@article{suryanarayanan_pdes-mas_2013,
	series = {2013 {International} {Conference} on {Computational} {Science}},
	title = {{PDES}-{MAS}: {Distributed} {Simulation} of {Multi}-agent {Systems}},
	volume = {18},
	issn = {1877-0509},
	shorttitle = {{PDES}-{MAS}},
	url = {http://www.sciencedirect.com/science/article/pii/S1877050913003748},
	doi = {10.1016/j.procs.2013.05.231},
	abstract = {Multi-agent systems (MAS) are increasingly being acknowledged as a modelling paradigm for capturing the dynamics of complex systems in a wide range of domains, from system biology to adaptive socio-technical system of systems. The execution of such MAS simulations on parallel machines is a challenging problem due to their dynamic, non-deterministic, data-centric behaviour and nature. These problems are exacerbated as the scale of such MAS models increases. PDES-MAS is a distributed simulation kernel developed specifically to support MAS models addressing the problems of partitioning, load balancing and interest management in an integrated, transparent and adaptive manner. This paper presents an overview of PDES-MAS and for the first time it provides a quantitative evaluation of the system.},
	language = {en},
	urldate = {2019-11-05},
	journal = {Procedia Computer Science},
	author = {Suryanarayanan, Vinoth and Theodoropoulos, Georgios and Lees, Michael},
	month = jan,
	year = {2013},
	keywords = {Agent-based systems, Distributed simulation},
	pages = {671--681},
	file = {ScienceDirect Full Text PDF:/home/jonathan/Zotero/storage/2E9A8LRT/Suryanarayanan et al. - 2013 - PDES-MAS Distributed Simulation of Multi-agent Sy.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/Zotero/storage/Z2GL9CPT/S1877050913003748.html:text/html}
} 

@article{logan_distributed_2001,
	title = {The distributed simulation of multiagent systems},
	volume = {89},
	issn = {0018-9219, 1558-2256},
	doi = {10.1109/5.910853},
	abstract = {Agent based systems are increasingly being applied in a wide range of areas including telecommunications, business process modeling, computer games, control of mobile robots, and military simulations. Such systems are typically extremely complex and it is often useful to be able to simulate an agent based system to learn more about its behavior or investigate the implications of alternative architectures. The authors discuss the application of distributed discrete event simulation techniques to the simulation of multiagent systems. We identify the efficient distribution of the agents' environment as a key problem in the simulation of agent based systems and present an approach to the decomposition of the environment that facilitates load balancing.},
	number = {2},
	journal = {Proceedings of the IEEE},
	author = {Logan, B. and Theodoropoulos, G.},
	month = feb,
	year = {2001},
	keywords = {agent based system simulation, agent based systems, agent environment, business process modeling, Computational modeling, computer games, Computer simulation, discrete event simulation, Discrete event simulation, distributed discrete event simulation techniques, distributed processing, distributed simulation, load balancing, Military communication, Military computing, military simulations, mobile robots, Mobile robots, multi-agent systems, multiagent system simulation, Multiagent systems, resource allocation, Robot control, Telecommunication computing, Telecommunication control, telecommunications, virtual machines},
	pages = {174--185},
	file = {IEEE Xplore Abstract Record:/home/jonathan/Zotero/storage/8GG2FD6B/910853.html:text/html}
}

@article{lees_using_2008,
	title = {Using {Access} {Patterns} to {Analyze} the {Performance} of {Optimistic} {Synchronization} {Algorithms} in {Simulations} of {MAS}},
	volume = {84},
	issn = {0037-5497},
	url = {http://dx.doi.org/10.1177/0037549708096691},
	doi = {10.1177/0037549708096691},
	abstract = {We present a detailed analysis of the performance of the Decision Theoretic Read Delay (DTRD) optimistic synchronization algorithm for simulations of multi-agent systems (MAS). We develop an abstract characterization of the access patterns found in MAS simulations based on the simulation's degree of coupling and skew. Using this characterization, we generated stereotypical test cases which we used to compare the performance of the DTRD algorithm with that of Time Warp and time windows. To determine if the test cases reliably predict performance in a real agent simulation, we compared the predictions made by the test cases with performance results from the Boids agent simulation benchmark for a range of simulation parameters. The results indicate that the test cases are useful predictors of performance in real agent simulations, that DTRD adapts to the mixtures of coupling cases found in real agent simulations and is capable of tracking changes in coupling during the simulation.},
	number = {10-11},
	urldate = {2019-10-22},
	journal = {Simulation},
	author = {Lees, Michael and Logan, Brian and Theodoropoulos, Georgios},
	month = oct,
	year = {2008},
	pages = {481--492}
}

@article{suryanarayanan_synchronised_2013,
	title = {Synchronised {Range} {Queries} in {Distributed} {Simulations} of {Multiagent} {Systems}},
	volume = {23},
	issn = {1049-3301},
	url = {http://doi.acm.org/10.1145/2517449},
	doi = {10.1145/2517449},
	abstract = {Range queries are an increasingly important associative form of data access encountered in different computational environments including peer-to-peer systems, wireless communications, database systems, distributed virtual environments, and, more recently, distributed simulations. In this article, we present and evaluate a system for performing logical-time synchronised Range-Queries over data in the context of distributed simulations of multiagent systems. This article presents algorithms performing instantaneous queries within an optimistic synchronisation framework and in the presence of dynamic migration of the simulation state. A quantitative evaluation of the effectiveness of the proposed algorithms under different conditions and for different benchmarks, including Boids, is also presented.},
	number = {4},
	urldate = {2019-10-22},
	journal = {ACM Trans. Model. Comput. Simul.},
	author = {Suryanarayanan, Vinoth and Theodoropoulos, Georgios},
	month = nov,
	year = {2013},
	keywords = {data management, distributed simulation, distributed virtual environments, load balancing, multiagent systems, Range queries},
	pages = {25:1--25:25}
}

@inproceedings{riley_next_2003,
	series = {{WSC} '03},
	title = {Next {Generation} {Modeling} {III} - {Agents}: {Spades} — a {Distributed} {Agent} {Simulation} {Environment} with {Software}-in-the-loop {Execution}},
	isbn = {978-0-7803-8132-2},
	shorttitle = {Next {Generation} {Modeling} {III} - {Agents}},
	url = {http://dl.acm.org/citation.cfm?id=1030818.1030926},
	abstract = {Simulations are used extensively for studying artificial intelligence. However, the simulation technology in use by and designed for the artificial intelligence community often fails to take advantage of much of the work by the larger simulation community to produce distributed, repeatable, and efficient simulations. We present the new system known as \textit{System for Parallel Agent Discrete Event Simulator, (SPADES)}, which is a simulation environment for the artificial intelligence community. \textit{SPADES} focuses on the \textit{agent} as a fundamental simulation component. The \textit{thinking time} of an agent is tracked and reflected in the results of the agents' actions by using a \textit{Software-in-the-Loop} mechanism. \textit{SPADES} supports distributed execution of the agents across multiple systems, while at the same time producing repeatable results regardless of network or system load. We discuss the design of \textit{SPADES} in detail and give experimental results. \textit{SPADES} is flexible enough for a variety of application domains in the artificial intelligence research community.},
	urldate = {2019-10-22},
	booktitle = {Proceedings of the 35th {Conference} on {Winter} {Simulation}: {Driving} {Innovation}},
	publisher = {Winter Simulation Conference},
	author = {Riley, Patrick F. and Riley, George F.},
	year = {2003},
	note = {event-place: New Orleans, Louisiana},
	pages = {817--825}
}

@inproceedings{gasser_mace3j:_2002,
	address = {New York, NY, USA},
	series = {{AAMAS} '02},
	title = {{MACE}3J: {Fast} {Flexible} {Distributed} {Simulation} of {Large}, {Large}-grain {Multi}-agent {Systems}},
	isbn = {978-1-58113-480-3},
	shorttitle = {{MACE}3J},
	url = {http://doi.acm.org/10.1145/544862.544918},
	doi = {10.1145/544862.544918},
	abstract = {Scientific study of multi-agent systems (MAS) requires infrastructure such as development testbeds and simulation tools for repeatable, controlled experiments with MAS structure and behavior. Testbeds and simulation tools are also critical for MAS education and development. A number of MAS testbeds currently exist, but to date none meets in a comprehensive way criteria laid out by many analysts for general, scientific, experimental study of MAS by a large community. Moreover, none really scales to very large MAS or exploits the power of modern distributed computing environments such as large multiprocessor clusters and computational grids. Because of this, and specifically to fulfill widespread need for tools supporting distributed collaborative scientific research in large-scale, large-grain MAS, we created the MACE3J system, a successor to the pioneering MACE testbed.MACE3J is a Java-based MAS simulation, integration, and development testbed, with a supporting library of components, examples, and documentation, distributed freely. MACE3J currently runs on single- and multiprocessor workstations, and in large multiprocessor cluster environments. The MACE3J design is multi-grain, but gives special attention to simulating very large communities of large-grain agents. It exhibits a significant degree of scalability, and has been effectively used in fast simulations of over 5,000 agents, 10,000 tasks, and 10M messages, and on multiprocessor configurations of up to 48 processors, with a future target of at least 1000 processors.This paper presents MACE3J design criteria and our approach to a number of critical tradeoffs that, to our knowledge, have not previously been treated explicitly in MAS literature or platforms. We present the innovative features of the MACE3J architecture that contribute to its breadth, flexibility and scalability, and finally give results from the use of MACE3J in real experiments in realistic MAS domains, both simple and complex.},
	urldate = {2019-10-22},
	booktitle = {Proceedings of the {First} {International} {Joint} {Conference} on {Autonomous} {Agents} and {Multiagent} {Systems}: {Part} 2},
	publisher = {ACM},
	author = {Gasser, Les and Kakugawa, Kelvin},
	year = {2002},
	note = {event-place: Bologna, Italy},
	pages = {745--752}
}

@inproceedings{himmelspach_plugn_2007,
	title = {Plug'n {Simulate}},
	doi = {10.1109/ANSS.2007.34},
	abstract = {Developments in simulation systems, e.g. new simulators, partitioning algorithms, modeling formalisms, or specialized user interfaces, often implies the realization of entire simulation systems from scratch. This requires significant efforts, and, in addition, it hampers the evaluation of the results achieved. The proposed plug 'n simulate concept enables developers to integrate their ideas into an existing framework and thus eases the development and the evaluation of results},
	booktitle = {40th {Annual} {Simulation} {Symposium} ({ANSS}'07)},
	author = {Himmelspach, Jan and Uhrmacher, Adelinde M.},
	month = mar,
	year = {2007},
	note = {ISSN: 1080-241X},
	keywords = {Adaptation models, Analytical models, Biological system modeling, computer aided analysis, digital simulation, James II, Load modeling, Partitioning algorithms, plug 'n simulate, Production facilities, simulation systems, User interfaces},
	pages = {137--143},
	file = {IEEE Xplore Abstract Record:/home/jonathan/Zotero/storage/8M3L8I6L/4127212.html:text/html;IEEE Xplore Full Text PDF:/home/jonathan/Zotero/storage/TC9LDR3K/Himmelspach and Uhrmacher - 2007 - Plug'n Simulate.pdf:application/pdf}
}

@article{minson_distributing_2008,
	title = {Distributing {RePast} agent-based simulations with {HLA}},
	volume = {20},
	copyright = {Copyright © 2008 John Wiley \& Sons, Ltd.},
	issn = {1532-0634},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.1280},
	doi = {10.1002/cpe.1280},
	abstract = {Large, experimental multi-agent system (MAS) simulations are highly demanding tasks, both computationally and developmentally. Agent toolkits provide reliable templates for the design of even the largest MAS simulations, without offering a solution to computational limitations. Conversely, distributed simulation architectures offer performance benefits, but the introduction of parallel logic can complicate the design process significantly. The motivations of distribution are not limited to this question of processing power. True interoperation of sequential agent-simulation platforms would allow agents designed using different toolkits to transparently interact in common abstract domains. This paper discusses the design and implementation of a system capable of harnessing the computational power of a distributed simulation infrastructure with the design efficiency of an agent toolkit. The system permits integration, through a higher-level architecture (HLA) federation, of multiple instances of the Java-based lightweight agent-simulation toolkit RePast. This paper defines abstractly the engineering process necessary in creating such middleware, and reports on the experience in the specific case of the RePast toolkit. The paper also presents performance results that illustrate that significant speedup can be achieved through the integration of RePast with HLA. Copyright © 2008 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {10},
	urldate = {2019-10-22},
	journal = {Concurrency and Computation: Practice and Experience},
	author = {Minson, R. and Theodoropoulos, G. K.},
	year = {2008},
	keywords = {distributed simulation, multi-agent simulation},
	pages = {1225--1256},
	file = {Snapshot:/home/jonathan/Zotero/storage/YIJDV4ZU/cpe.html:text/html}
}

@inproceedings{gorur_repast_2016,
	address = {San Diego, CA, USA},
	series = {{HPC} '16},
	title = {Repast {HPC} with {Optimistic} {Time} {Management}},
	isbn = {978-1-5108-2318-1},
	url = {https://doi.org/10.22360/SpringSim.2016.HPC.046},
	doi = {10.22360/SpringSim.2016.HPC.046},
	abstract = {High performance computing (HPC) has great potential to speedup agent-based simulations. In parallel and distributed simulation (PADS) community, a well-known fact is that employing an optimistic time management mechanism instead of a conservative time management mechanism may provide remarkable performance enhancement, because optimistic approach avoids redundant synchronization among logical processes (LPs). In this paper, an existing optimistic time management mechanism, namely Time Warp, by Jefferson, is adapted for a distributed agent based simulation tool. We implemented Time Warp on an open source and distributed agent based modeling and simulation (ABMS) tool, namely Repast for High Performance Computing (Repast HPC), from Argonne National Laboratory, Chicago, IL, USA. We incorporated a simple and self-adaptive technique for adjusting checkpoint intervals. Two case studies have been implemented to compare our optimistic approach and existing Repast HPC's conservative approach. The experiments suggest that optimistic approach is more scalable than conservative approach in agent based simulations.},
	urldate = {2019-10-22},
	booktitle = {Proceedings of the 24th {High} {Performance} {Computing} {Symposium}},
	publisher = {Society for Computer Simulation International},
	author = {Gorur, B. Kaan and Imre, Kayhan and Oguztuzun, Halit and Yilmaz, Levent},
	year = {2016},
	note = {event-place: Pasadena, California},
	keywords = {agent based simulation, optimistic time management, parallel and distributed computing, self-adaptive checkpoint, time warp algorithm},
	pages = {4:1--4:9}
}

@inproceedings{hay_experiments_2015,
	address = {New York, NY, USA},
	series = {{SIGSIM} {PADS} '15},
	title = {Experiments with {Hardware}-based {Transactional} {Memory} in {Parallel} {Simulation}},
	isbn = {978-1-4503-3583-6},
	url = {http://doi.acm.org/10.1145/2769458.2769462},
	doi = {10.1145/2769458.2769462},
	abstract = {Transactional memory is a concurrency control mechanism that dynamically determines when threads may safely execute critical sections of code. It provides the performance of fine-grained locking mechanisms with the simplicity of coarse-grained locking mechanisms. With hardware based transactions, the protection of shared data accesses and updates can be evaluated at runtime so that only true collisions to shared data force serialization. This paper explores the use of transactional memory as an alternative to conventional synchronization mechanisms for managing the pending event set in a Time Warp synchronized parallel simulator. In particular, we explore the application of Intel's hardware-based transactional memory (TSX) to manage shared access to the pending event set by the simulation threads. Comparison between conventional locking mechanisms and transactional memory access is performed to evaluate each within the warped Time Warp synchronized parallel simulation kernel. In this testing, evaluation of both forms of transactional memory found in the Intel Haswell processor, Hardware Lock Elision (HLE) and Restricted Transactional Memory (RTM), are evaluated. The results show that RTM generally outperforms conventional locking mechanisms and that HLE provides consistently better performance than conventional locking mechanisms, in some cases as much as 27\%.},
	urldate = {2019-10-22},
	booktitle = {Proceedings of the 3rd {ACM} {SIGSIM} {Conference} on {Principles} of {Advanced} {Discrete} {Simulation}},
	publisher = {ACM},
	author = {Hay, Joshua and Wilsey, Philip A.},
	year = {2015},
	note = {event-place: London, United Kingdom},
	keywords = {optimistic synchronization, parallel simulation, pending event set, transactional memory},
	pages = {75--86}
}

@article{abar_agent_2017,
	title = {Agent {Based} {Modelling} and {Simulation} tools: {A} review of the state-of-art software},
	volume = {24},
	issn = {15740137},
	shorttitle = {Agent {Based} {Modelling} and {Simulation} tools},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1574013716301198},
	doi = {10.1016/j.cosrev.2017.03.001},
	language = {en},
	urldate = {2019-10-22},
	journal = {Computer Science Review},
	author = {Abar, Sameera and Theodoropoulos, Georgios K. and Lemarinier, Pierre and O’Hare, Gregory M.P.},
	month = may,
	year = {2017},
	pages = {13--33}
}

@article{cicirelli_efficient_2015,
	title = {Efficient {Environment} {Management} for {Distributed} {Simulation} of {Large}-scale {Situated} {Multi}-agent {Systems}},
	volume = {27},
	issn = {1532-0626},
	url = {http://dx.doi.org/10.1002/cpe.3254},
	doi = {10.1002/cpe.3254},
	abstract = {Multi-agent systems have been proven very effective for the modelling and simulation M\&S of complex systems like those related to biology, engineering, social sciences and so forth. The intrinsic spatial character of many such systems leads to the definition of a situated agent. A situated agent owns spatial coordinates and acts and interacts with its peers in a hosting territory. In the context of parallel/distributed simulation of situated agent models, the territory represents a huge shared variable that requires careful handling. Frequent access by agents to territory information easily becomes a bottleneck degrading system performance and scalability. This paper proposes an original approach to modelling and distributed simulation of large-scale situated multi-agent systems. Time management is exploited for resolving conflicts and achieving data consistency while accessing the environment. The approach allows a simplification of the M\&S tasks by making the modeller unaware of distribution concerns while ensuring the achievement of good scalability and performance during the distributed simulation. Practical aspects of the approach are demonstrated through some modelling examples based on Tileworld. Copyright © 2014 John Wiley \& Sons, Ltd.},
	number = {3},
	urldate = {2019-10-22},
	journal = {Concurr. Comput. : Pract. Exper.},
	author = {Cicirelli, Franco and Giordano, Andrea and Nigro, Libero},
	month = mar,
	year = {2015},
	keywords = {actors, composed logical time, distributed simulation, distributed spatial environment, Java, situated multi-agent systems},
	pages = {610--632},
	file = {Full Text:/home/jonathan/Zotero/storage/8B7R7T86/Cicirelli et al. - 2015 - Efficient Environment Management for Distributed S.pdf:application/pdf}
}