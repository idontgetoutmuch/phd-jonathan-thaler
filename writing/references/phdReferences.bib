
@incollection{klugl_amason:_2013,
	address = {Berlin, Heidelberg},
	title = {{AMASON}: {Abstract} {Meta}-model for {Agent}-{Based} {SimulatiON}},
	isbn = {978-3-642-40776-5},
	url = {http://dx.doi.org/10.1007/978-3-642-40776-5_11},
	booktitle = {Multiagent {System} {Technologies}: 11th {German} {Conference}, {MATES} 2013, {Koblenz}, {Germany}, {September} 16-20, 2013. {Proceedings}},
	publisher = {Springer Berlin Heidelberg},
	author = {Klügl, Franziska and Davidsson, Paul},
	editor = {Klusch, Matthias and Thimm, Matthias and Paprzycki, Marcin},
	year = {2013},
	note = {DOI: 10.1007/978-3-642-40776-5\_11},
	pages = {101--114}
}

@article{blume_introduction_2015,
	series = {Computer {Science} and {Economic} {Theory}},
	title = {Introduction to computer science and economic theory},
	volume = {156},
	issn = {0022-0531},
	url = {http://www.sciencedirect.com/science/article/pii/S0022053114001616},
	doi = {10.1016/j.jet.2014.11.002},
	abstract = {This essay introduces the symposium on computer science and economic theory.},
	urldate = {2016-12-12},
	journal = {Journal of Economic Theory},
	author = {Blume, Lawrence and Easley, David and Kleinberg, Jon and Kleinberg, Robert and Tardos, Éva},
	month = mar,
	year = {2015},
	keywords = {Algorithmic game theory, Implementation, Learning in games, Mechanism design, Networks},
	pages = {1--13},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/H3EK4XCX/Blume et al. - 2015 - Introduction to computer science and economic theo.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/JS2CWSZB/S0022053114001616.html:text/html}
}

@book{gamma_design_1994,
	edition = {1 edition},
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	shorttitle = {Design {Patterns}},
	abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John and Booch, Grady},
	month = oct,
	year = {1994}
}

@article{nowak_evolutionary_1992,
	title = {Evolutionary games and spatial chaos},
	volume = {359},
	copyright = {© 1992 Nature Publishing Group},
	issn = {0028-0836},
	url = {http://www.nature.com/nature/journal/v359/n6398/abs/359826a0.html},
	doi = {10.1038/359826a0},
	language = {en},
	number = {6398},
	urldate = {2017-01-17},
	journal = {Nature},
	author = {Nowak, Martin A. and May, Robert M.},
	month = oct,
	year = {1992},
	pages = {826--829},
	file = {Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/249DX8ED/Nowak and May - 1992 - Evolutionary games and spatial chaos.pdf:application/pdf;Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/S4K44BBF/359826a0.html:text/html}
}

@book{hector_computable_2012,
	address = {Singapore ; Hackensack, N.J},
	title = {{COMPUTABLE} {UNIVERSE}, {A}: {UNDERSTANDING} {AND} {EXPLORING} {NATURE} {AS} {COMPUTATION}},
	isbn = {978-981-4374-29-3},
	shorttitle = {{COMPUTABLE} {UNIVERSE}, {A}},
	abstract = {This volume, with a foreword by Sir Roger Penrose, discusses the foundations of computation in relation to nature. It focuses on two main questions: What is computation? How does nature compute? The contributors are world-renowned experts who have helped shape a cutting-edge computational understanding of the universe. They discuss computation in the world from a variety of perspectives, ranging from foundational concepts to pragmatic models to ontological conceptions and philosophical implications. The volume provides a state-of-the-art collection of technical papers and non-technical essays, representing a field that assumes information and computation to be key in understanding and explaining the basic structure underpinning physical reality. It also includes a new edition of Konrad Zuse's "Calculating Space" (the MIT translation), and a panel discussion transcription on the topic, featuring worldwide experts in quantum mechanics, physics, cognition, computation and algorithmic complexity. The volume is dedicated to the memory of Alan M Turing - the inventor of universal computation, on the 100th anniversary of his birth, and is part of the Turing Centenary celebrations.},
	language = {English},
	publisher = {World Scientific Publishing Company},
	author = {HECTOR, ZENIL},
	editor = {Zenil, Hector},
	month = dec,
	year = {2012}
}

@article{baker_market_2013,
	title = {Market {Microstructure} in {Emerging} and {Developed} {Markets}},
	url = {http://digitalcommons.fairfield.edu/business-books/37},
	journal = {Business Faculty Book Gallery},
	author = {Baker, H. Kent and Kiymaz, Halil and Alan, Nazli Sila and Bildik, Recep and Schwartz, Robert},
	month = jan,
	year = {2013},
	file = {"Market Microstructure in Emerging and Developed Markets" by H. Kent Baker, Halil Kiymaz et al.:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/EX9CUCD4/37.html:text/html}
}

@book{muller_design_1997,
	address = {Secaucus, NJ, USA},
	edition = {1st},
	title = {The {Design} of {Intelligent} {Agents}: {A} {Layered} {Approach}},
	isbn = {978-3-540-62003-7},
	shorttitle = {The {Design} of {Intelligent} {Agents}},
	publisher = {Springer-Verlag New York, Inc.},
	author = {Muller, Jorg P.},
	year = {1997}
}

@inproceedings{agha_algebraic_2004,
	title = {An {Algebraic} {Theory} of {Actors} and its {Application} to a {Simple} {Object}-{Based} {Language}},
	booktitle = {In {Ole}-{Johan} {Dahl}’s {Festschrift}, volume 2635 of {LNCS}},
	publisher = {Springer},
	author = {Agha, Gul},
	year = {2004},
	pages = {26--57},
	file = {Citeseer - Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/AUQ299V6/Agha - 2004 - An Algebraic Theory of Actors and its Application .pdf:application/pdf;Citeseer - Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/CIPWAFRD/summary.html:text/html}
}

@article{parker_distributed_2011,
	title = {A {Distributed} {Platform} for {Global}-{Scale} {Agent}-{Based} {Models} of {Disease} {Transmission}},
	volume = {22},
	issn = {1049-3301},
	url = {http://doi.acm.org/10.1145/2043635.2043637},
	doi = {10.1145/2043635.2043637},
	abstract = {The Global-Scale Agent Model (GSAM) is presented. The GSAM is a high-performance distributed platform for agent-based epidemic modeling capable of simulating a disease outbreak in a population of several billion agents. It is unprecedented in its scale, its speed, and its use of Java. Solutions to multiple challenges inherent in distributing massive agent-based models are presented. Communication, synchronization, and memory usage are among the topics covered in detail. The memory usage discussion is Java specific. However, the communication and synchronization discussions apply broadly. We provide benchmarks illustrating the GSAM’s speed and scalability.},
	number = {1},
	urldate = {2016-10-31},
	journal = {ACM Trans. Model. Comput. Simul.},
	author = {Parker, Jon and Epstein, Joshua M.},
	month = dec,
	year = {2011},
	keywords = {Agent-based modeling, agent behavior, Epidemiology},
	pages = {2:1--2:25},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/4QK66WS3/Parker and Epstein - 2011 - A Distributed Platform for Global-Scale Agent-Base.pdf:application/pdf}
}

@book{spivak_category_2014,
	address = {Cambridge, Massachusetts},
	edition = {1},
	title = {Category {Theory} for the {Sciences}},
	isbn = {978-0-262-02813-4},
	abstract = {Category theory was invented in the 1940s to unify and synthesize different areas in mathematics, and it has proven remarkably successful in enabling powerful communication between disparate fields and subfields within mathematics. This book shows that category theory can be useful outside of mathematics as a rigorous, flexible, and coherent modeling language throughout the sciences. Information is inherently dynamic; the same ideas can be organized and reorganized in countless ways, and the ability to translate between such organizational structures is becoming increasingly important in the sciences. Category theory offers a unifying framework for information modeling that can facilitate the translation of knowledge between disciplines. Written in an engaging and straightforward style, and assuming little background in mathematics, the book is rigorous but accessible to non-mathematicians. Using databases as an entry to category theory, it begins with sets and functions, then introduces the reader to notions that are fundamental in mathematics: monoids, groups, orders, and graphs – categories in disguise. After explaining the "big three" concepts of category theory – categories, functors, and natural transformations – the book covers other topics, including limits, colimits, functor categories, sheaves, monads, and operads. The book explains category theory by examples and exercises rather than focusing on theorems and proofs. It includes more than 300 exercises, with solutions. Category Theory for the Sciences is intended to create a bridge between the vast array of mathematical concepts used by mathematicians and the models and frameworks of such scientific disciplines as computation, neuroscience, and physics.},
	language = {Englisch},
	publisher = {Mit Press Ltd},
	author = {Spivak, David I.},
	month = nov,
	year = {2014}
}

@book{wooldridge_introduction_2009,
	edition = {2nd},
	title = {An {Introduction} to {MultiAgent} {Systems}},
	isbn = {978-0-470-51946-2},
	abstract = {The study of multi-agent systems (MAS) focuses on systems in which many intelligent agents interact with each other. These agents are considered to be autonomous entities such as software programs or robots. Their interactions can either be cooperative (for example as in an ant colony) or selfish (as in a free market economy). This book assumes only basic knowledge of algorithms and discrete maths, both of which are taught as standard in the first or second year of computer science degree programmes. A basic knowledge of artificial intelligence would useful to help understand some of the issues, but is not essential. The books main aims are: To introduce the student to the concept of agents and multi-agent systems, and the main applications for which they are appropriate To introduce the main issues surrounding the design of intelligent agents To introduce the main issues surrounding the design of a multi-agent society To introduce a number of typical applications for agent technology},
	publisher = {Wiley Publishing},
	author = {Wooldridge, Michael},
	year = {2009}
}

@incollection{hewitt_what_2007,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {What {Is} {Commitment}? {Physical}, {Organizational}, and {Social} ({Revised})},
	copyright = {©2007 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-74457-3 978-3-540-74459-7},
	shorttitle = {What {Is} {Commitment}?},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-74459-7_19},
	abstract = {This paper uses Participatory Semantics to explicate commitment. Information expresses the fact that a system is in a certain configuration that is correlated to the configuration of another system. Any physical system may contain information about another physical system. For the purposes of this paper, physical commitment is defined to be information pledgedabout physical systems (situated at a particular place and time). This use of the term physical commitment is currently nonstandard. Note that commitment is defined for whole physical system; not just a participant or process. Organizational and social commitments can be analyzed in terms of physical commitments. For example systems that behave as scientific communities can have commitments for monotonicity, concurrency, commutativity, pluralism, skepticism, and provenance. Speech Act Theory has attempted to formalize the semantics of some kinds of expressions for commitments. Participatory Semantics for commitment can overcome some of the lack of expressiveness and generality in Speech Act Theory.},
	language = {en},
	number = {4386},
	urldate = {2016-10-26},
	booktitle = {Coordination, {Organizations}, {Institutions}, and {Norms} in {Agent} {Systems} {II}},
	publisher = {Springer Berlin Heidelberg},
	author = {Hewitt, Carl},
	editor = {Noriega, Pablo and Vázquez-Salceda, Javier and Boella, Guido and Boissier, Olivier and Dignum, Virginia and Fornara, Nicoletta and Matson, Eric},
	year = {2007},
	keywords = {Artificial Intelligence (incl. Robotics), Computer Communication Networks, Logics and Meanings of Programs, Programming Techniques, Software Engineering, Software Engineering/Programming and Operating Systems},
	pages = {293--307},
	file = {Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/WW478ECG/Hewitt - 2007 - What Is Commitment Physical, Organizational, and .pdf:application/pdf;Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/BXQAFWI9/10.html:text/html}
}

@book{railsback_stupidmodel_2005,
	title = {{StupidModel} and {Extensions}: {A} {Template} and {Teaching} {Tool} for {Agent}-based {Modeling} {Platforms}},
	url = {http://condor.depaul.edu/slytinen/abm/StupidModelFormulation.pdf},
	author = {Railsback, Steve and Lytinen, Steve and Grimm, Volker},
	month = dec,
	year = {2005}
}

@article{oprea_continuous_2014,
	title = {Continuous time and communication in a public-goods experiment},
	volume = {108},
	issn = {0167-2681},
	url = {http://www.sciencedirect.com/science/article/pii/S0167268114002509},
	doi = {10.1016/j.jebo.2014.09.012},
	abstract = {We investigate the nature of continuous time strategic interaction in public-goods games. In one set of treatments, four subjects make contribution decisions in continuous time during a 10-min interval while in another they make them only at 10 discrete points of time during this interval. The effect of continuous time is muted in public-goods games compared to simpler social dilemmas and the data suggest that widespread coordination problems are to blame. When we add a rich communication protocol, these coordination problems largely disappear and the median subject contributes completely to the public good with no sign of decay over time. At the median, the same communication protocol is less than half as effective in discrete time.},
	urldate = {2016-10-27},
	journal = {Journal of Economic Behavior \& Organization},
	author = {Oprea, Ryan and Charness, Gary and Friedman, Daniel},
	month = dec,
	year = {2014},
	keywords = {C72, C92, Continuous time games, D70, H41, Public goods, Voluntary contribution mechanism},
	pages = {212--223},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/RTP8JK8G/Oprea et al. - 2014 - Continuous time and communication in a public-good.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/JTD4E6HG/S0167268114002509.html:text/html}
}

@phdthesis{mun_hon_functional_2005,
	address = {Sydney, Australia},
	title = {Functional {Programming} and 3D {Games}},
	abstract = {Games are commonly programmed in imperative languages. Functional languages have been known to have benefits but have rarely been used to program games. In this thesis we implement a first person shooting game in Haskell and Yampa. The merits of this approach are examined.},
	school = {University of New South Wales},
	author = {Mun Hon, Cheong},
	year = {2005}
}

@article{budish_editors_2015,
	title = {Editor's {Choice} {The} {High}-{Frequency} {Trading} {Arms} {Race}: {Frequent} {Batch} {Auctions} as a {Market} {Design} {Response}},
	volume = {130},
	shorttitle = {Editor's {Choice} {The} {High}-{Frequency} {Trading} {Arms} {Race}},
	url = {http://econpapers.repec.org/article/oupqjecon/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.htm},
	abstract = {The high-frequency trading arms race is a symptom of flawed market design. Instead of the continuous limit order book market design that is currently predominant, we argue that financial exchanges should use frequent batch auctions: uniform price double auctions conducted, for example, every tenth of a second. That is, time should be treated as discrete instead of continuous, and orders should be processed in a batch auction instead of serially. Our argument has three parts. First, we use millisecond-level direct-feed data from exchanges to document a series of stylized facts about how the continuous market works at high-frequency time horizons: (i) correlations completely break down; which (ii) leads to obvious mechanical arbitrage opportunities; and (iii) competition has not affected the size or frequency of the arbitrage opportunities, it has only raised the bar for how fast one has to be to capture them. Second, we introduce a simple theory model which is motivated by and helps explain the empirical facts. The key insight is that obvious mechanical arbitrage opportunities, like those observed in the data, are built into the market design—continuous-time serial-processing implies that even symmetrically observed public information creates arbitrage rents. These rents harm liquidity provision and induce a never-ending socially wasteful arms race for speed. Last, we show that frequent batch auctions directly address the flaws of the continuous limit order book. Discrete time reduces the value of tiny speed advantages, and the auction transforms competition on speed into competition on price. Consequently, frequent batch auctions eliminate the mechanical arbitrage rents, enhance liquidity for investors, and stop the high-frequency trading arms race. JEL Codes: D47, D44, D82, G10, G14, G20.},
	number = {4},
	urldate = {2016-12-12},
	journal = {The Quarterly Journal of Economics},
	author = {Budish, Eric and Cramton, Peter and Shim, John},
	year = {2015},
	pages = {1547--1621},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/GE2ZFFCC/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.html:text/html}
}

@book{moore_nature_2011,
	address = {Oxford England ; New York},
	title = {The {Nature} of {Computation}},
	isbn = {978-0-19-923321-2},
	abstract = {Computational complexity is one of the most beautiful fields of modern mathematics, and it is increasingly relevant to other sciences ranging from physics to biology. But this beauty is often buried underneath layers of unnecessary formalism, and exciting recent results like interactive proofs, phase transitions, and quantum computing are usually considered too advanced for the typical student. This book bridges these gaps by explaining the deep ideas of theoretical computer science in a clear and enjoyable fashion, making them accessible to non-computer scientists and to computer scientists who finally want to appreciate their field from a new point of view. The authors start with a lucid and playful explanation of the P vs. NP problem, explaining why it is so fundamental, and so hard to resolve. They then lead the reader through the complexity of mazes and games; optimization in theory and practice; randomized algorithms, interactive proofs, and pseudorandomness; Markov chains and phase transitions; and the outer reaches of quantum computing. At every turn, they use a minimum of formalism, providing explanations that are both deep and accessible. The book is intended for graduate and undergraduate students, scientists from other areas who have long wanted to understand this subject, and experts who want to fall in love with this field all over again.},
	language = {English},
	publisher = {OUP Oxford},
	author = {Moore, Cristopher and Mertens, Stephan},
	month = jun,
	year = {2011}
}

@book{bowles_understanding_2005,
	address = {New York},
	edition = {3 edition},
	title = {Understanding {Capitalism}: {Competition}, {Command}, and {Change}},
	isbn = {978-0-19-513865-8},
	shorttitle = {Understanding {Capitalism}},
	abstract = {Understanding Capitalism: Competition, Command, and Change, Third Edition, is an introduction to economics that explains how capitalism works, why it sometimes does not work as well as we would like it to, and how over time it not only changes but also revolutionizes the world around us. The "three-dimensional approach" of the text focuses on competition in markets; command in firms, governments, and international relations; and change as a permanent feature of a capitalist economy driven by technical innovation and conflict over the distribution of income.The book covers the standard topics of supply and demand, market competition, imperfect competition, aggregate demand, inflation, and unemployment. It emphasizes the extraordinary dynamism and material productivity of the capitalist economy; the psychological foundations of human behavior; the logic and limitations of Adam Smith's invisible hand; technical change and the new information-based economy; global economic integration and its impact on national economies; the impact of economic activity on the environment; and inequality both within and among nations. In addition, it provides a critical evaluation of the tenets of neoclassical economics, a clear introduction to contract theory, and material drawn from new research in behavioral, institutional, and information economics.Understanding Capitalism, Third Edition, is ideal for undergraduate courses in economics and political economy. An Instructor's Manual is available to adopters.FEATURES OF THE THIRD EDITION·Offers a new chapter on the behavioral foundations of economics, showing that the selfishness of the "economic man" leaves out the important role of other social motives and how individual tastes and values evolve in response to experiences·Includes a new chapter that examines how economic success (and poverty) are passed on from parents to children and also looks at the increasing inequality of income and wealth along lines of race and gender·Presents a completely revised and expanded treatment of the revolutionary changes that have been associated with capitalism over the past three centuries·Provides boxed treatments of issues that can serve as the basis of classroom discussions·Defines important terms in the margins throughout the text·Contains a section entitled "Sources of Economic Information" that helps readers locate relevant outside data, both in print and online},
	language = {English},
	publisher = {Oxford University Press},
	author = {Bowles, Samuel and Edwards, Richard and Roosevelt, Frank},
	month = mar,
	year = {2005}
}

@incollection{nilsson_functional_2003,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Functional {Hybrid} {Modeling}},
	copyright = {©2003 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-00389-2 978-3-540-36388-0},
	url = {http://link.springer.com/chapter/10.1007/3-540-36388-2_25},
	abstract = {The modeling and simulation of physical systems is of key importance in many areas of science and engineering, and thus can bene- fit from high-quality software tools. In previous research we have demonstrated how functional programming can form the basis of an expressive language for causal hybrid modeling and simulation. There is a growing realization, however, that a move toward non-causal modeling is necessary for coping with the ever increasing size and complexity of modeling problems. Our goal is to combine the strengths of functional programming and non-causal modeling to create a powerful, strongly typed fully declarative modeling language that provides modeling and simulation capabilities beyond the current state of the art. Although our work is still in its very early stages, we believe that this paper clearly articulates the need for improved modeling languages and shows how functional programming techniques can play a pivotal role in meeting this need.},
	language = {en},
	number = {2562},
	urldate = {2016-10-31},
	booktitle = {Practical {Aspects} of {Declarative} {Languages}},
	publisher = {Springer Berlin Heidelberg},
	author = {Nilsson, Henrik and Peterson, John and Hudak, Paul},
	editor = {Dahl, Veronica and Wadler, Philip},
	month = jan,
	year = {2003},
	keywords = {Compilers, Interpreters, Logics and Meanings of Programs, Programming Languages, Programming Techniques, Software Engineering},
	pages = {376--390},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/IZM67KI5/10.html:text/html}
}

@inproceedings{hughes_programming_2005,
	address = {Berlin, Heidelberg},
	series = {{AFP}'04},
	title = {Programming with {Arrows}},
	isbn = {978-3-540-28540-3},
	url = {http://dx.doi.org/10.1007/11546382_2},
	doi = {10.1007/11546382_2},
	abstract = {Consider this simple Haskell definition, of a function which counts the number of occurrences of a given word w in a string: count w = length . filter (==w) . words This is an example of “point-free” programming style, where we build a function by composing others, and make heavy use of higher-order functions such as filter. Point-free programming is rightly popular: used appropriately, it makes for concise and readable definitions, which are well suited to equational reasoning in the style of Bird and Meertens [2]. It’s also a natural way to assemble programs from components, and closely related to connecting programs via pipes in the UNIX shell.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 5th {International} {Conference} on {Advanced} {Functional} {Programming}},
	publisher = {Springer-Verlag},
	author = {Hughes, John},
	year = {2005},
	pages = {73--129}
}

@article{backus_can_1978,
	title = {Can {Programming} {Be} {Liberated} from the {Von} {Neumann} {Style}?: {A} {Functional} {Style} and {Its} {Algebra} of {Programs}},
	volume = {21},
	issn = {0001-0782},
	shorttitle = {Can {Programming} {Be} {Liberated} from the {Von} {Neumann} {Style}?},
	url = {http://doi.acm.org/10.1145/359576.359579},
	doi = {10.1145/359576.359579},
	abstract = {Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs. An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages. Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs. A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation.},
	number = {8},
	urldate = {2016-12-09},
	journal = {Commun. ACM},
	author = {Backus, John},
	month = aug,
	year = {1978},
	keywords = {algebra of programs, applicative computing systems, applicative state transition systems, combining forms, functional forms, functional programming, metacomposition, models of computing systems, program correctness, Programming Languages, program termination, program transformation, von Neumann computers, von Neumann languages},
	pages = {613--641},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/DGWI8UF3/Backus - 1978 - Can Programming Be Liberated from the Von Neumann .pdf:application/pdf}
}

@book{hutton_programming_2007,
	address = {Cambridge, UK ; New York},
	title = {Programming in {Haskell}},
	isbn = {978-0-521-69269-4},
	abstract = {Haskell is one of the leading languages for teaching functional programming, enabling students to write simpler and cleaner code, and to learn how to structure and reason about programs. This introduction is ideal for beginners: it requires no previous programming experience and all concepts are explained from first principles via carefully chosen examples. Each chapter includes exercises that range from the straightforward to extended projects, plus suggestions for further reading on more advanced topics. The author is a leading Haskell researcher and instructor, well-known for his teaching skills. The presentation is clear and simple, and benefits from having been refined and class-tested over several years. The result is a text that can be used with courses, or for self-learning. Features include freely accessible Powerpoint slides for each chapter, solutions to exercises and examination questions (with solutions) available to instructors, and a downloadable code that's fully compliant with the latest Haskell release.},
	language = {English},
	publisher = {Cambridge University Press},
	author = {Hutton, Graham},
	month = jan,
	year = {2007}
}

@inproceedings{nilsson_declarative_2014,
	address = {New York, NY, USA},
	series = {{PPDP} '14},
	title = {Declarative {Game} {Programming}: {Distilled} {Tutorial}},
	isbn = {978-1-4503-2947-7},
	shorttitle = {Declarative {Game} {Programming}},
	url = {http://doi.acm.org/10.1145/2643135.2643160},
	doi = {10.1145/2643135.2643160},
	abstract = {Video games are usually not programmed very declaratively. There are a number of reasons for this, from low-level efficiency concerns, via the nature of commonly employed programming languages, libraries, and frameworks, to the conceptual nature of such games, with state and effects being omnipresent. However, by structuring games in terms of time-varying values and transformations on such values, it is possible to design and implement video games in a more declarative way. This tutorial shows how this can be achieved through Functional Reactive Programming (FRP) by implementing the high-level parts of a 2D game akin to the classical game Breakout. The tutorial uses the Haskell-embedded FRP implementation Yampa and bindings to SDL (Simple DirectMedia Layer) to obtain game play and visual standards typical of the 2D genre; for example, as seen in many currently popular games for smartphones and tablets.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 16th {International} {Symposium} on {Principles} and {Practice} of {Declarative} {Programming}},
	publisher = {ACM},
	author = {Nilsson, Henrik and Perez, Ivan},
	year = {2014},
	keywords = {Functional Reactive Programming, Hybrid Modelling, Video Game Programming},
	pages = {159--160},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/RF7KVI8X/Nilsson and Perez - 2014 - Declarative Game Programming Distilled Tutorial.pdf:application/pdf}
}

@techreport{tesfatsion_agent-based_2006,
	type = {Handbook of {Computational} {Economics}},
	title = {Agent-{Based} {Computational} {Economics}: {A} {Constructive} {Approach} to {Economic} {Theory}},
	shorttitle = {Agent-{Based} {Computational} {Economics}},
	url = {http://econpapers.repec.org/bookchap/eeehecchp/2-16.htm},
	abstract = {Economies are complicated systems encompassing micro behaviors, interaction patterns, and global regularities. Whether partial or general in scope, studies of economic systems must consider how to handle difficult real-world aspects such as asymmetric information, imperfect competition, strategic interaction, collective learning, and the possibility of multiple equilibria. Recent advances in analytical and computational tools are permitting new approaches to the quantitative study of these aspects. One such approach is Agent-based Computational Economics (ACE), the computational study of economic processes modeled as dynamic systems of interacting agents. This chapter explores the potential advantages and disadvantages of ACE for the study of economic systems. General points are concretely illustrated using an ACE model of a two-sector decentralized market economy. Six issues are highlighted: Constructive understanding of production, pricing, and trade processes; the essential primacy of survival; strategic rivalry and market power; behavioral uncertainty and learning; the role of conventions and organizations; and the complex interactions among structural attributes, institutional arrangements, and behavioral dispositions.},
	urldate = {2016-10-31},
	institution = {Elsevier},
	author = {Tesfatsion, Leigh},
	year = {2006},
	pages = {831--880},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/ETA4NG3S/2-16.html:text/html}
}

@inproceedings{nilsson_functional_2002,
	address = {New York, NY, USA},
	series = {Haskell '02},
	title = {Functional {Reactive} {Programming}, {Continued}},
	isbn = {978-1-58113-605-0},
	url = {http://doi.acm.org/10.1145/581690.581695},
	doi = {10.1145/581690.581695},
	abstract = {Functional Reactive Programming (FRP) extends a host programming language with a notion of time flow. Arrowized FRP (AFRP) is a version of FRP embedded in Haskell based on the arrow combinators. AFRP is a powerful synchronous dataflow programming language with hybrid modeling capabilities, combining advanced synchronous dataflow features with the higher-order lazy functional abstractions of Haskell. In this paper, we describe the AFRP programming style and our Haskell-based implementation. Of particular interest are the AFRP combinators that support dynamic collections and continuation-based switching. We show how these combinators can be used to express systems with an evolving structure that are difficult to model in more traditional dataflow languages.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 2002 {ACM} {SIGPLAN} {Workshop} on {Haskell}},
	publisher = {ACM},
	author = {Nilsson, Henrik and Courtney, Antony and Peterson, John},
	year = {2002},
	keywords = {domain-specific languages, FRP, functional programming, Haskell, hybrid modeling, synchronous dataflow languages},
	pages = {51--64},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/PN5DAWIV/Nilsson et al. - 2002 - Functional Reactive Programming, Continued.pdf:application/pdf}
}

@book{pierce_basic_1991,
	address = {Cambridge, MA, USA},
	title = {Basic {Category} {Theory} for {Computer} {Scientists}},
	isbn = {978-0-262-66071-6},
	publisher = {MIT Press},
	author = {Pierce, Benjamin C.},
	year = {1991}
}

@article{ballot_agent-based_2015,
	title = {Agent-based modeling and economic theory: where do we stand?},
	volume = {10},
	issn = {1860-711X},
	shorttitle = {Agent-based modeling and economic theory},
	url = {http://econpapers.repec.org/article/sprjeicoo/v_3a10_3ay_3a2015_3ai_3a2_3ap_3a199-220.htm},
	abstract = {This paper provides a survey of the development and contributions of agent-based modeling to economic analysis, without any claim to be exhaustive. Our perspective is particularly shaped by the papers presented at the 17th Wehia conference, a selection of which are published in this special issue. The paper shows how agent-based models have developed, and how they have improved our understanding not only of macroeconomic disequilibria but also of the possibilities of the emergence of equilibrium in such realistic systems. It also reviews the progress made in our understanding of real markets, and lists some of the improvements needed to establish these models as alternative tools to the present orthodox models. Copyright Springer-Verlag Berlin Heidelberg 2015},
	number = {2},
	urldate = {2016-10-31},
	journal = {Journal of Economic Interaction and Coordination},
	author = {Ballot, Gérard and Mandel, Antoine and Vignes, Annick},
	year = {2015},
	keywords = {Agent-based modeling, B5, C8, Economic thought, Heterogeneity},
	pages = {199--220},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/B7ZP8XKC/v_3a10_3ay_3a2015_3ai_3a2_3ap_3a199-220.html:text/html}
}

@inproceedings{perez_functional_2016,
	address = {New York, NY, USA},
	series = {Haskell 2016},
	title = {Functional {Reactive} {Programming}, {Refactored}},
	isbn = {978-1-4503-4434-0},
	url = {http://doi.acm.org/10.1145/2976002.2976010},
	doi = {10.1145/2976002.2976010},
	abstract = {Functional Reactive Programming (FRP) has come to mean many things. Yet, scratch the surface of the multitude of realisations, and there is great commonality between them. This paper investigates this commonality, turning it into a mathematically coherent and practical FRP realisation that allows us to express the functionality of many existing FRP systems and beyond by providing a minimal FRP core parameterised on a monad. We give proofs for our theoretical claims and we have verified the practical side by benchmarking a set of existing, non-trivial Yampa applications running on top of our new system with very good results.},
	urldate = {2016-12-19},
	booktitle = {Proceedings of the 9th {International} {Symposium} on {Haskell}},
	publisher = {ACM},
	author = {Perez, Ivan and Bärenz, Manuel and Nilsson, Henrik},
	year = {2016},
	keywords = {Functional Reactive Programming, Haskell, monadic streams, reactive program- ming, stream programming},
	pages = {33--44},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/IIQ3I92S/Perez et al. - 2016 - Functional Reactive Programming, Refactored.pdf:application/pdf}
}

@inproceedings{di_stefano_using_2005,
	address = {Washington, DC, USA},
	series = {{IAT} '05},
	title = {Using the {Erlang} {Language} for {Multi}-{Agent} {Systems} {Implementation}},
	isbn = {978-0-7695-2416-0},
	url = {http://dx.doi.org/10.1109/IAT.2005.141},
	doi = {10.1109/IAT.2005.141},
	abstract = {Even if Java is widely used for agent development, some agent platforms employ ad-hoc programming languages, so the question that arises is: Is there a language that fits the model of an autonomous software agent better than Java? This paper deals with such an issue by deriving an abstract model for agents and proposing some parameters to evaluate programming languages for agent development. As a result, the paper introduces Erlang, a functional language that presents some interesting characteristics for the engineering of agent-based applications. An Erlang-based platform, called eXAT and developed by the authors, is then presented. Finally, a comparison with a Java-based approach explains why, in the authorsý opinion, this language cannot be considered a good choice for the implementation of agent systems.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the {IEEE}/{WIC}/{ACM} {International} {Conference} on {Intelligent} {Agent} {Technology}},
	publisher = {IEEE Computer Society},
	author = {Di Stefano, Antonella and Santoro, Corrado},
	year = {2005},
	pages = {679--685}
}

@book{genesereth_logical_1987,
	address = {San Francisco, CA, USA},
	title = {Logical {Foundations} of {Artificial} {Intelligence}},
	isbn = {978-0-934613-31-6},
	publisher = {Morgan Kaufmann Publishers Inc.},
	author = {Genesereth, Michael R. and Nilsson, Nils J.},
	year = {1987}
}

@inproceedings{isaac_abm_2011,
	title = {The {ABM} template models: {A} reformulation with reference implementations},
	shorttitle = {The {ABM} template models},
	url = {http://citeseer.ist.psu.edu/viewdoc/citations;jsessionid=C8EB659E93CA34C448CE444C5E4C4038?doi=10.1.1.946.9304},
	abstract = {CiteSeerX - Document Details (Isaac Councill, Lee Giles, Pradeep Teregowda): This paper refines a well-known set of template models for agent-based modeling and offers new reference implementations. It also addresses issues of design, flexibility, and ease of use that are relevant},
	urldate = {2017-01-26},
	author = {Isaac, Alan G.},
	year = {2011},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/99WW5A5J/citations\;jsessionid=C8EB659E93CA34C448CE444C5E4C4038.html:text/html}
}

@techreport{jankovic_functional_2007,
	title = {Functional {Programming} and {Discrete} {Simulation}},
	author = {Jankovic, Peter and Such, Ondrej},
	year = {2007}
}

@techreport{grief_semantics_1975,
	address = {Cambridge, MA, USA},
	title = {{SEMANTICS} {OF} {COMMUNICATING} {PARALLEL} {PROCESSES}},
	abstract = {The thesis of this dissertation is that an understanding of the ordering constraints that are introduced among events of parallel process is essential to the understanding of synchronization and that therefore any language for specifying synchronization of parallel process should be based on a theory of such orderings. While it is possible to write specifications for systems of communicating parallel processes by reference to the time ordering of some global clock external to the system, such specifications cannot be as useful as ones which are in terms of orderings derivable within the system. Specifications should place constraints on intended behavior of the computer system itself rather than on the possible observations of the system”s behaviors from some global viewpoint which may in fact be totally unrealizable. The dissertation is a development of a specification language. It is based on a model of computation in which an individual process is represented by a totally ordered set of events. Synchronization properties of systems of independent processes are guarantees that in fact the set of events in the system can be ordered by a partial order which properly contains the union of the processes” total orders. This system ordering can be caused by the presence in a system of side-effect primitives or of synchronization primitives. Thus this model applies equally well both to busy waiting synchronization based on coordinated use of storage cells by independent processes and to non-busy waiting synchronization such as that induced by semaphores and structured synchronization primitives. In addition to applying to a range of types of synchronization, the specification language is also used to define a programming language. The meaning of a program is the specification of the behavior of the system into which that program is compiled. Specifications can be written for synchronization problems and for their implementations in terms of various primitives.},
	institution = {Massachusetts Institute of Technology},
	author = {Grief, I. and Greif, Irene},
	year = {1975}
}

@inproceedings{wadler_comprehending_1990,
	address = {New York, NY, USA},
	series = {{LFP} '90},
	title = {Comprehending {Monads}},
	isbn = {978-0-89791-368-3},
	url = {http://doi.acm.org/10.1145/91556.91592},
	doi = {10.1145/91556.91592},
	abstract = {Category theorists invented monads in the 1960's to concisely express certain aspects of universal algebra. Functional programmers invented list comprehensions in the 1970's to concisely express certain programs involving lists. This paper shows how list comprehensions may be generalised to an arbitrary monad, and how the resulting programming feature can concisely express in a pure functional language some programs that manipulate state, handle exceptions, parse text, or invoke continuations. A new solution to the old problem of destructive array update is also presented. No knowledge of category theory is assumed.},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the 1990 {ACM} {Conference} on {LISP} and {Functional} {Programming}},
	publisher = {ACM},
	author = {Wadler, Philip},
	year = {1990},
	pages = {61--78},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/D74BK2WP/Wadler - 1990 - Comprehending Monads.pdf:application/pdf}
}

@techreport{lehalle_market_2013,
	type = {World {Scientific} {Books}},
	title = {Market {Microstructure} in {Practice}},
	url = {http://econpapers.repec.org/bookchap/wsiwsbook/8967.htm},
	abstract = {Market Microstructure in Practice comments on the consequences of Reg NMS and MiFID on market microstructure. It covers changes in market design, electronic trading, and investor and trader behaviors. The emergence of high frequency trading and critical events like the ¡°Flash Crash¡± of 2010 are also analyzed in depth. Edited by Charles-Albert Lehalle and Sophie Laruelle, and with contributions from Romain Burgot, St¨¦phanie Pelin and Matthieu Lasnier, this book uses a quantitative viewpoint to help students, academics, regulators, policy makers, and practitioners understand how an attrition of liquidity and regulatory changes can impact the whole microstructure of financial markets. A mathematical Appendix details the quantitative tools and indicators used throughout the book, allowing the reader to go further on his own. Contents: Monitoring the Fragmentation at Any Scale: Fluctuations of Market Shares: A First Graph Smart Order Routing (SOR), A Structural Component of European Price Formation Process Still Looking for the Optimal Tick Size Can We See in the Dark? Understanding the Stakes and the Roots of Fragmentation: From Intraday Market Share to Volume Curves: Some Stationarity Issues Does More Liquidity Guarantee a Better Market Share? A Little Story About the European Bid-Ask Spread The Agenda of High Frequency Traders: How Do They Extend Their Universe? The Link Between Fragmentation and Systemic Risk Optimal Organisations for Optimal Trading: Organising a Trading Structure to Answer to a Fragmented Landscape Market Impact Measurements: Understanding the Price Formation Process from the Viewpoint of One Investor Optimal Trading Methods Readership: Students, academics, researchers, finance professionals, regulators and policy makers interested in public markets, exchange and securities.},
	urldate = {2016-10-03},
	institution = {World Scientific Publishing Co. Pte. Ltd.},
	author = {Lehalle, Charles-Albert and Laruelle, Sophie},
	year = {2013},
	keywords = {ESMA, Finance, Financial Markets, Market Microstructure, MiFID, Reg NMS, Regulation},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/F5CWRBW4/8967.html:text/html}
}

@inproceedings{sweeney_next_2006,
	address = {New York, NY, USA},
	series = {{POPL} '06},
	title = {The {Next} {Mainstream} {Programming} {Language}: {A} {Game} {Developer}'s {Perspective}},
	isbn = {978-1-59593-027-9},
	shorttitle = {The {Next} {Mainstream} {Programming} {Language}},
	url = {http://doi.acm.org/10.1145/1111037.1111061},
	doi = {10.1145/1111037.1111061},
	abstract = {Game developers have long been early adopters of new technologies. This is so because we are largely unburdened by legacy code: With each new hardware generation, we are free to rethink our software assumptions and develop new products using new tools and even new programming languages. As a result, games are fertile ground for applying academic advances in these areas.And never has our industry been in need of such advances as it is now! The scale and scope of game development has increased more than ten-fold over the past ten years, yet the underlying limitations of the mainstream C/C++/Java/C\# language family remain largely unaddressed.The talk begins with a high-level presentation of the game developer's world: the kinds of algorithms we employ on modern CPUs and GPUs, the difficulties of componentization and concurrency, and the challenges of writing very complex software with real-time performance requirements.The talk then outlines the ways that future programming languages could help us write better code, providing examples derived from experience writing games and software frameworks that support games. The major areas covered are abstraction facilities – how we can use them to develop more extensible frameworks and components; practical opportunities for employing stronger typing to reduce run-time failures; and the need for pervasive concurrency support, both implicit and explicit, to effectively exploit the several forms of parallelism present in games and graphics.},
	urldate = {2016-11-11},
	booktitle = {Conference {Record} of the 33rd {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Sweeney, Tim},
	year = {2006},
	pages = {269--269},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/P7VUC96F/Sweeney - 2006 - The Next Mainstream Programming Language A Game D.pdf:application/pdf}
}

@article{hughes_generalising_2000,
	title = {Generalising {Monads} to {Arrows}},
	volume = {37},
	issn = {0167-6423},
	url = {http://dx.doi.org/10.1016/S0167-6423(99)00023-4},
	doi = {10.1016/S0167-6423(99)00023-4},
	number = {1-3},
	urldate = {2016-11-16},
	journal = {Sci. Comput. Program.},
	author = {Hughes, John},
	month = may,
	year = {2000},
	pages = {67--111}
}

@techreport{clinger_foundations_1981,
	address = {Cambridge, MA, USA},
	title = {Foundations of {Actor} {Semantics}},
	abstract = {The actor message-passing model of concurrent computation has inspired new ideas in the areas of knowledge-based systems, programming languages and their semantics, and computer systems architecture. This thesis extends and unifies the work of Carl Hewitt, Irene Greif, Henry Baker, and Giuseppe Attardi, who developed the mathematical content of the model. The ordering laws postulated by Hewitt and Baker can be proved using a notion of global time. The most general ordering laws are equivalent to an axiom of realizability in global time. Since nondeterministic concurrency is more fundamental than deterministic sequential computation, there may be no need to take fixed points in the underlying domain of a power domain. Power domains built from incomplete domains can solve the problem of providing a fixed point semantics for a class of nondeterministic programming languages in which a fair merge can be written. The locality laws postulated by Hewitt and Baker may be proved for the semantics of an actor-based language. Altering the semantics slightly can falsify the locality laws. The locality laws thus constrain what counts as an actor semantics.},
	institution = {Massachusetts Institute of Technology},
	author = {Clinger, William D},
	year = {1981}
}

@book{kirman_complex_2010,
	address = {London ; New York, NY},
	title = {Complex {Economics}: {Individual} and {Collective} {Rationality}},
	isbn = {978-0-415-56855-5},
	shorttitle = {Complex {Economics}},
	abstract = {The economic crisis is also a crisis for economic theory. Most analyses of the evolution of the crisis invoke three themes, contagion, networks and trust, yet none of these play a major role in standard macroeconomic models. What is needed is a theory in which these aspects are central. The direct interaction between individuals, firms and banks does not simply produce imperfections in the functioning of the economy but is the very basis of the functioning of a modern economy. This book suggests a way of analysing the economy which takes this point of view. The economy should be considered as a complex adaptive system in which the agents constantly react to, influence and are influenced by, the other individuals in the economy. In such systems which are familiar from statistical physics and biology for example, the behaviour of the aggregate cannot be deduced from the behaviour of the average, or "representative" individual. Just as the organised activity of an ants’ nest cannot be understood from the behaviour of a "representative ant" so macroeconomic phenomena should not be assimilated to those associated with the "representative agent". This book provides examples where this can clearly be seen. The examples range from Schelling’s model of segregation, to contributions to public goods, the evolution of buyer seller relations in fish markets, to financial models based on the foraging behaviour of ants. The message of the book is that coordination rather than efficiency is the central problem in economics. How do the myriads of individual choices and decisions come to be coordinated? How does the economy or a market, "self organise" and how does this sometimes result in major upheavals, or to use the phrase from physics, "phase transitions"? The sort of system described in this book is not in equilibrium in the standard sense, it is constantly changing and moving from state to state and its very structure is always being modified. The economy is not a ship sailing on a well-defined trajectory which occasionally gets knocked off course. It is more like the slime described in the book "emergence", constantly reorganising itself so as to slide collectively in directions which are neither understood nor necessarily desired by its components.},
	language = {English},
	publisher = {Routledge},
	author = {Kirman, Alan},
	month = jul,
	year = {2010}
}

@article{botta_functional_2011,
	title = {A functional framework for agent-based models of exchange},
	volume = {218},
	issn = {0096-3003},
	url = {http://www.sciencedirect.com/science/article/pii/S0096300311010915},
	doi = {10.1016/j.amc.2011.08.051},
	abstract = {We propose a functional framework for studying agent-based dynamical models of exchange. The framework consists of a notation and of a number of elementary definitions. We argue that – in comparison to narrative descriptions – the framework has a number of advantages: (1) it allows one to express precisely the relationships between the classical notion of general equilibrium and agent-based models of exchange; (2) it supports computational descriptions of models of exchange which can be unambiguously implemented; (3) it assists the numerical investigation of such models by providing a specific set of elementary notions and computational primitives. These can be used to deduce model properties and to setup “crucial” numerical experiments for validating model implementations. In a companion paper, we apply the framework to specify and study a model of exchange in which multiple equilibrium prices coexist and prices evolve according to a simple trading scheme and to a generic genetic rule.},
	number = {8},
	urldate = {2016-09-30},
	journal = {Applied Mathematics and Computation},
	author = {Botta, N. and Mandel, A. and Ionescu, C. and Hofmann, M. and Lincke, D. and Schupp, S. and Jaeger, C.},
	month = dec,
	year = {2011},
	keywords = {Agent-based methods, Barter economies, Functional specifications, General equilibrium, Price dynamics},
	pages = {4025--4040},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/DAB4AVMK/Botta et al. - 2011 - A functional framework for agent-based models of e.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/G5IGQAKV/S0096300311010915.html:text/html}
}

@book{aldridge_high-frequency_2009,
	title = {High-{Frequency} {Trading}: {A} {Practical} {Guide} to {Algorithmic} {Strategies} and {Trading} {Systems}},
	isbn = {978-0-470-57977-0},
	shorttitle = {High-{Frequency} {Trading}},
	abstract = {A hands-on guide to the fast and ever-changing world of high-frequency, algorithmic trading Financial markets are undergoing rapid innovation due to the continuing proliferation of computer power and algorithms. These developments have created a new investment discipline called high-frequency trading. This book covers all aspects of high-frequency trading, from the business case and formulation of ideas through the development of trading systems to application of capital and subsequent performance evaluation. It also includes numerous quantitative trading strategies, with market microstructure, event arbitrage, and deviations arbitrage discussed in great detail. Contains the tools and techniques needed for building a high-frequency trading system Details the post-trade analysis process, including key performance benchmarks and trade quality evaluation Written by well-known industry professional Irene Aldridge Interest in high-frequency trading has exploded over the past year. This book has what you need to gain a better understanding of how it works and what it takes to apply this approach to your trading endeavors.},
	language = {en},
	publisher = {John Wiley and Sons},
	author = {Aldridge, Irene},
	month = dec,
	year = {2009},
	keywords = {Business \& Economics / General, Business \& Economics / Investments \& Securities / General}
}

@inproceedings{courtney_yampa_2003,
	address = {New York, NY, USA},
	series = {Haskell '03},
	title = {The {Yampa} {Arcade}},
	isbn = {978-1-58113-758-3},
	url = {http://doi.acm.org/10.1145/871895.871897},
	doi = {10.1145/871895.871897},
	abstract = {Simulated worlds are a common (and highly lucrative) application domain that stretches from detailed simulation of physical systems to elaborate video game fantasies. We believe that Functional Reactive Programming (FRP) provides just the right level of functionality to develop simulated worlds in a concise, clear and modular way. We demonstrate the use of FRP in this domain by presenting an implementation of the classic "Space Invaders" game in Yampa, our most recent Haskell-embedded incarnation of FRP.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 2003 {ACM} {SIGPLAN} {Workshop} on {Haskell}},
	publisher = {ACM},
	author = {Courtney, Antony and Nilsson, Henrik and Peterson, John},
	year = {2003},
	keywords = {FRP, functional programming, Haskell, hybrid modeling, modeling languages, synchronous dataflow languages},
	pages = {7--18},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/BSF62EH9/Courtney et al. - 2003 - The Yampa Arcade.pdf:application/pdf}
}

@article{bauer_adaptation-based_2011,
	title = {Adaptation-{Based} {Programming} in {Haskell}},
	volume = {66},
	issn = {2075-2180},
	url = {http://arxiv.org/abs/1109.0774},
	doi = {10.4204/EPTCS.66.1},
	abstract = {We present an embedded DSL to support adaptation-based programming (ABP) in Haskell. ABP is an abstract model for defining adaptive values, called adaptives, which adapt in response to some associated feedback. We show how our design choices in Haskell motivate higher-level combinators and constructs and help us derive more complicated compositional adaptives. We also show an important specialization of ABP is in support of reinforcement learning constructs, which optimize adaptive values based on a programmer-specified objective function. This permits ABP users to easily define adaptive values that express uncertainty anywhere in their programs. Over repeated executions, these adaptive values adjust to more efficient ones and enable the user's programs to self optimize. The design of our DSL depends significantly on the use of type classes. We will illustrate, along with presenting our DSL, how the use of type classes can support the gradual evolution of DSLs.},
	urldate = {2016-10-31},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Bauer, Tim and Erwig, Martin and Fern, Alan and Pinto, Jervis},
	month = sep,
	year = {2011},
	keywords = {Computer Science - Programming Languages, D.3.3},
	pages = {1--23},
	file = {arXiv\:1109.0774 PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/GFRKVUKD/Bauer et al. - 2011 - Adaptation-Based Programming in Haskell.pdf:application/pdf;arXiv.org Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/RNHIE699/1109.html:text/html}
}

@phdthesis{meisinger_game-engine-architektur_2010,
	address = {Austria},
	type = {Master},
	title = {Game-{Engine}-{Architektur} mit funktional-reaktiver {Programmierung} in {Haskell}/{Yampa}},
	language = {German},
	school = {Fachhochschule Oberösterreich - Fakultät für Informatik, Kommunikation und Medien (Campus Hagenberg)},
	author = {Meisinger, Gerold},
	year = {2010}
}

@inproceedings{schneider_towards_2012,
	address = {New York, NY, USA},
	series = {{IHI} '12},
	title = {Towards {Frabjous}: {A} {Two}-level {System} for {Functional} {Reactive} {Agent}-based {Epidemic} {Simulation}},
	isbn = {978-1-4503-0781-9},
	shorttitle = {Towards {Frabjous}},
	url = {http://doi.acm.org/10.1145/2110363.2110458},
	doi = {10.1145/2110363.2110458},
	abstract = {Agent-based infection-transmission models, which simulate an infection moving through a population, are being employed more frequently by health policy-makers. However, these models present several obstacles to widespread adoption. They are complex entities and impose a high development and maintenance cost. Current tools can be opaque, requiring multidisciplinary collaboration between a modeler and an expert programmer, and another round of translation when communicating with domain experts. In this paper, we describe the use of functional reactive programming (FRP), a programming paradigm created by imbuing a functional programming language with an intrinsic sense of time, to represent agent-based models in a concise and transparent way. We document the conversion of several agent-based models developed in the popular hybrid modeling tool AnyLogic to a representation in FRP. We also introduce Frabjous, a programming framework and domain-specific language for computational modeling. Frabjous generates human-readable and modifiable FRP code from a model specification, allowing modelers to have two transparent representations in which to program: a high-level model specification, and a full functional programming language with an agent-based modeling framework.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 2Nd {ACM} {SIGHIT} {International} {Health} {Informatics} {Symposium}},
	publisher = {ACM},
	author = {Schneider, Oliver and Dutchyn, Christopher and Osgood, Nathaniel},
	year = {2012},
	keywords = {agent- based modeling, agent-based simulation, domain-specific language, dynamic model, functional programming, functional reactive, simulation},
	pages = {785--790},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/JVIFRA7J/Schneider et al. - 2012 - Towards Frabjous A Two-level System for Functiona.pdf:application/pdf}
}

@techreport{sulzmann_specifying_2007,
	title = {Specifying and {Controlling} {Agents} in {Haskell}},
	author = {Sulzmann, Martin and Lam, Edmund},
	year = {2007}
}

@book{noauthor_emergent_2008,
	address = {Milano},
	title = {Emergent {Macroeconomics}},
	isbn = {978-88-470-0724-6 978-88-470-0725-3},
	url = {http://link.springer.com/10.1007/978-88-470-0725-3},
	language = {en},
	urldate = {2016-09-30},
	publisher = {Springer Milan},
	year = {2008}
}

@article{hewitt_actor_2010,
	title = {Actor {Model} of {Computation}: {Scalable} {Robust} {Information} {Systems}},
	shorttitle = {Actor {Model} of {Computation}},
	url = {http://arxiv.org/abs/1008.1459},
	abstract = {The Actor model is a mathematical theory that treats "Actors" as the universal primitives of concurrent digital computation. The model has been used both as a framework for a theoretical understanding of concurrency, and as the theoretical basis for several practical implementations of concurrent systems. Unlike previous models of computation, the Actor model was inspired by physical laws. It was also influenced by the programming languages Lisp, Simula 67 and Smalltalk-72, as well as ideas for Petri Nets, capability-based systems and packet switching. The advent of massive concurrency through client-cloud computing and many-core computer architectures has galvanized interest in the Actor model. Actor technology will see significant application for integrating all kinds of digital information for individuals, groups, and organizations so their information usefully links together. Information integration needs to make use of the following information system principles: * Persistence. Information is collected and indexed. * Concurrency: Work proceeds interactively and concurrently, overlapping in time. * Quasi-commutativity: Information can be used regardless of whether it initiates new work or become relevant to ongoing work. * Sponsorship: Sponsors provide resources for computation, i.e., processing, storage, and communications. * Pluralism: Information is heterogeneous, overlapping and often inconsistent. * Provenance: The provenance of information is carefully tracked and recorded The Actor Model is intended to provide a foundation for inconsistency robust information integration},
	urldate = {2016-10-26},
	journal = {arXiv:1008.1459 [cs]},
	author = {Hewitt, Carl},
	month = aug,
	year = {2010},
	keywords = {and Cluster Computing, Computer Science - Distributed, Computer Science - Programming Languages, Parallel},
	file = {arXiv\:1008.1459 PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/9X3FI6JI/Hewitt - 2010 - Actor Model of Computation Scalable Robust Inform.pdf:application/pdf;arXiv.org Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/7I6F6KIZ/1008.html:text/html}
}

@book{noauthor_agent_nodate,
	title = {Agent {Based} {Modeling} and {Simulation} with {ActoMoS} - {Semantic} {Scholar}},
	url = {https://www.semanticscholar.org/paper/Agent-Based-Modeling-and-Simulation-with-ActoMoS-Poggi/f1538ab426159d98aeb451bded60625be1f16f4c},
	abstract = {— ActoMoS is an actor-based software library for the development of agent-based models and for their simulation. This library offers software components and tools for modeling and simulating systems in different application domains. In particular, it allows the definition of agent model by reusing or extending a set of predefined agent models and supports efficient and scalable agent-based simulations involving a large number of agents. This paper, after an introduction of the actor model and implementation used by the software library, underlines the main features of the software library and presents its experimentation in some well-known domains.},
	urldate = {2016-10-31},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/RANEUT3K/f1538ab426159d98aeb451bded60625be1f16f4c.html:text/html}
}

@book{agha_actors:_1986,
	address = {Cambridge, MA, USA},
	title = {Actors: {A} {Model} of {Concurrent} {Computation} in {Distributed} {Systems}},
	isbn = {978-0-262-01092-4},
	shorttitle = {Actors},
	publisher = {MIT Press},
	author = {Agha, Gul},
	year = {1986}
}

@techreport{botta_time_2010,
	type = {Documents de travail du {Centre} d'{Economie} de la {Sorbonne}},
	title = {Time in discrete agent-based models of socio-economic systems},
	url = {https://ideas.repec.org/p/mse/cesdoc/10076.html},
	abstract = {We formulate the problem of computing time in discrete dynamical agent-based models in the context of socio-economic modeling. For such formulation, we outline a simple solution. This requires minimal extensions of the original untimed model. The proposed solution relies on the notion of agent-specific schedules of action and on two modeling assumptions. These are fulfilled by most models of pratical interest. For models for which stronger assumptions can be made, we discuss alternative formulations},
	number = {10076},
	urldate = {2017-01-18},
	institution = {Université Panthéon-Sorbonne (Paris 1), Centre d'Economie de la Sorbonne},
	author = {Botta, Nicola and Mandel, Antoine and Ionescu, Cezar},
	year = {2010},
	keywords = {Agent-based models, time},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/7HI553S6/10076.html:text/html}
}

@book{sher_agent-based_2013,
	title = {Agent-{Based} {Modeling} {Using} {Erlang} {Eliminating} {The} {Conceptual} {Gap} {Between} {The} {Programming} {Language} \& {ABM}},
	abstract = {Abstract: There is a conceptual gap between real world systems and their models created using differential equations. Numerous systems, such as traffic flow, financial markets, neural networks... are all naturally composed of agents interacting with each other and the environment, from which the behavior of such systems emerges. The more complex the interactions and agents, the more difficult, and even impossible, it becomes to model them using averages and standard mathematical approaches like sets of differential equations. A more direct approach to modeling such complex systems is by modeling the agents themselves, and letting them interact with each other and the environment, with the system's behavior then emerging naturally. This approach is called Agent Based Modeling (ABM), and the conceptual gap between real world phenomena produced by interacting agents and their respective ABMs is lower than the models created using sets of differential equations. The removal of this conceptual gap through the use of ABMs allows us to tackle larger and more complex problems and explore emergent behavior more easily. Unfortunately, ABMs and the programming languages used to create them do not have a 1-to-1 mapping, and thus, producing a conceptual gap between the two. This paper attempts to present and make a claim that we can eliminate this conceptual gap by using an actor model based concurrency oriented programming language called Erlang. In this paper we discuss how Erlang fits into ABM and Multi-Agent Simulation systems, and what features it possesses that make it such a perfect},
	author = {Sher, Gene I.},
	year = {2013},
	file = {Citeseer - Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/NIJAES5Q/Sher - Agent-Based Modeling Using Erlang Eliminating The .pdf:application/pdf;Citeseer - Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/GHIJM8EA/summary.html:text/html}
}

@book{sorokin_aivika_2015,
	title = {Aivika 3: {Creating} a {Simulation} {Library} based on {Functional} {Programming}},
	author = {Sorokin, David},
	year = {2015}
}

@book{darley_nasdaq_2007,
	address = {River Edge, NJ, USA},
	title = {Nasdaq {Market} {Simulation}: {Insights} on a {Major} {Market} from the {Science} of {Complex} {Adaptive} {Systems}},
	isbn = {978-981-270-001-8},
	shorttitle = {Nasdaq {Market} {Simulation}},
	abstract = {This pioneering book describes the applications of agent-based modeling to financial markets. It presents a new paradigm for finance, where markets are treated as complex systems whose behavior emerges as a result of interactions of market participants, market institutions, and market rules. This includes both a presentation of the conceptual model and its software implementation. It also summarises the result of the profound research on the successful practical application of this new approach to answer questions regarding the Nasdaq Stock Market s decimalization that was implemented in 2001. The book presents conceptual foundations for modeling markets as complex systems. It describes the agent-based model of the Nasdaq stock market, including strategies used by market-makers and investors, market participants interactions, and impacts of rules and regulations. It includes analyses of simulation behavior, comparison with the behaviors observed in the real-world markets (existence of fat tails, spread clustering, etc.), and predictions about possible outcomes of decimalization. A framework for calibrating the market behavior and individual market-makers strategies to historical data is also presented.},
	publisher = {World Scientific Publishing Co., Inc.},
	author = {Darley, Vincent and Outkin, Alexander V.},
	year = {2007}
}

@inproceedings{kaminski_verification_2013,
	series = {Lecture {Notes} in {Business} {Information} {Processing}},
	title = {Verification of {Models} in {Agent} {Based} {Computational} {Economics} — {Lessons} from {Software} {Engineering}},
	copyright = {©2013 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-40822-9 978-3-642-40823-6},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-40823-6_15},
	abstract = {Agent based models are highly complex and usually are being implemented using programming languages. This situation calls for adequate methods allowing for their verification that are not used in standard economic research. In order to organize this process we propose to logically decompose agent based model into three layers: conceptual model, computerized model and metamodel. The main possible problems identified using this decomposition are: (a) incomplete specification of conceptual model, (b) unexpected behavior of computerized model and (c) problems with reproduction simulation results. In order to address these issues based on literature review we draw recommendations concerning model documentation, testing and simulation reproduction that are crucial to improve their quality and precision of communication.},
	language = {en},
	urldate = {2016-12-12},
	booktitle = {Perspectives in {Business} {Informatics} {Research}},
	publisher = {Springer Berlin Heidelberg},
	author = {Kamiński, Bogumił and Szufel, Przemysław},
	editor = {Kobyliński, Andrzej and Sobczak, Andrzej},
	month = sep,
	year = {2013},
	keywords = {agent based modeling, Computational economics, Computer Appl. in Administrative Data Processing, Information Storage and Retrieval, Information Systems Applications (incl. Internet), IT in Business, model verification, Software Engineering},
	pages = {185--199},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/SRV8WV8Q/978-3-642-40823-6_15.html:text/html}
}

@article{huberman_evolutionary_1993,
	title = {Evolutionary games and computer simulations},
	volume = {90},
	issn = {0027-8424, 1091-6490},
	url = {http://www.pnas.org/content/90/16/7716},
	abstract = {The Prisoner's Dilemma has long been considered the paradigm for studying the emergence of cooperation among selfish individuals. Because of its importance, it has been studied through computer experiments as well as in the laboratory and by analytical means. However, there are important differences between the way a system composed of many interacting elements is simulated by a digital machine and the manner in which it behaves when studied in real experiments. In some instances, these disparities can be marked enough so as to cast doubt on the implications of cellular automata-type simulations for the study of cooperation in social systems. In particular, if such a simulation imposes space-time granularity, then its ability to describe the real world may be compromised. Indeed, we show that the results of digital simulations regarding territoriality and cooperation differ greatly when time is discrete as opposed to continuous.},
	language = {en},
	number = {16},
	urldate = {2017-01-17},
	journal = {Proceedings of the National Academy of Sciences},
	author = {Huberman, B. A. and Glance, N. S.},
	month = aug,
	year = {1993},
	pmid = {8356075},
	pages = {7716--7718},
	file = {Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/S63U46TG/Huberman and Glance - 1993 - Evolutionary games and computer simulations.pdf:application/pdf;Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/5RMFZDRU/7716.html:text/html}
}

@techreport{gaffeo_adaptive_2008,
	type = {Department of {Economics} {Working} {Paper}},
	title = {Adaptive microfoundations for emergent macroeconomics},
	url = {https://ideas.repec.org/p/trn/utwpde/0802.html},
	abstract = {In this paper we present the basics of a research program aimed at providing microfoundations to macroeconomic theory on the basis of computational agentbased adaptive descriptions of individual behavior. To exemplify our proposal, a simple prototype model of decentralized multi-market transactions is offered. We show that a very simple agent-based computational laboratory can challenge more structured dynamic stochastic general equilibrium models in mimicking comovements over the business cycle.},
	number = {0802},
	urldate = {2016-12-12},
	institution = {Department of Economics, University of Trento, Italia},
	author = {Gaffeo, Edoardo and Gatti, Domenico Delli and Desiderio, Saul and Gallegati, Mauro},
	year = {2008},
	keywords = {Adaptive behavior, Agent-based economics, Microfoundations of macroeconomics},
	file = {RePEc PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/T7A9VNZE/Gaffeo et al. - 2008 - Adaptive microfoundations for emergent macroeconom.pdf:application/pdf;RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/2Q26WMEP/0802.html:text/html}
}

@incollection{vendrov_frabjous:_2014,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Frabjous: {A} {Declarative} {Domain}-{Specific} {Language} for {Agent}-{Based} {Modeling}},
	copyright = {©2014 Springer International Publishing Switzerland},
	isbn = {978-3-319-05578-7 978-3-319-05579-4},
	shorttitle = {Frabjous},
	url = {http://link.springer.com/chapter/10.1007/978-3-319-05579-4_47},
	abstract = {Agent-based modeling (ABM) is a powerful tool for the study of complex systems; but agent-based models are notoriously difficult to create, modify, and reason about, especially in contrast to system dynamics models. We argue that these difficulties are strongly related to the choice of specification language, and that they can be mitigated by using functional reactive programming (FRP), a paradigm for describing dynamic systems. We describe Frabjous, a new language for agent-based modeling based on FRP, and discuss its software engineering benefits and their broader implications for language choice in ABM.},
	language = {en},
	number = {8393},
	urldate = {2016-10-31},
	booktitle = {Social {Computing}, {Behavioral}-{Cultural} {Modeling} and {Prediction}},
	publisher = {Springer International Publishing},
	author = {Vendrov, Ivan and Dutchyn, Christopher and Osgood, Nathaniel D.},
	editor = {Kennedy, William G. and Agarwal, Nitin and Yang, Shanchieh Jay},
	month = apr,
	year = {2014},
	keywords = {Agent-based modeling, agent-based simulation, Computer Appl. in Social and Behavioral Sciences, Computer Communication Networks, Computers and Society, Data Mining and Knowledge Discovery, domain-specific language, dynamic model, functional programming, functional reactive, Information Systems Applications (incl. Internet), Management of Computing and Information Systems, simulation},
	pages = {385--392},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/QNAUCNTW/10.html:text/html}
}

@article{hughes_why_1989,
	title = {Why {Functional} {Programming} {Matters}},
	volume = {32},
	issn = {0010-4620},
	url = {http://dx.doi.org/10.1093/comjnl/32.2.98},
	doi = {10.1093/comjnl/32.2.98},
	number = {2},
	urldate = {2016-11-11},
	journal = {Comput. J.},
	author = {Hughes, J.},
	month = apr,
	year = {1989},
	pages = {98--107}
}

@inproceedings{hewitt_universal_1973,
	address = {San Francisco, CA, USA},
	series = {{IJCAI}'73},
	title = {A {Universal} {Modular} {ACTOR} {Formalism} for {Artificial} {Intelligence}},
	url = {http://dl.acm.org/citation.cfm?id=1624775.1624804},
	urldate = {2016-10-25},
	booktitle = {Proceedings of the 3rd {International} {Joint} {Conference} on {Artificial} {Intelligence}},
	publisher = {Morgan Kaufmann Publishers Inc.},
	author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
	year = {1973},
	pages = {235--245}
}

@article{dawid_evolutionary_2007,
	series = {Tenth {Workshop} on {Economic} {Heterogeneous} {Interacting} {AgentsWEHIA} 2005},
	title = {Evolutionary game dynamics and the analysis of agent-based imitation models: {The} long run, the medium run and the importance of global analysis},
	volume = {31},
	issn = {0165-1889},
	shorttitle = {Evolutionary game dynamics and the analysis of agent-based imitation models},
	url = {http://www.sciencedirect.com/science/article/pii/S0165188907000127},
	doi = {10.1016/j.jedc.2007.01.002},
	abstract = {In this paper it is examined under which circumstances analytical concepts developed in evolutionary game theory can be usefully applied to predict the behavior of imitation processes of several interacting finite populations of agents. I review results concerning stochastic stability and approximation by deterministic dynamics in the long run and in the medium run and complement the theoretical analysis with insights obtained from simulations. In particular, it is demonstrated that the predictive power of deterministic dynamic analysis depends on the structure of the basins of attraction with respect to that dynamical system. Methods developed for the global analysis of deterministic systems turn out to be useful to characterize the predictive power of the deterministic analysis.},
	number = {6},
	urldate = {2016-09-30},
	journal = {Journal of Economic Dynamics and Control},
	author = {Dawid, Herbert},
	month = jun,
	year = {2007},
	keywords = {Basins of attraction, Evolutionary stability, Imitation, Stochastic stability},
	pages = {2108--2133},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/IT6HWN8H/Dawid - 2007 - Evolutionary game dynamics and the analysis of age.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/E4BDVAPE/S0165188907000127.html:text/html}
}

@inproceedings{claessen_quickcheck:_2000,
	address = {New York, NY, USA},
	series = {{ICFP} '00},
	title = {{QuickCheck}: {A} {Lightweight} {Tool} for {Random} {Testing} of {Haskell} {Programs}},
	isbn = {978-1-58113-202-1},
	shorttitle = {{QuickCheck}},
	url = {http://doi.acm.org/10.1145/351240.351266},
	doi = {10.1145/351240.351266},
	abstract = {Quick Check is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are described as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffices to obtain good coverage of the definition under test.},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the {Fifth} {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Claessen, Koen and Hughes, John},
	year = {2000},
	pages = {268--279},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/CKGG42NQ/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing .pdf:application/pdf}
}

@inproceedings{varela_modelling_2004,
	address = {New York, NY, USA},
	series = {{ERLANG} '04},
	title = {On {Modelling} {Agent} {Systems} with {Erlang}},
	isbn = {978-1-58113-918-1},
	url = {http://doi.acm.org/10.1145/1022471.1022481},
	doi = {10.1145/1022471.1022481},
	abstract = {Multi-agent systems are a kind of concurrent distributed systems. In this work, some guidelines on how to create multi-agent systems using Erlang are presented. The modelled system supports cooperation among agents by plan exchange, reconfiguration and has a certain fault-tolerance. The distributed and concurrent functional programming Erlang, together with OTP platform, allows the creation of high-availability and fault-tolerant concurrent and distributed systems, and it seems to be an interesting framework for implementing multi-agent systems.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 2004 {ACM} {SIGPLAN} {Workshop} on {Erlang}},
	publisher = {ACM},
	author = {Varela, Carlos and Abalde, Carlos and Castro, Laura and Gulías, Jose},
	year = {2004},
	keywords = {distributed systems, functional programming, multi-agent systems},
	pages = {65--70},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/WFAZNWNA/Varela et al. - 2004 - On Modelling Agent Systems with Erlang.pdf:application/pdf}
}

@article{kirman_evolving_2001,
	title = {Evolving market structure: {An} {ACE} model of price dispersion and loyalty},
	volume = {25},
	issn = {0165-1889},
	shorttitle = {Evolving market structure},
	url = {http://econpapers.repec.org/article/eeedyncon/v_3a25_3ay_3a2001_3ai_3a3-4_3ap_3a459-502.htm},
	number = {3-4},
	urldate = {2016-12-12},
	journal = {Journal of Economic Dynamics and Control},
	author = {Kirman, Alan and Vriend, Nicolaas},
	year = {2001},
	pages = {459--502},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/M4RPRHJH/v_3a25_3ay_3a2001_3ai_3a3-4_3ap_3a459-502.html:text/html}
}

@phdthesis{bezirgiannis_improving_2013,
	title = {Improving {Performance} of {Simulation} {Software} {Using} {Haskell}’s {Concurrency} \& {Parallelism}},
	school = {Utrecht University - Dept. of Information and Computing Sciences},
	author = {Bezirgiannis, Nikolaos},
	year = {2013}
}

@inproceedings{wah_latency_2013,
	address = {New York, NY, USA},
	series = {{EC} '13},
	title = {Latency {Arbitrage}, {Market} {Fragmentation}, and {Efficiency}: {A} {Two}-market {Model}},
	isbn = {978-1-4503-1962-1},
	shorttitle = {Latency {Arbitrage}, {Market} {Fragmentation}, and {Efficiency}},
	url = {http://doi.acm.org/10.1145/2482540.2482577},
	doi = {10.1145/2482540.2482577},
	abstract = {We study the effect of latency arbitrage on allocative efficiency and liquidity in fragmented financial markets. We propose a simple model of latency arbitrage in which a single security is traded on two exchanges, with aggregate information available to regular traders only after some delay. An infinitely fast arbitrageur profits from market fragmentation by reaping the surplus when the two markets diverge due to this latency in cross-market communication. We develop a discrete-event simulation system to capture this processing and information transfer delay, and using an agent-based approach, we simulate the interactions between high-frequency and zero-intelligence trading agents at the millisecond level. We then evaluate allocative efficiency and market liquidity arising from the simulated order streams, and we find that market fragmentation and the presence of a latency arbitrageur reduces total surplus and negatively impacts liquidity. By replacing continuous-time markets with periodic call markets, we eliminate latency arbitrage opportunities and achieve further efficiency gains through the aggregation of orders over short time periods.},
	urldate = {2017-02-03},
	booktitle = {Proceedings of the {Fourteenth} {ACM} {Conference} on {Electronic} {Commerce}},
	publisher = {ACM},
	author = {Wah, Elaine and Wellman, Michael P.},
	year = {2013},
	keywords = {allocative efficiency, high-frequency trading, regulation nms},
	pages = {855--872},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/E57FC22X/Wah and Wellman - 2013 - Latency Arbitrage, Market Fragmentation, and Effic.pdf:application/pdf}
}

@inproceedings{dawson_opening_2014,
	title = {Opening pandora's box: {Some} insight into the inner workings of an {Agent}-{Based} {Simulation} environment},
	shorttitle = {Opening pandora's box},
	doi = {10.15439/2014F335},
	abstract = {Agent-Based Simulation (ABS) environments are somewhat of a black box to many modelers in Social Simulation or Economics and their inner workings are often only understood by the computer scientists who developed them. We intend to shed some light into the inner workings of such systems. For this purpose we have developed our own simple ABS environment in C++ using hierarchical state machines. In this paper we provide insight into the design of our ABS environment and then test the performance of it by comparing it to that of an "off the shelf" commercial package. While some programming knowledge is required to understand the paper in all its depth we believe that non programming experts will also benefit from this paper as it provides an insight into the underlying mechanisms operating within an ABS using graphical representations and explanations that avoid heavy technical jargon.},
	booktitle = {2014 {Federated} {Conference} on {Computer} {Science} and {Information} {Systems}},
	author = {Dawson, D. and Siebers, P. O. and Vu, Tuong Manh},
	month = sep,
	year = {2014},
	keywords = {ABS environments, agent-based simulation environment, Automata, black box, C++, C++ language, Computational modeling, economics, Educational institutions, graphical representations, hierarchical state machines, History, Object oriented modeling, Observers, Pandora box, social simulation, software agents, Unified modeling language},
	pages = {1453--1460},
	file = {IEEE Xplore Abstract Record:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/WQ6X54MH/6933189.html:text/html;IEEE Xplore Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/6ZCWVBCQ/Dawson et al. - 2014 - Opening pandora's box Some insight into the inner.pdf:application/pdf}
}

@inproceedings{henderson_functional_1982,
	address = {New York, NY, USA},
	series = {{LFP} '82},
	title = {Functional {Geometry}},
	isbn = {978-0-89791-082-8},
	url = {http://doi.acm.org/10.1145/800068.802148},
	doi = {10.1145/800068.802148},
	abstract = {A method of describing pictures is introduced. The equations, which describe the appearance of a picture, also form a purely functional program which can be used to compute the set of lines necessary to plot the picture on a graphical device. The method is illustrated by using it to describe the structure of one of the woodcuts of Maurits Escher.},
	urldate = {2016-12-09},
	booktitle = {Proceedings of the 1982 {ACM} {Symposium} on {LISP} and {Functional} {Programming}},
	publisher = {ACM},
	author = {Henderson, Peter},
	year = {1982},
	pages = {179--187},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/3HMA3EWS/Henderson - 1982 - Functional Geometry.pdf:application/pdf}
}

@book{noauthor_paper_nodate,
	title = {Paper {Presentation}},
	url = {https://docs.google.com/presentation/d/1gOISTSoWZ3xnsCiEZ7ZF9rgWPe5L0MOvedw2XV1WlM4/edit?usp=drive_web&usp=slides_home&ths=true&usp=embed_facebook},
	abstract = {The Art of Iteration: Update-Strategies in ABM/S Supervisors: Dr. Peer-Olaf Siebers, Dr. Thorsten Altenkirch Jonathan Thaler},
	urldate = {2017-01-23},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/ITCNPV7M/Paper Presentation.html:text/html}
}

@article{gode_allocative_1993,
	title = {Allocative {Efficiency} of {Markets} with {Zero}-{Intelligence} {Traders}: {Market} as a {Partial} {Substitute} for {Individual} {Rationality}},
	volume = {101},
	issn = {0022-3808},
	shorttitle = {Allocative {Efficiency} of {Markets} with {Zero}-{Intelligence} {Traders}},
	url = {http://www.jstor.org/stable/2138676},
	abstract = {We report market experiments in which human traders are replaced by "zero-intelligence" programs that submit random bids and offers. Imposing a budget constraint (i.e., not permitting traders to sell below their costs or buy above their values) is sufficient to raise the allocative efficiency of these auctions close to 100 percent. Allocative efficiency of a double auction derives largely from its structure, independent of traders' motivation, intelligence, or learning. Adam Smith's invisible hand may be more powerful than some may have thought; it can generate aggregate rationality not only from individual rationality but also from individual irrationality.},
	number = {1},
	urldate = {2016-09-30},
	journal = {Journal of Political Economy},
	author = {Gode, Dhananjay K. and Sunder, Shyam},
	year = {1993},
	pages = {119--137}
}

@book{noauthor_emergent_nodate,
	title = {Emergent {Macroeconomics} - {An} {Agent}-{Based} {Approach} to {Business} {\textbackslash}textbar {Domenico} {Gatti} {\textbackslash}textbar {Springer}},
	url = {http://www.springer.com/gp/book/9788847007246},
	abstract = {This book contributes substantively to the current state-of-the-art of macroeconomics by providing a method for building models in which business cycles...},
	urldate = {2016-12-12},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/W6DNT9RZ/9788847007246.html:text/html}
}

@incollection{hudak_arrows_2003,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Arrows, {Robots}, and {Functional} {Reactive} {Programming}},
	copyright = {©2003 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-40132-2 978-3-540-44833-4},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-44833-4_6},
	abstract = {Functional reactive programming},
	language = {en},
	number = {2638},
	urldate = {2016-11-04},
	booktitle = {Advanced {Functional} {Programming}},
	publisher = {Springer Berlin Heidelberg},
	author = {Hudak, Paul and Courtney, Antony and Nilsson, Henrik and Peterson, John},
	editor = {Jeuring, Johan and Jones, Simon L. Peyton},
	year = {2003},
	keywords = {Compilers, Interpreters, Logics and Meanings of Programs, Programming Languages, Programming Techniques, Software Engineering},
	pages = {159--187},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/WW5CGBKS/10.html:text/html}
}

@book{lysenko_framework_2008,
	title = {A {Framework} for {Megascale} {Agent} {Based} {Model} {Simulations} on the {GPU}},
	author = {Lysenko, Mikola and D’souza, Roshan and Rahmani, Keyvan},
	year = {2008}
}

@techreport{glasserman_contagion_2015,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {Contagion in {Financial} {Networks}},
	url = {https://papers.ssrn.com/abstract=2681392},
	abstract = {This paper surveys the rapidly growing literature about interconnectedness and financial stability. The paper focuses on insights in the literature on the relationship between network structure and the vulnerability of the financial system to contagion.},
	number = {ID 2681392},
	urldate = {2016-12-12},
	institution = {Social Science Research Network},
	author = {Glasserman, Paul and Young, Peyton},
	month = oct,
	year = {2015},
	keywords = {Contagion in Financial Networks, Paul Glasserman, Peyton Young, SSRN},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/PIK862B8/papers.html:text/html}
}

@techreport{di_stefano_exat:_2007,
	title = {{eXAT}: an {Experimental} {Tool} for {Programming} {Multi}-{Agent} {Systems} in {Erlang}},
	author = {Di Stefano, Antonella and Santoro, Corrado},
	year = {2007}
}

@techreport{gintis_dynamics_2007,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {The {Dynamics} of {General} {Equilibrium}},
	url = {http://papers.ssrn.com/abstract=1017117},
	abstract = {The Walrasian general equilibrium model is the centrepiece of modern economic theory, but progress in understanding its dynamical properties has been meagre. This article shows that the instability of Walras' tatonnement process is due to the public nature of prices, which leads to excessive correlation in the behaviour of economic agents. When prices are private information, a dynamic with a globally stable stationary state obtains in economies that are unstable in the tâtonnment process. We provide an agent-based model of a multi-sector Walrasian economy with production and exchange, in which prices are private information. This economy is dynamically well behaved.},
	number = {ID 1017117},
	urldate = {2016-09-30},
	institution = {Social Science Research Network},
	author = {Gintis, Herbert},
	month = sep,
	year = {2007},
	keywords = {Herbert Gintis, SSRN, The Dynamics of General Equilibrium},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/3KJ3DQVW/papers.html:text/html}
}

@techreport{de_jong_suitability_2014,
	title = {Suitability of {Haskell} for {Multi}-{Agent} {Systems}},
	institution = {University of Twente},
	author = {De Jong, Tanja},
	year = {2014}
}

@phdthesis{yuxuan_agent-based_2016,
	address = {School Of Computer Science},
	title = {The {Agent}-based {Simulation} {Environment} in {Java}},
	school = {University Of Nottingham},
	author = {Yuxuan, Jin},
	year = {2016}
}

@inproceedings{ionescu_dependently-typed_2012,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Dependently-{Typed} {Programming} in {Scientific} {Computing}},
	copyright = {©2013 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-41581-4 978-3-642-41582-1},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-41582-1_9},
	abstract = {Computer simulations are essential in virtually every scientific discipline, even more so in those such as economics or climate change where the ability to make laboratory experiments is limited. Therefore, it is important to ensure that the models are implemented correctly, that they can be re-implemented and that the results can be reproduced. Typically, though, the models are described by a mixture of prose and mathematics which is insufficient for these purposes. We argue that using dependent types allows us to gradually reduce the gap between the mathematical description and the implementation, and we give examples from economic modelling. We discuss the consequences that our incremental approach has on programming style and the requirements it imposes on the dependently-typed programming languages used.},
	language = {en},
	urldate = {2016-12-12},
	booktitle = {Implementation and {Application} of {Functional} {Languages}},
	publisher = {Springer Berlin Heidelberg},
	author = {Ionescu, Cezar and Jansson, Patrik},
	editor = {Hinze, Ralf},
	month = aug,
	year = {2012},
	keywords = {Compilers, Information Systems Applications (incl. Internet), Interpreters, Logics and Meanings of Programs, Mathematical Logic and Formal Languages, Programming Languages, Programming Techniques, Software Engineering},
	pages = {140--156},
	file = {Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/X3NH7SQF/978-3-642-41582-1_9.html:text/html}
}

@techreport{richiardi_agent-based_2007,
	type = {{LABORatorio} {R}. {Revelli} {Working} {Papers} {Series}},
	title = {Agent-based {Computational} {Economics}. {A} {Short} {Introduction}},
	url = {http://econpapers.repec.org/paper/ccawplabo/69.htm},
	number = {69},
	urldate = {2016-10-31},
	institution = {LABORatorio R. Revelli, Centre for Employment Studies},
	author = {Richiardi, Matteo},
	year = {2007},
	file = {RePEc PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/BMHCQZZC/Richiardi - 2007 - Agent-based Computational Economics. A Short Intro.pdf:application/pdf;RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/NVMX9FNC/69.html:text/html}
}

@inproceedings{moggi_computational_1989,
	address = {Piscataway, NJ, USA},
	title = {Computational {Lambda}-calculus and {Monads}},
	isbn = {978-0-8186-1954-0},
	url = {http://dl.acm.org/citation.cfm?id=77350.77353},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the {Fourth} {Annual} {Symposium} on {Logic} in {Computer} {Science}},
	publisher = {IEEE Press},
	author = {Moggi, E.},
	year = {1989},
	pages = {14--23}
}

@book{wilensky_introduction_2015,
	title = {An {Introduction} to {Agent}-{Based} {Modeling}: {Modeling} {Natural}, {Social}, and {Engineered} {Complex} {Systems} with {NETLogo}},
	isbn = {978-0-262-73189-8},
	url = {https://www.amazon.co.uk/Introduction-Agent-Based-Modeling-Natural-Engineered/dp/0262731894},
	urldate = {2016-12-14},
	publisher = {MIT Press},
	author = {Wilensky, Uri and Rand, William},
	year = {2015}
}

@inproceedings{wan_functional_2000,
	address = {New York, NY, USA},
	series = {{PLDI} '00},
	title = {Functional {Reactive} {Programming} from {First} {Principles}},
	isbn = {978-1-58113-199-4},
	url = {http://doi.acm.org/10.1145/349299.349331},
	doi = {10.1145/349299.349331},
	abstract = {Functional Reactive Programming, or FRP, is a general framework for programming hybrid systems in a high-level, declarative manner. The key ideas in FRP are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are time-ordered sequences of discrete-time event occurrences. FRP is the essence of Fran, a domain-specific language embedded in Haskell for programming reactive animations, but FRP is now also being used in vision, robotics and other control systems applications. In this paper we explore the formal semantics of FRP and how it relates to an implementation based on streams that represent (and therefore only approximate) continuous behaviors. We show that, in the limit as the sampling interval goes to zero, the implementation is faithful to the formal, continuous semantics, but only when certain constraints on behaviors are observed. We explore the nature of these constraints, which vary amongst the FRP primitives. Our results show both the power and limitations of this approach to language design and implementation. As an example of a limitation, we show that streams are incapable of representing instantaneous predicate events over behaviors.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 2000 {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {ACM},
	author = {Wan, Zhanyong and Hudak, Paul},
	year = {2000},
	pages = {242--252},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/QTXQ44D8/Wan and Hudak - 2000 - Functional Reactive Programming from First Princip.pdf:application/pdf}
}

@article{agha_foundation_1997,
	title = {A {Foundation} for {Actor} {Computation}},
	volume = {7},
	issn = {0956-7968},
	url = {http://dx.doi.org/10.1017/S095679689700261X},
	doi = {10.1017/S095679689700261X},
	abstract = {We present an actor language which is an extension of a simple functional language, and provide an operational semantics for this extension. Actor configurations represent open distributed systems, by which we mean that the specification of an actor system explicitly takes into account the interface with external components. We study the composability of such systems. We define and study various notions of testing equivalence on actor expressions and configurations. The model we develop provides fairness. An important result is that the three forms of equivalence, namely, convex, must, and may equivalences, collapse to two in the presence of fairness. We further develop methods for proving laws of equivalence and provide example proofs to illustrate our methodology.},
	number = {1},
	urldate = {2016-10-26},
	journal = {J. Funct. Program.},
	author = {Agha, Gul A. and Mason, Ian A. and Smith, Scott F. and Talcott, Carolyn L.},
	month = jan,
	year = {1997},
	pages = {1--72}
}

@inproceedings{wadler_monads_1995,
	address = {London, UK, UK},
	title = {Monads for {Functional} {Programming}},
	isbn = {978-3-540-59451-2},
	url = {http://dl.acm.org/citation.cfm?id=647698.734146},
	urldate = {2016-11-16},
	booktitle = {Advanced {Functional} {Programming}, {First} {International} {Spring} {School} on {Advanced} {Functional} {Programming} {Techniques}-{Tutorial} {Text}},
	publisher = {Springer-Verlag},
	author = {Wadler, Philip},
	year = {1995},
	pages = {24--52}
}

@article{gintis_emergence_2006,
	title = {The {Emergence} of a {Price} {System} from {Decentralized} {Bilateral} {Exchange}},
	volume = {6},
	issn = {1534-5971},
	url = {https://www.degruyter.com/view/j/bejte.2006.6.1/bejte.2006.6.1.1302/bejte.2006.6.1.1302.xml},
	doi = {10.2202/1534-5971.1302},
	abstract = {This paper analyzes the dynamics of completely decentralized bilateral exchange. In such a framework, neither money nor prices as public information exist. Rather, prices represent an agent's barter strategy, and hence are private information. We call these private prices. Agents formulate trade offers and accept or reject offers from other traders, on the basis of their private prices. Private prices are updated by low-scoring agents periodically imitating the strategies of higher-scoring agents. We show that a system of quasi-public prices emerges in the medium run, and these quasi-public prices converge to stationary distributions that are approximately competitive equilibria of the underlying Walrasian model in the long run. We thus provide, for the first time, a general, decentralized disequilibrium adjustment mechanism that renders market equilibrium dynamically stable in a highly simplified production and exchange economy.},
	number = {1},
	urldate = {2016-09-30},
	journal = {Contributions in Theoretical Economics},
	author = {Gintis, Herbert},
	year = {2006},
	pages = {1--15}
}

@article{bostrom_are_2003,
	title = {Are {We} {Living} in a {Computer} {Simulation}?},
	volume = {53},
	issn = {1467-9213},
	url = {http://dx.doi.org/10.1111/1467-9213.00309},
	doi = {10.1111/1467-9213.00309},
	number = {211},
	journal = {The Philosophical Quarterly},
	author = {Bostrom, Nick},
	year = {2003},
	pages = {243--255}
}

@article{steinhart_theological_2010,
	title = {Theological {Implications} of the {Simulation} {Argument}},
	volume = {10},
	abstract = {Nick Bostrom’s Simulation Argument (SA) has many intriguing theological implications. We work out some of them here. We show how the SA can be used to develop novel versions of the Cosmological and Design Arguments. We then develop some of the affinities between Bostrom’s naturalistic theogony and more traditional theological topics. We look at the resurrection of the body and at theodicy. We conclude with some reflections on the relations between the SA and Neoplatonism (friendly) and between the SA and theism (less friendly).},
	journal = {Ars Disputandi: The Online Journal for Philosophy of Religion},
	author = {Steinhart, Eric},
	year = {2010},
	pages = {23--37}
}

@incollection{irtem_simulation_1978,
	address = {Berlin, Heidelberg},
	title = {Simulation of {Free} {Will}},
	isbn = {978-3-642-93104-8},
	url = {http://dx.doi.org/10.1007/978-3-642-93104-8_92},
	booktitle = {Current {Topics} in {Cybernetics} and {Systems}: {Proceedings} of the {Fourth} {International} {Congress} of {Cybernetics} \& {Systems} 21–25 {August}, 1978 {Amsterdam}, {The} {Netherlands}},
	publisher = {Springer Berlin Heidelberg},
	author = {Irtem, Ali},
	editor = {Rose, J.},
	year = {1978},
	note = {DOI: 10.1007/978-3-642-93104-8\_92},
	pages = {148--149}
}

@book{epstein_growing_1996,
	address = {Washington, DC, USA},
	title = {Growing {Artificial} {Societies}: {Social} {Science} from the {Bottom} {Up}},
	isbn = {978-0-262-55025-3},
	shorttitle = {Growing {Artificial} {Societies}},
	publisher = {The Brookings Institution},
	author = {Epstein, Joshua M. and Axtell, Robert},
	year = {1996}
}

@incollection{mackie-mason_chapter_2006,
	title = {Chapter 28 {Automated} {Markets} and {Trading} {Agents}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020289},
	abstract = {Computer automation has the potential, just starting to be realized, of transforming the design and operation of markets, and the behaviors of agents trading in them. We discuss the possibilities for automating markets, presenting a broad conceptual framework covering resource allocation as well as enabling marketplace services such as search and transaction execution. One of the most intriguing opportunities is provided by markets implementing computationally sophisticated negotiation mechanisms, for example combinatorial auctions. An important theme that emerges from the literature is the centrality of design decisions about matching the domain of goods over which a mechanism operates to the domain over which agents have preferences. When the match is imperfect (as is almost inevitable), the market game induced by the mechanism is analytically intractable, and the literature provides an incomplete characterization of rational bidding policies. A review of the literature suggests that much of our existing knowledge comes from computational simulations, including controlled studies of abstract market designs (e.g., simultaneous ascending auctions), and research tournaments comparing agent strategies in a variety of market scenarios. An empirical game-theoretic methodology combines the advantages of simulation, agent-based modeling, and statistical and game-theoretic analysis.},
	urldate = {2017-03-01},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {MacKie-Mason, Jeffrey K. and Wellman, Michael P.},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	note = {DOI: 10.1016/S1574-0021(05)02028-9},
	keywords = {automated markets, computational markets, Mechanism design, trading agents},
	pages = {1381--1431},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/6WBNDQMP/MacKie-Mason and Wellman - 2006 - Chapter 28 Automated Markets and Trading Agents.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/ZJBNSZG5/S1574002105020289.html:text/html}
}

@incollection{marks_chapter_2006,
	title = {Chapter 27 {Market} {Design} {Using} {Agent}-{Based} {Models}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020277},
	abstract = {This chapter explores the state of the emerging practice of designing markets by the use of agent-based modeling, with special reference to electricity markets and computerized (on-line) markets, perhaps including real-life electronic agents as well as human traders. The paper first reviews the use of evolutionary and agent-based techniques of analyzing market behaviors and market mechanisms, and economic models of learning, comparing genetic algorithms with reinforcement learning. Ideal design would be direct optimization of an objective function, but in practice the complexity of markets and traders' behavior prevents this, except in special circumstances. Instead, iterative analysis, subject to design criteria trade-offs, using autonomous self-interested agents, mimics the bottom-up evolution of historical market mechanisms by trial and error. The chapter highlights ten papers that exemplify recent progress in agent-based evolutionary analysis and design of markets in silico, using electricity markets and on-line double auctions as illustrations. A monopoly sealed-bid auction is examined in the tenth paper, and a new auction mechanism is evolved and analyzed. The chapter concludes that, as modeling the learning and behavior of traders improves, and as the software and hardware available for modeling and analysis improves, the techniques will provide ever greater insights into improving the designs of existing markets, and facilitating the design of new markets.},
	urldate = {2017-03-01},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {Marks, Robert},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	note = {DOI: 10.1016/S1574-0021(05)02027-7},
	keywords = {analysis, auctions, design, electricity, Learning, market, on-line},
	pages = {1339--1380},
	file = {ScienceDirect Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/Q5VMSRDC/Marks - 2006 - Chapter 27 Market Design Using Agent-Based Models.pdf:application/pdf;ScienceDirect Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/IFMHUKM6/S1574002105020277.html:text/html}
}

@inproceedings{gilmer_recursive_2000,
	address = {San Diego, CA, USA},
	series = {{WSC} '00},
	title = {Recursive {Simulation} to {Aid} {Models} of {Decision} {Making}},
	isbn = {978-0-7803-6582-7},
	url = {http://dl.acm.org/citation.cfm?id=510378.510515},
	abstract = {Recursive simulation involves a simulation, or an entity in the simulation, creating another instance of the same simulation, running it and using its results. This is particularly applicable to decisionmaking in a military simulation. Simulation can be used by the simulated command elements to evaluate the implications of the possible choices. The simulation that is already running provides a conveniently available evaluation tool if it can be run recursively. This has been done with the "eaglet" simulation, and data collected that indicates that the quality of decisionmaking by the simulated command elements is improved.},
	urldate = {2017-03-06},
	booktitle = {Proceedings of the 32Nd {Conference} on {Winter} {Simulation}},
	publisher = {Society for Computer Simulation International},
	author = {Gilmer, Jr., John B. and Sullivan, Frederick J.},
	year = {2000},
	pages = {958--963},
	file = {ACM Full Text PDF:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/2SBWWNJF/Gilmer and Sullivan - 2000 - Recursive Simulation to Aid Models of Decision Mak.pdf:application/pdf}
}

@article{hutton_tutorial_1999,
	title = {A {Tutorial} on the {Universality} and {Expressiveness} of {Fold}},
	volume = {9},
	issn = {0956-7968},
	url = {http://dx.doi.org/10.1017/S0956796899003500},
	doi = {10.1017/S0956796899003500},
	abstract = {In functional programming, fold is a standard operator that encapsulates a simple pattern of recursion for processing lists. This article is a tutorial on two key aspects of the fold operator for lists. First of all, we emphasize the use of the universal property of fold both as a proof principle that avoids the need for inductive proofs, and as a definition principle that guides the transformation of recursive functions into definitions using fold. Secondly, we show that even though the pattern of recursion encapsulated by fold is simple, in a language with tuples and functions as first-class values the fold operator has greater expressive power than might first be expected.},
	number = {4},
	urldate = {2017-03-06},
	journal = {J. Funct. Program.},
	author = {Hutton, Graham},
	month = jul,
	year = {1999},
	pages = {355--372}
}

@techreport{baas_emergence_1997,
	type = {Working {Paper}},
	title = {On {Emergence} and {Explanation}},
	url = {http://econpapers.repec.org/paper/wopsafiwp/97-02-008.htm},
	abstract = {Emergence is a universal phenomenon that can be defined mathematically in a very general way. This is useful for the study of scientifically legitimate explanations of complex systems, here defined as hyperstructures. A requirement is that the observation mechanisms are considered within the general framework. Two notions of emergence are defined, and specific examples of these are discussed.},
	urldate = {2017-03-13},
	institution = {Santa Fe Institute},
	author = {Baas, Nils A. and Emmeche, Claus},
	month = feb,
	year = {1997},
	keywords = {category theory, Emergence, explanation, hyperstructure},
	file = {RePEc Snapshot:/home/jonathan/.zotero/zotero/wzm4myor.default/zotero/storage/FPZKEJVP/97-02-008.html:text/html}
}