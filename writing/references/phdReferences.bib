
@article{krzywicki_massively_2015,
	title = {Massively concurrent agent-based evolutionary computing},
	volume = {11},
	issn = {1877-7503},
	url = {http://www.sciencedirect.com/science/article/pii/S1877750315300041},
	doi = {10.1016/j.jocs.2015.07.003},
	abstract = {The fusion of the multi-agent paradigm with evolutionary computation yielded promising results in many optimization problems. Evolutionary multi-agent systems (EMAS) are more similar to biological evolution than classical evolutionary algorithms. However, technological limitations prevented the use of fully asynchronous agents in previous EMAS implementations. In this paper we present a new algorithm for agent-based evolutionary computations. The individuals are represented as fully autonomous and asynchronous agents. An efficient implementation of this algorithm was possible through the use of modern technologies based on functional languages (namely Erlang and Scala), which natively support lightweight processes and asynchronous communication. Our experiments show that such an asynchronous approach is both faster and more efficient in solving common optimization problems.},
	urldate = {2017-05-09},
	journal = {Journal of Computational Science},
	author = {Krzywicki, D. and Turek, W. and Byrski, A. and Kisiel-Dorohinicki, M.},
	month = nov,
	year = {2015},
	keywords = {Evolutionary computing, functional programming, multi-agent systems},
	pages = {153--162},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/EK5XJH9Q/Krzywicki et al. - 2015 - Massively concurrent agent-based evolutionary comp.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/XAZ6BHVK/S1877750315300041.html:text/html}
}

@inproceedings{padget_pi-calculus_1998,
	title = {A pi-calculus {Model} of a {Spanish} {Fish} {Market} - {Preliminary} {Report} -},
	url = {https://link.springer.com/chapter/10.1007/3-540-48835-9_10},
	doi = {10.1007/3-540-48835-9_10},
	abstract = {This paper reports an educational exercise in using the π-calculus to model components of an electronic marketplace. Specifically, we are looking at the Spanish fish market, since we have participated in the construction of several simulations of this scenario over the past 18 months and now feel it is time to prepare a more precise description. Our objectives in doing this were (i) to gain familiarity with the π-calculus (ii) to find out whether the π-calculus might provide a suitable basis for defining the behaviour of components in an electronic marketplace. It is not our intention at this stage to establish the correctness of the components or the completeness of the model: these will be addressed later using existing tools and by developing new ones. In summary, this is an experience report.},
	language = {en},
	urldate = {2017-05-09},
	booktitle = {Agent {Mediated} {Electronic} {Commerce}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Padget, Julian and Bradford, Russell},
	month = may,
	year = {1998},
	pages = {166--188},
	file = {Snapshot:/home/io.nathan/Zotero/storage/FDSV29RU/3-540-48835-9_10.html:text/html}
}

@techreport{hudak_haskell_1994,
	address = {New Haven, CT},
	type = {Research {Report}},
	title = {Haskell vs. {Ada} vs. {C}++ vs. {Awk} vs. ... {An} {Experiment} in {Software} {Prototyping} {Productivity}},
	number = {YALEU/DCS/RR-1049},
	institution = {Department of Computer Science, Yale University},
	author = {Hudak, Paul and Jones, Mark},
	month = oct,
	year = {1994}
}

@misc{noauthor_haskell_nodate,
	title = {Haskell vs. {Ada} vs. {C}++ vs. {Awk} vs. … {An} {Experiment} in {Software} {Prototyping} {Productivity} {\textbar} {The} {Yale} {Haskell} {Group}},
	url = {http://haskell.cs.yale.edu/?post_type=publication&p=366},
	urldate = {2017-05-09},
	file = {Snapshot:/home/io.nathan/Zotero/storage/83T3ENUX/haskell.cs.yale.edu.html:text/html}
}

@misc{noauthor_sequential_nodate,
	title = {Sequential processing of {PDEVS} models},
	url = {https://www.researchgate.net/publication/216225210_Sequential_processing_of_PDEVS_models},
	abstract = {ResearchGate is a network dedicated to science and research. Connect, collaborate and discover scientific publications, jobs and conferences. All for free.},
	urldate = {2017-05-09},
	journal = {ResearchGate},
	file = {Snapshot:/home/io.nathan/Zotero/storage/8WMBIUDZ/216225210_Sequential_processing_of_PDEVS_models.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/FDUERV5E/216225210_Sequential_processing_of_PDEVS_models.pdf:application/pdf}
}

@article{siebers_introduction_2008,
	title = {Introduction to {Multi}-{Agent} {Simulation}},
	url = {http://arxiv.org/abs/0803.3905},
	abstract = {When designing systems that are complex, dynamic and stochastic in nature, simulation is generally recognised as one of the best design support technologies, and a valuable aid in the strategic and tactical decision making process. A simulation model consists of a set of rules that define how a system changes over time, given its current state. Unlike analytical models, a simulation model is not solved but is run and the changes of system states can be observed at any point in time. This provides an insight into system dynamics rather than just predicting the output of a system based on specific inputs. Simulation is not a decision making tool but a decision support tool, allowing better informed decisions to be made. Due to the complexity of the real world, a simulation model can only be an approximation of the target system. The essence of the art of simulation modelling is abstraction and simplification. Only those characteristics that are important for the study and analysis of the target system should be included in the simulation model.},
	urldate = {2017-05-09},
	journal = {arXiv:0803.3905 [cs]},
	author = {Siebers, Peer-Olaf and Aickelin, Uwe},
	month = mar,
	year = {2008},
	note = {arXiv: 0803.3905},
	keywords = {Computer Science - Multiagent Systems, Computer Science - Neural and Evolutionary Computing},
	file = {arXiv\:0803.3905 PDF:/home/io.nathan/Zotero/storage/G9V5DQB5/Siebers and Aickelin - 2008 - Introduction to Multi-Agent Simulation.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/N3JA3GJA/0803.html:text/html}
}

@article{wooldridge_intelligent_1995,
	title = {Intelligent {Agents}: {Theory} and {Practice}},
	volume = {10},
	shorttitle = {Intelligent {Agents}},
	abstract = {The concept of an agent has become important in both Artificial Intelligence (AI) and mainstream computer science. Our aim in this paper is to point the reader at what we perceive to be the most important theoretical and practical issues associated with the design and construction of intelligent agents. For convenience, we divide these issues into three areas (though as the reader will see, the divisions are at times somewhat arbitrary). Agent theory is concerned with the question of what an agent is, and the use of mathematical formalisms for representing and reasoning about the properties of agents. Agent architectures can be thought of as software engineering models of agents},
	journal = {Knowledge Engineering Review},
	author = {Wooldridge, Michael and Jennings, Nicholas R.},
	year = {1995},
	pages = {115--152},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/A9FWDF2W/Wooldridge and Jennings - 1995 - Intelligent Agents Theory and Practice.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/6PHCJ2PW/summary.html:text/html}
}

@misc{noauthor_why_2005,
	title = {Why {I} {Hate} {Frameworks}},
	url = {http://discuss.joelonsoftware.com/default.asp?joel.3.219431.12},
	urldate = {2017-08-05},
	journal = {Joel on Software},
	month = oct,
	year = {2005}
}

@misc{lawrence_krubner_object_2014,
	title = {Object {Oriented} {Programming} is an expensive disaster which must end},
	url = {http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end},
	urldate = {2017-08-05},
	journal = {Smashcompany},
	author = {{Lawrence Krubner}},
	month = jul,
	year = {2014}
}

@misc{erkki_lindpere_why_2013,
	title = {Why the debate on {Object}-{Oriented} vs {Functional} {Programming} is all about composition},
	url = {https://zeroturnaround.com/rebellabs/why-the-debate-on-object-oriented-vs-functional-programming-is-all-about-composition/},
	abstract = {In a previous post, I laid out a framework for code quality that divides the qualities of code into a few categories like fitness, correctness, clarity, performance, maintainability and beauty. However, let’s forget all that for the moment and talk about composition :-)

composition
noun 1. the act of combining parts or elements to form a whole.

In programming terms, composition is about making more complex programs out of simpler programs, without modifying the simpler pieces being composed–where the program could be anything from a single CPU instruction to an operating system with apps.},
	urldate = {2017-08-05},
	journal = {ZeroTurnaround},
	author = {{Erkki Lindpere}},
	month = dec,
	year = {2013}
}

@misc{bill_what_2017,
	title = {What is the meaning of “doesn't compose”?},
	url = {https://softwareengineering.stackexchange.com/questions/290056/what-is-the-meaning-of-doesnt-compose},
	abstract = {I see a lot of texts, especially functional programming texts, claim that certain CS concepts "don't compose". Examples are: locks don't compose, monads don't compose.

I've been having a hard time tracking down exactly the meaning of this phrase. When I think of composition, I think of either function composition or object aggregation (as in "favor composition over inheritance"), but that doesn't seem to be the sense in which people are using it here.

Can someone explain what this phrase means when used in expressions like the two examples above (that is, locks and monads)?},
	urldate = {2017-05-18},
	author = {{Bill}},
	month = jul,
	year = {2017}
}

@article{velupillai_unreasonable_2005,
	title = {The unreasonable ineffectiveness of mathematics in economics},
	volume = {29},
	issn = {0309-166X},
	url = {https://academic.oup.com/cje/article/29/6/849/1685589/The-unreasonable-ineffectiveness-of-mathematics-in},
	doi = {10.1093/cje/bei084},
	number = {6},
	urldate = {2017-05-08},
	journal = {Cambridge Journal of Economics},
	author = {Velupillai, K. Vela},
	month = nov,
	year = {2005},
	pages = {849--872},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/6P2WNQM5/Velupillai - 2005 - The unreasonable ineffectiveness of mathematics in.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/KS5X3K5I/The-unreasonable-ineffectiveness-of-mathematics-in.html:text/html}
}

@article{borrill_agent-based_2011,
	title = {Agent-based modeling: {The} right mathematics for the social sciences},
	shorttitle = {Agent-based modeling},
	abstract = {for the social sciences?},
	journal = {W., (Eds.). Elgar Recent Economic Methodology Companion, Northhampton},
	author = {Borrill, Paul L. and Tesfatsion, Leigh and Borrill, Paul L. and Tesfatsion, Leigh},
	year = {2011},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/H6QP4TIR/Borrill et al. - 2011 - Agent-based modeling The right mathematics for th.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/AWDG83B2/summary.html:text/html}
}

@article{grune-yanoff_philosophy_2010,
	title = {The {Philosophy} and {Epistemology} of {Simulation}: {A} {Review}},
	volume = {41},
	issn = {1046-8781},
	shorttitle = {The {Philosophy} and {Epistemology} of {Simulation}},
	url = {http://dx.doi.org/10.1177/1046878109353470},
	doi = {10.1177/1046878109353470},
	abstract = {The philosophical literature on simulations has increased dramatically during the past 40 years. Many of its main topics are epistemological. For example, philosophers consider how the results of simulations help explain natural phenomena. This essayâs review treats mainly simulations in the social sciences. It considers the nature of simulations, the varieties of simulation, and uses of simulations for representation, prediction, explanation, and policy decisions. Being oriented toward philosophy of science, it compares simulations to models and experiments and considers whether simulations raise new methodological issues.The essay concludes that several features of simulations set them apart from models and experiments and make them novel scientific tools, whose powers and limits are not yet well understood.},
	number = {1},
	urldate = {2017-05-08},
	journal = {Simul. Gaming},
	author = {Grüne-Yanoff, Till and Weirich, Paul},
	month = feb,
	year = {2010},
	keywords = {agent-based simulation, analytic solution, cellular automaton, computation, equation-based simulation, experiment, explanation, model, Monte Carlo simulation, Nash equilibrium, partial explanation, policy formation, potential explanation, prediction, proof, replicator dynamics, representation, robustness, simulation, theory},
	pages = {20--50}
}

@article{frigg_philosophy_2009,
	title = {The philosophy of simulation: hot new issues or same old stew?},
	volume = {169},
	issn = {0039-7857, 1573-0964},
	shorttitle = {The philosophy of simulation},
	url = {https://link.springer.com/article/10.1007/s11229-008-9438-z},
	doi = {10.1007/s11229-008-9438-z},
	abstract = {Computer simulations are an exciting tool that plays important roles in many scientific disciplines. This has attracted the attention of a number of philosophers of science. The main tenor in this literature is that computer simulations not only constitute interesting and powerful new science, but that they also raise a host of new philosophical issues. The protagonists in this debate claim no less than that simulations call into question our philosophical understanding of scientific ontology, the epistemology and semantics of models and theories, and the relation between experimentation and theorising, and submit that simulations demand a fundamentally new philosophy of science in many respects. The aim of this paper is to critically evaluate these claims. Our conclusion will be sober. We argue that these claims are overblown and that simulations, far from demanding a new metaphysics, epistemology, semantics and methodology, raise few if any new philosophical problems. The philosophical problems that do come up in connection with simulations are not specific to simulations and most of them are variants of problems that have been discussed in other contexts before.},
	language = {en},
	number = {3},
	urldate = {2017-05-08},
	journal = {Synthese},
	author = {Frigg, Roman and Reiss, Julian},
	month = aug,
	year = {2009},
	pages = {593--613},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/32RU6VKP/Frigg and Reiss - 2009 - The philosophy of simulation hot new issues or sa.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/TV9G8RW2/s11229-008-9438-z.html:text/html}
}

@book{banks_discrete-event_2013,
	title = {Discrete-{Event} {System} {Simulation}: {Pearson} {New} {International} {Edition}},
	isbn = {978-1-292-03726-4},
	shorttitle = {Discrete-{Event} {System} {Simulation}},
	abstract = {For junior- and senior-level simulation courses in engineering, business, or computer science.While most books on simulation focus on particular software tools, Discrete Event System Simulation examines the principles of modeling and analysis that translate to all such tools. This language-independent text explains the basic aspects of the technology, including the proper collection and analysis of data, the use of analytic techniques, verification and validation of models, and designing simulation experiments. It offers an up-to-date treatment of simulation of manufacturing and material handling systems, computer systems, and computer networks. Students and instructors will find a variety of resources at the associated website, www.bcnn.net/, including simulation source code for download, additional exercises and solutions, web links and errata.},
	language = {en},
	publisher = {Pearson Higher Ed},
	author = {Banks, Jerry and Carson, John S. and Nelson, Barry L. and Nicol, David M.},
	month = aug,
	year = {2013},
	note = {Google-Books-ID: JiWpBwAAQBAJ},
	keywords = {Technology \& Engineering / Engineering (General)}
}

@book{sokolowski_principles_2009,
	title = {Principles of {Modeling} and {Simulation}: {A} {Multidisciplinary} {Approach}},
	isbn = {978-0-470-28943-3},
	shorttitle = {Principles of {Modeling} and {Simulation}},
	abstract = {Explores wide-ranging applications of modeling and simulation techniques that allow readers to conduct research and ask "What if??" Principles of Modeling and Simulation: A Multidisciplinary Approach is the first book to provide an introduction to modeling and simulation techniques across diverse areas of study. Numerous researchers from the fields of social science, engineering, computer science, and business have collaborated on this work to explore the multifaceted uses of computational modeling while illustrating their applications in common spreadsheets. The book is organized into three succinct parts: Principles of Modeling and Simulation provides a brief history of modeling and simulation, outlines its many functions, and explores the advantages and disadvantages of using models in problem solving. Two major reasons to employ modeling and simulation are illustrated through the study of a specific problem in conjunction with the use of related applications, thus gaining insight into complex concepts. Theoretical Underpinnings examines various modeling techniques and introduces readers to two significant simulation concepts: discrete event simulation and simulation of continuous systems. This section details the two primary methods in which humans interface with simulations, and it also distinguishes the meaning, importance, and significance of verification and validation. Practical Domains delves into specific topics related to transportation, business, medicine, social science, and enterprise decision support. The challenges of modeling and simulation are discussed, along with advanced applied principles of modeling and simulation such as representation techniques, integration into the application infrastructure, and emerging technologies. With its accessible style and wealth of real-world examples, Principles of Modeling and Simulation: A Multidisciplinary Approach is a valuable book for modeling and simulation courses at the upper-undergraduate and graduate levels. It is also an indispensable reference for researchers and practitioners working in statistics, mathematics, engineering, computer science, economics, and the social sciences who would like to further develop their understanding and knowledge of the field.},
	language = {en},
	publisher = {Wiley},
	author = {Sokolowski, John A. and Banks, Catherine M.},
	month = feb,
	year = {2009},
	note = {Google-Books-ID: wOOikQEACAAJ},
	keywords = {Mathematics / Probability \& Statistics / General, Mathematics / Probability \& Statistics / Stochastic Processes}
}

@book{jerry_banks_discrete-event_2000,
	edition = {3},
	title = {Discrete-{Event} {System} {Simulation} (3rd {Edition})},
	isbn = {0-13-088702-1},
	url = {http://www.amazon.com/Discrete-Event-System-Simulation-Jerry-Banks/dp/0130887021},
	publisher = {Prentice Hall},
	author = {{Jerry Banks} and {John S. Carson} and {Barry L. Nelson} and {David M. Nicol}},
	year = {2000},
	keywords = {discrete event foundation simulation system}
}

@misc{noauthor_discrete-event_nodate,
	title = {Discrete-{Event} {System} {Simulation} (3rd {Edition}) {\textbar} {BibSonomy}},
	url = {https://www.bibsonomy.org/bibtex/2db2e527f84b3f892c8036fc262e088e1/joergh},
	urldate = {2017-05-08},
	file = {Discrete-Event System Simulation (3rd Edition) | BibSonomy:/home/io.nathan/Zotero/storage/V6863ZPA/joergh.html:text/html}
}

@techreport{axelrod_guide_2006,
	type = {Staff {General} {Research} {Papers} {Archive}},
	title = {A {Guide} for {Newcomers} to {Agent}-{Based} {Modeling} in the {Social} {Sciences}},
	url = {http://econpapers.repec.org/paper/isugenres/12515.htm},
	abstract = {This guide provides pointers to introductory readings, software, and other materials to help newcomers become acquainted with agent-based modeling in the social sciences. Related work can be accessed at: http://www2.econ.iastate.edu/tesfatsi/ace.htm},
	urldate = {2017-05-08},
	institution = {Iowa State University, Department of Economics},
	author = {Axelrod, Robert and Tesfatsion, Leigh},
	month = jan,
	year = {2006},
	keywords = {Agent-based modeling, social sciences},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/GKPTG7ED/12515.html:text/html}
}

@article{tesfatsion_modeling_2017,
	title = {Modeling {Economic} {Systems} as {Locally}-{Constructive} {Sequential} {Games}},
	url = {http://lib.dr.iastate.edu/econ_workingpapers/23},
	journal = {Economics Working Papers},
	author = {Tesfatsion, Leigh},
	month = apr,
	year = {2017},
	file = {"Modeling Economic Systems as Locally-Constructive Sequential Games" by Leigh Tesfatsion:/home/io.nathan/Zotero/storage/TR7J23Z3/23.html:text/html}
}

@book{weiss_multiagent_2013,
	title = {Multiagent {Systems}},
	isbn = {978-0-262-01889-0},
	abstract = {Multiagent systems are made up of multiple interacting intelligent agents -- computational entities to some degree autonomous and able to cooperate, compete, communicate, act flexibly, and exercise control over their behavior within the frame of their objectives. They are the enabling technology for a wide range of advanced applications relying on distributed and parallel processing of data, information, and knowledge relevant in domains ranging from industrial manufacturing to e-commerce to health care. This book offers a state-of-the-art introduction to multiagent systems, covering the field in both breadth and depth, and treating both theory and practice. It is suitable for classroom use or independent study. This second edition has been completely revised, capturing the tremendous developments in multiagent systems since the first edition appeared in 1999. Sixteen of the book's seventeen chapters were written for this edition; all chapters are by leaders in the field, with each author contributing to the broad base of knowledge and experience on which the book rests. The book covers basic concepts of computational agency from the perspective of both individual agents and agent organizations; communication among agents; coordination among agents; distributed cognition; development and engineering of multiagent systems; and background knowledge in logics and game theory. Each chapter includes references, many illustrations and examples, and exercises of varying degrees of difficulty. The chapters and the overall book are designed to be self-contained and understandable without additional material. Supplemental resources are available on the book's Web site. Contributors:Rafael Bordini, Felix Brandt, Amit Chopra, Vincent Conitzer, Virginia Dignum, Ju ̈rgen Dix, Ed Durfee, Edith Elkind, Ulle Endriss, Alessandro Farinelli, Shaheen Fatima, Michael Fisher, Nicholas R. Jennings, Kevin Leyton-Brown, Evangelos Markakis, Lin Padgham, Julian Padget, Iyad Rahwan, Talal Rahwan, Alex Rogers, Jordi Sabater-Mir, Yoav Shoham, Munindar P. Singh, Kagan Tumer, Karl Tuyls, Wiebe van der Hoek, Laurent Vercouter, Meritxell Vinyals, Michael Winikoff, Michael Wooldridge, Shlomo Zilberstein},
	language = {en},
	publisher = {MIT Press},
	author = {Weiss, Gerhard},
	month = mar,
	year = {2013},
	note = {Google-Books-ID: WY36AQAAQBAJ},
	keywords = {Computers / Intelligence (AI) \& Semantics, Technology \& Engineering / Robotics}
}

@incollection{epstein_chapter_2006,
	title = {Chapter 34 {Remarks} on the {Foundations} of {Agent}-{Based} {Generative} {Social} {Science}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020344},
	abstract = {This chapter treats a variety of epistemological issues surrounding generative explanation in the social sciences, and discusses the role of agent-based computational models in generative social science.},
	urldate = {2017-05-05},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {Epstein, Joshua M.},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	doi = {10.1016/S1574-0021(05)02034-4},
	keywords = {Agent-based modeling, generative social science, philosophy of social science},
	pages = {1585--1604},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/TA4A87QT/Epstein - 2006 - Chapter 34 Remarks on the Foundations of Agent-Bas.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/CT5Z2KXD/S1574002105020344.html:text/html}
}

@incollection{axelrod_advancing_1997,
	title = {Advancing the {Art} of {Simulation} in the {Social} {Sciences}},
	url = {https://link.springer.com/chapter/10.1007/978-3-662-03366-1_2},
	abstract = {Advancing the state of the art of simulation in the social sciences requires appreciating the unique value of simulation as a third way of doing science, in contrast to both induction and deduction. This essay offers advice for doing simulation research, focusing on the programming of a simulation model, analyzing the results and sharing the results with others. Replicating other people’s simulations gets special emphasis, with examples of the procedures and difficulties involved in the process of replication. Finally, suggestions are offered for building of a community of social scientists who do simulation.},
	language = {en},
	urldate = {2017-05-05},
	booktitle = {Simulating {Social} {Phenomena}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Axelrod, Robert},
	year = {1997},
	doi = {10.1007/978-3-662-03366-1_2},
	pages = {21--40},
	file = {Snapshot:/home/io.nathan/Zotero/storage/HRJFZEDQ/978-3-662-03366-1_2.html:text/html}
}

@mastersthesis{evensen_extensible_2010,
	address = {Göteborg},
	title = {An {Extensible} and {Scalable} {Agent}-{Based} {Simulation} of {Barter} {Economics}},
	url = {https://gupea.ub.gu.se/handle/2077/22063},
	abstract = {This thesis project studies a simulation of decentralised bilateral exchange economics, in which prices are private information and trading decisions are left to individual agents. We set to re-engineer the model devised by Herbert Gintis and take his Delphi version as the basis for providing a new, portable barter economics simulation tool in Java. By introducing some extension points for new agent and market behaviours, we provide simple means to implement variations on the original model. In particular, our system could be used to study the emergent properties of heterogeneous agent behaviours. Through the addition of some default visualisation models we provide means for an improved intuitive understanding of the interaction between individual agents. The multi-agent simulation library MASON is used as the underlying simulation platform. The results of running the software with various parameters are compared to the results from the original version to confirm the convergence of the two programs.Cover: Relative private price visualisation for bartering agents.},
	school = {Chalmers University of Technology},
	author = {Evensen, Pelle and Märdin, Mait},
	year = {2010}
}

@book{colell_microeconomic_1995,
	title = {Microeconomic {Theory}},
	abstract = {Individual decision making. Game theory. Market equilibrium and market failure. Welfare economics and incentives.},
	language = {en},
	publisher = {Oxford University Press},
	author = {Colell, Andreu Mas},
	year = {1995},
	note = {Google-Books-ID: dFS2AQAACAAJ}
}

@techreport{axelrod_convergence_1995,
	type = {Working {Paper}},
	title = {The {Convergence} and {Stability} of {Cultures}: {Local} {Convergence} and {Global} {Polarization}},
	shorttitle = {The {Convergence} and {Stability} of {Cultures}},
	url = {http://econpapers.repec.org/paper/wopsafiwp/95-03-028.htm},
	urldate = {2017-05-05},
	institution = {Santa Fe Institute},
	author = {Axelrod, Robert},
	month = mar,
	year = {1995},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/FDSQ22W8/95-03-028.html:text/html}
}

@article{axelrod_dissemination_1997,
	title = {The {Dissemination} of {Culture}: {A} {Model} with {Local} {Convergence} and {Global} {Polarization}},
	volume = {41},
	issn = {0022-0027},
	shorttitle = {The {Dissemination} of {Culture}},
	url = {http://www.jstor.org/stable/174371},
	abstract = {Despite tendencies toward convergence, differences between individuals and groups continue to exist in beliefs, attitudes, and behavior. An agent-based adaptive model reveals the effects of a mechanism of convergent social influence. The actors are placed at fixed sites. The basic premise is that the more similar an actor is to a neighbor, the more likely that that actor will adopt one of the neighbor's traits. Unlike previous models of social influence or cultural change that treat features one at a time, the proposed model takes into account the interaction between different features. The model illustrates how local convergence can generate global polarization. Simulations show that the number of stable homogeneous regions decreases with the number of features, increases with the number of alternative traits per feature, decreases with the range of interaction, and (most surprisingly) decreases when the geographic territory grows beyond a certain size.},
	number = {2},
	urldate = {2017-05-05},
	journal = {The Journal of Conflict Resolution},
	author = {Axelrod, Robert},
	year = {1997},
	pages = {203--226}
}

@article{axtell_aligning_1996,
	title = {Aligning simulation models: {A} case study and results},
	volume = {1},
	issn = {1381-298X, 1572-9346},
	shorttitle = {Aligning simulation models},
	url = {https://link.springer.com/article/10.1007/BF01299065},
	doi = {10.1007/BF01299065},
	abstract = {This paper develops the concepts and methods of a process we will call “alignment of computational models” or “docking” for short. Alignment is needed to determine whether two models can produce the same results, which in turn is the basis for critical experiments and for tests of whether one model can subsume another. We illustrate our concepts and methods using as a target a model of cultural transmission built by Axelrod. For comparison we use the Sugarscape model developed by Epstein and Axtell.The two models differ in many ways and, to date, have been employed with quite different aims. The Axelrod model has been used principally for intensive experimentation with parameter variation, and includes only one mechanism. In contrast, the Sugarscape model has been used primarily to generate rich “artificial histories”, scenarios that display stylized facts of interest, such as cultural differentiation driven by many different mechansims including resource availability, migration, trade, and combat.The Sugarscape model was modified so as to reproduce the results of the Axelrod cultural model. Among the questions we address are: what does it mean for two models to be equivalent, how can different standards of equivalence be statistically evaluated, and how do subtle differences in model design affect the results? After attaining a “docking” of the two models, the richer set of mechanisms of the Sugarscape model is used to provide two experiments in sensitivity analysis for the cultural rule of Axelrod's model.Our generally positive experience in this enterprise has suggested that it could be beneficial if alignment and equivalence testing were more widely practiced among computational modelers.},
	language = {en},
	number = {2},
	urldate = {2017-05-04},
	journal = {Computational \& Mathematical Organization Theory},
	author = {Axtell, Robert and Axelrod, Robert and Epstein, Joshua M. and Cohen, Michael D.},
	month = feb,
	year = {1996},
	pages = {123--141},
	file = {Snapshot:/home/io.nathan/Zotero/storage/JKD9FRC5/BF01299065.html:text/html}
}

@book{epstein_generative_2012,
	title = {Generative {Social} {Science}: {Studies} in {Agent}-{Based} {Computational} {Modeling}},
	isbn = {978-1-4008-4287-2},
	shorttitle = {Generative {Social} {Science}},
	abstract = {Agent-based computational modeling is changing the face of social science. In Generative Social Science, Joshua Epstein argues that this powerful, novel technique permits the social sciences to meet a fundamentally new standard of explanation, in which one "grows" the phenomenon of interest in an artificial society of interacting agents: heterogeneous, boundedly rational actors, represented as mathematical or software objects. After elaborating this notion of generative explanation in a pair of overarching foundational chapters, Epstein illustrates it with examples chosen from such far-flung fields as archaeology, civil conflict, the evolution of norms, epidemiology, retirement economics, spatial games, and organizational adaptation. In elegant chapter preludes, he explains how these widely diverse modeling studies support his sweeping case for generative explanation.  This book represents a powerful consolidation of Epstein's interdisciplinary research activities in the decade since the publication of his and Robert Axtell's landmark volume, Growing Artificial Societies. Beautifully illustrated, Generative Social Science includes a CD that contains animated movies of core model runs, and programs allowing users to easily change assumptions and explore models, making it an invaluable text for courses in modeling at all levels.},
	language = {en},
	publisher = {Princeton University Press},
	author = {Epstein, Joshua M.},
	month = jan,
	year = {2012},
	note = {Google-Books-ID: 6jPiuMbKKJ4C},
	keywords = {Business \& Economics / Economics / Theory, Mathematics / Applied, Social Science / Research}
}

@misc{noauthor_generative_nodate,
	title = {Generative {Social} {Science}},
	url = {http://press.princeton.edu/titles/8277.html},
	abstract = {Book description},
	urldate = {2017-05-04},
	journal = {Princeton University Press},
	file = {Snapshot:/home/io.nathan/Zotero/storage/8JUS25H4/8277.html:text/html}
}

@book{epstein_agent_zero:_2014,
	title = {Agent\_Zero: {Toward} {Neurocognitive} {Foundations} for {Generative} {Social} {Science}},
	isbn = {978-1-4008-4825-6},
	shorttitle = {Agent\_Zero},
	abstract = {The Final Volume of the Groundbreaking Trilogy on Agent-Based ModelingIn this pioneering synthesis, Joshua Epstein introduces a new theoretical entity: Agent\_Zero. This software individual, or "agent," is endowed with distinct emotional/affective, cognitive/deliberative, and social modules. Grounded in contemporary neuroscience, these internal components interact to generate observed, often far-from-rational, individual behavior. When multiple agents of this new type move and interact spatially, they collectively generate an astonishing range of dynamics spanning the fields of social conflict, psychology, public health, law, network science, and economics.Epstein weaves a computational tapestry with threads from Plato, Hume, Darwin, Pavlov, Smith, Tolstoy, Marx, James, and Dostoevsky, among others. This transformative synthesis of social philosophy, cognitive neuroscience, and agent-based modeling will fascinate scholars and students of every stripe. Epstein's computer programs are provided in the book or on its Princeton University Press website, along with movies of his "computational parables." Agent\_Zero is a signal departure in what it includes (e.g., a new synthesis of neurally grounded internal modules), what it eschews (e.g., standard behavioral imitation), the phenomena it generates (from genocide to financial panic), and the modeling arsenal it offers the scientific community. For generative social science, Agent\_Zero presents a groundbreaking vision and the tools to realize it.},
	language = {en},
	publisher = {Princeton University Press},
	author = {Epstein, Joshua M.},
	month = feb,
	year = {2014},
	note = {Google-Books-ID: VJEpAgAAQBAJ},
	keywords = {Mathematics / Applied, Computers / Data Modeling \& Design, Mathematics / Linear \& Nonlinear Programming, Mathematics / Logic, Psychology / Cognitive Psychology \& Cognition, Science / Cognitive Science, Social Science / General}
}

@misc{noauthor_agent_zero_nodate,
	title = {Agent\_Zero},
	url = {http://press.princeton.edu/titles/10169.html},
	abstract = {Book description},
	urldate = {2017-05-04},
	journal = {Princeton University Press},
	file = {Snapshot:/home/io.nathan/Zotero/storage/6MJFCEE6/10169.html:text/html}
}

@incollection{axelrod_chapter_2006,
	title = {Chapter 33 {Agent}-based {Modeling} as a {Bridge} {Between} {Disciplines}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020332},
	abstract = {Using the author's own experiences, this chapter shows how agent-based modeling (ABM) can address research questions common to many disciplines, facilitate interdisciplinary collaboration, provide a useful multidisciplinary tool when the math is intractable, and reveal unity across disciplines. While ABM can be a hard sell, convergence within the agent-based community can enhance the interdisciplinary value of the methodology.},
	urldate = {2017-05-04},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {Axelrod, Robert},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	doi = {10.1016/S1574-0021(05)02033-2},
	keywords = {Agent-based models, evolutionary biology, interdisciplinary research, prisoner's dilemma},
	pages = {1565--1584},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/J9MT7SBQ/Axelrod - 2006 - Chapter 33 Agent-based Modeling as a Bridge Betwee.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/99UWITWZ/S1574002105020332.html:text/html}
}

@misc{center_for_history_and_new_media_zotero_nodate,
	title = {Zotero {Quick} {Start} {Guide}},
	url = {http://zotero.org/support/quick_start_guide},
	author = {{Center for History and New Media}}
}

@article{wadler_how_1997,
	title = {How to {Declare} an {Imperative}},
	volume = {29},
	issn = {0360-0300},
	url = {http://doi.acm.org/10.1145/262009.262011},
	doi = {10.1145/262009.262011},
	abstract = {How can we integrate interaction into a purely declarative language? This tutorial describes a solution to this problem based on a monad. The solution has been implemented in the functional language Haskell and the declarative language Escher. Comparisons are given with other approaches to interaction based on synchronous streams, continuations, linear logic, and side effects.},
	number = {3},
	urldate = {2017-04-24},
	journal = {ACM Comput. Surv.},
	author = {Wadler, Philip},
	month = sep,
	year = {1997},
	keywords = {functional programming, Haskell, monad},
	pages = {240--263},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/TQXPH76F/Wadler - 1997 - How to Declare an Imperative.pdf:application/pdf}
}

@misc{jansen_introduction_2012,
	title = {Introduction to {Agent}-{Based} {Modeling}},
	url = {https://www.openabm.org/book/introduction-agent-based-modeling},
	journal = {Introduction to Agent-Based Modeling},
	author = {Jansen, Marco},
	year = {2012}
}

@inproceedings{bersini_asynchrony_1994,
	title = {Asynchrony induces stability in cellular automata based models},
	abstract = {Two cellular automata based computer simulations: an immune network model on one hand and the classical game of life on the other hand, despite similar algorithmic presentations, exhibit surprisingly distinct time evolution: respectively a fixed point and the complex dynamics characteristic of class IV cellular automata. At the conclusion of a complete investigation to understand better which of the algorithmic differences is responsible for this behavioural difference, we provide evidence that asynchronous rather than synchronous updating turns out to be the key factor. Experimenting and discussing in more detail this stability induction, we show that the responsibility of asynchrony for freezing game of life type of simulation can be theoretically justified in some particular cases by finding an associate Lyapunov function whose monotonous tendency proves the stability. The implications of such sensitivity to the updating mechanism for the future of cellular automata based models are reviewed. 1},
	booktitle = {In {Proceedings} of {Artificial} {Life} {IV}},
	publisher = {MIT Press},
	author = {Bersini, Hugues and Detours, Vincent},
	year = {1994},
	pages = {382--387},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/JXTSDFE6/Bersini and Detours - 1994 - Asynchrony induces stability in cellular automata .pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/92P3NHUW/summary.html:text/html}
}

@article{niazi_agent-based_2011,
	title = {Agent-based {Computing} from {Multi}-agent {Systems} to {Agent}-based {Models}: {A} {Visual} {Survey}},
	volume = {89},
	issn = {0138-9130},
	shorttitle = {Agent-based {Computing} from {Multi}-agent {Systems} to {Agent}-based {Models}},
	url = {http://dx.doi.org/10.1007/s11192-011-0468-9},
	doi = {10.1007/s11192-011-0468-9},
	abstract = {Agent-based computing is a diverse research domain concerned with the building of intelligent software based on the concept of "agents". In this paper, we use Scientometric analysis to analyze all sub-domains of agent-based computing. Our data consists of 1,064 journal articles indexed in the ISI web of knowledge published during a 20 year period: 1990---2010. These were retrieved using a topic search with various keywords commonly used in sub-domains of agent-based computing. In our proposed approach, we have employed a combination of two applications for analysis, namely Network Workbench and CiteSpace--wherein Network Workbench allowed for the analysis of complex network aspects of the domain, detailed visualization-based analysis of the bibliographic data was performed using CiteSpace. Our results include the identification of the largest cluster based on keywords, the timeline of publication of index terms, the core journals and key subject categories. We also identify the core authors, top countries of origin of the manuscripts along with core research institutes. Finally, our results have interestingly revealed the strong presence of agent-based computing in a number of non-computing related scientific domains including Life Sciences, Ecological Sciences and Social Sciences.},
	number = {2},
	urldate = {2017-03-27},
	journal = {Scientometrics},
	author = {Niazi, Muaz and Hussain, Amir},
	month = nov,
	year = {2011},
	keywords = {Agent-based modeling, CiteSpace, Individual-based modeling, Multiagent systems, Scientometrics, Visualization},
	pages = {479--499}
}

@article{page_incentives_1997,
	title = {On {Incentives} and {Updating} in {Agent} {Based} {Models}},
	volume = {10},
	issn = {0927-7099},
	url = {http://dx.doi.org/10.1023/A:1008625524072},
	doi = {10.1023/A:1008625524072},
	abstract = {This paper introduces the concept of incentive based asynchronous updating
in which the order of updating is determined by incentives. Previously,
asynchronous updating has been shown to yield greater stability than
synchromous updating for a variety of dynamical systems. However, in
those models the order of updating is random. When incentives determine
the ordering, the dynamics and end states change. For a conformity model
on a two dimensional cellular automata, incentive based asynchronous updating
yields greater linear disparity. Fot the game of life, it results in much
greater sensitivity to initial conditions.},
	number = {1},
	urldate = {2017-03-27},
	journal = {Comput. Econ.},
	author = {Page, Scott E.},
	month = feb,
	year = {1997},
	keywords = {cellular automata, complex systems, conformity, dynamical systems, game of life},
	pages = {67--87}
}

@article{polhill_what_2006,
	title = {What {Every} {Agent}-based {Modeller} {Should} {Know} {About} {Floating} {Point} {Arithmetic}},
	volume = {21},
	issn = {1364-8152},
	url = {http://dx.doi.org/10.1016/j.envsoft.2004.10.011},
	doi = {10.1016/j.envsoft.2004.10.011},
	abstract = {Floating point arithmetic is a subject all too often ignored, yet, for agent-based models in particular, it has the potential to create misleading results, and even to influence emergent outcomes of the model. Using a simple demonstration model, this paper illustrates the problems that accumulated floating point errors can cause, and compares a number of techniques that might be used to address them. We show that inexact representation of parameter values, imprecision in calculation results, and differing implementations of mathematical expressions can significantly influence the behaviour of the model, and create issues for replicating results, though they do not necessarily do so. None of the techniques offer a failsafe approach that can be applied in any situation, though interval arithmetic is the most promising.},
	number = {3},
	urldate = {2017-03-27},
	journal = {Environ. Model. Softw.},
	author = {Polhill, J. Gary and Izquierdo, Luis R. and Gotts, Nicholas M.},
	month = mar,
	year = {2006},
	keywords = {Agent-based modelling, Emergence, Floating point arithmetic, Interval arithmetic},
	pages = {283--309}
}

@book{railsback_agent-based_2011,
	title = {Agent-{Based} and {Individual}-{Based} {Modeling}: {A} {Practical} {Introduction}},
	isbn = {978-0-691-13674-5},
	publisher = {Princeton University Press},
	author = {Railsback, Steve and Grimm, Volker},
	year = {2011}
}

@article{schelling_dynamic_1971,
	title = {Dynamic models of segregation},
	volume = {1},
	journal = {Journal of Mathematical Sociology},
	author = {Schelling, Thomas},
	year = {1971},
	keywords = {abm, models}
}

@techreport{baas_emergence_1997,
	type = {Working {Paper}},
	title = {On {Emergence} and {Explanation}},
	url = {http://econpapers.repec.org/paper/wopsafiwp/97-02-008.htm},
	abstract = {Emergence is a universal phenomenon that can be defined mathematically in a very general way. This is useful for the study of scientifically legitimate explanations of complex systems, here defined as hyperstructures. A requirement is that the observation mechanisms are considered within the general framework. Two notions of emergence are defined, and specific examples of these are discussed.},
	urldate = {2017-03-13},
	institution = {Santa Fe Institute},
	author = {Baas, Nils A. and Emmeche, Claus},
	month = feb,
	year = {1997},
	keywords = {explanation, Emergence, category theory, hyperstructure},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/FPZKEJVP/97-02-008.html:text/html}
}

@article{hutton_tutorial_1999,
	title = {A {Tutorial} on the {Universality} and {Expressiveness} of {Fold}},
	volume = {9},
	issn = {0956-7968},
	url = {http://dx.doi.org/10.1017/S0956796899003500},
	doi = {10.1017/S0956796899003500},
	abstract = {In functional programming, fold is a standard operator that encapsulates a simple pattern of recursion for processing lists. This article is a tutorial on two key aspects of the fold operator for lists. First of all, we emphasize the use of the universal property of fold both as a proof principle that avoids the need for inductive proofs, and as a definition principle that guides the transformation of recursive functions into definitions using fold. Secondly, we show that even though the pattern of recursion encapsulated by fold is simple, in a language with tuples and functions as first-class values the fold operator has greater expressive power than might first be expected.},
	number = {4},
	urldate = {2017-03-06},
	journal = {J. Funct. Program.},
	author = {Hutton, Graham},
	month = jul,
	year = {1999},
	pages = {355--372}
}

@inproceedings{gilmer_recursive_2000,
	address = {San Diego, CA, USA},
	series = {{WSC} '00},
	title = {Recursive {Simulation} to {Aid} {Models} of {Decision} {Making}},
	isbn = {978-0-7803-6582-7},
	url = {http://dl.acm.org/citation.cfm?id=510378.510515},
	abstract = {Recursive simulation involves a simulation, or an entity in the simulation, creating another instance of the same simulation, running it and using its results. This is particularly applicable to decisionmaking in a military simulation. Simulation can be used by the simulated command elements to evaluate the implications of the possible choices. The simulation that is already running provides a conveniently available evaluation tool if it can be run recursively. This has been done with the "eaglet" simulation, and data collected that indicates that the quality of decisionmaking by the simulated command elements is improved.},
	urldate = {2017-03-06},
	booktitle = {Proceedings of the 32Nd {Conference} on {Winter} {Simulation}},
	publisher = {Society for Computer Simulation International},
	author = {Gilmer, Jr., John B. and Sullivan, Frederick J.},
	year = {2000},
	pages = {958--963},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/2SBWWNJF/Gilmer and Sullivan - 2000 - Recursive Simulation to Aid Models of Decision Mak.pdf:application/pdf}
}

@incollection{marks_chapter_2006,
	title = {Chapter 27 {Market} {Design} {Using} {Agent}-{Based} {Models}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020277},
	abstract = {This chapter explores the state of the emerging practice of designing markets by the use of agent-based modeling, with special reference to electricity markets and computerized (on-line) markets, perhaps including real-life electronic agents as well as human traders. The paper first reviews the use of evolutionary and agent-based techniques of analyzing market behaviors and market mechanisms, and economic models of learning, comparing genetic algorithms with reinforcement learning. Ideal design would be direct optimization of an objective function, but in practice the complexity of markets and traders' behavior prevents this, except in special circumstances. Instead, iterative analysis, subject to design criteria trade-offs, using autonomous self-interested agents, mimics the bottom-up evolution of historical market mechanisms by trial and error. The chapter highlights ten papers that exemplify recent progress in agent-based evolutionary analysis and design of markets in silico, using electricity markets and on-line double auctions as illustrations. A monopoly sealed-bid auction is examined in the tenth paper, and a new auction mechanism is evolved and analyzed. The chapter concludes that, as modeling the learning and behavior of traders improves, and as the software and hardware available for modeling and analysis improves, the techniques will provide ever greater insights into improving the designs of existing markets, and facilitating the design of new markets.},
	urldate = {2017-03-01},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {Marks, Robert},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	doi = {10.1016/S1574-0021(05)02027-7},
	keywords = {analysis, auctions, design, electricity, Learning, market, on-line},
	pages = {1339--1380},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/Q5VMSRDC/Marks - 2006 - Chapter 27 Market Design Using Agent-Based Models.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/IFMHUKM6/S1574002105020277.html:text/html}
}

@incollection{mackie-mason_chapter_2006,
	title = {Chapter 28 {Automated} {Markets} and {Trading} {Agents}},
	volume = {2},
	url = {http://www.sciencedirect.com/science/article/pii/S1574002105020289},
	abstract = {Computer automation has the potential, just starting to be realized, of transforming the design and operation of markets, and the behaviors of agents trading in them. We discuss the possibilities for automating markets, presenting a broad conceptual framework covering resource allocation as well as enabling marketplace services such as search and transaction execution. One of the most intriguing opportunities is provided by markets implementing computationally sophisticated negotiation mechanisms, for example combinatorial auctions. An important theme that emerges from the literature is the centrality of design decisions about matching the domain of goods over which a mechanism operates to the domain over which agents have preferences. When the match is imperfect (as is almost inevitable), the market game induced by the mechanism is analytically intractable, and the literature provides an incomplete characterization of rational bidding policies. A review of the literature suggests that much of our existing knowledge comes from computational simulations, including controlled studies of abstract market designs (e.g., simultaneous ascending auctions), and research tournaments comparing agent strategies in a variety of market scenarios. An empirical game-theoretic methodology combines the advantages of simulation, agent-based modeling, and statistical and game-theoretic analysis.},
	urldate = {2017-03-01},
	booktitle = {Handbook of {Computational} {Economics}},
	publisher = {Elsevier},
	author = {MacKie-Mason, Jeffrey K. and Wellman, Michael P.},
	editor = {Judd, L. Tesfatsion {and} K. L.},
	year = {2006},
	doi = {10.1016/S1574-0021(05)02028-9},
	keywords = {automated markets, computational markets, Mechanism design, trading agents},
	pages = {1381--1431},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/6WBNDQMP/MacKie-Mason and Wellman - 2006 - Chapter 28 Automated Markets and Trading Agents.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/ZJBNSZG5/S1574002105020289.html:text/html}
}

@book{epstein_growing_1996,
	address = {Washington, DC, USA},
	title = {Growing {Artificial} {Societies}: {Social} {Science} from the {Bottom} {Up}},
	isbn = {978-0-262-55025-3},
	shorttitle = {Growing {Artificial} {Societies}},
	publisher = {The Brookings Institution},
	author = {Epstein, Joshua M. and Axtell, Robert},
	year = {1996}
}

@article{steinhart_theological_2010,
	title = {Theological {Implications} of the {Simulation} {Argument}},
	volume = {10},
	abstract = {Nick Bostrom’s Simulation Argument (SA) has many intriguing theological implications. We work out some of them here. We show how the SA can be used to develop novel versions of the Cosmological and Design Arguments. We then develop some of the affinities between Bostrom’s naturalistic theogony and more traditional theological topics. We look at the resurrection of the body and at theodicy. We conclude with some reflections on the relations between the SA and Neoplatonism (friendly) and between the SA and theism (less friendly).},
	journal = {Ars Disputandi: The Online Journal for Philosophy of Religion},
	author = {Steinhart, Eric},
	year = {2010},
	pages = {23--37}
}

@incollection{irtem_simulation_1978,
	address = {Berlin, Heidelberg},
	title = {Simulation of {Free} {Will}},
	isbn = {978-3-642-93104-8},
	url = {http://dx.doi.org/10.1007/978-3-642-93104-8_92},
	booktitle = {Current {Topics} in {Cybernetics} and {Systems}: {Proceedings} of the {Fourth} {International} {Congress} of {Cybernetics} \& {Systems} 21–25 {August}, 1978 {Amsterdam}, {The} {Netherlands}},
	publisher = {Springer Berlin Heidelberg},
	author = {Irtem, Ali},
	editor = {Rose, J.},
	year = {1978},
	doi = {10.1007/978-3-642-93104-8_92},
	pages = {148--149}
}

@article{bostrom_are_2003,
	title = {Are {We} {Living} in a {Computer} {Simulation}?},
	volume = {53},
	issn = {1467-9213},
	url = {http://dx.doi.org/10.1111/1467-9213.00309},
	doi = {10.1111/1467-9213.00309},
	number = {211},
	journal = {The Philosophical Quarterly},
	author = {Bostrom, Nick},
	year = {2003},
	pages = {243--255}
}

@book{noauthor_emergent_nodate,
	title = {Emergent {Macroeconomics} - {An} {Agent}-{Based} {Approach} to {Business} {\textbackslash}textbar {Domenico} {Gatti} {\textbackslash}textbar {Springer}},
	url = {http://www.springer.com/gp/book/9788847007246},
	abstract = {This book contributes substantively to the current state-of-the-art of macroeconomics by providing a method for building models in which business cycles...},
	urldate = {2016-12-12},
	file = {Snapshot:/home/io.nathan/Zotero/storage/W6DNT9RZ/9788847007246.html:text/html}
}

@incollection{klugl_amason:_2013,
	address = {Berlin, Heidelberg},
	title = {{AMASON}: {Abstract} {Meta}-model for {Agent}-{Based} {SimulatiON}},
	isbn = {978-3-642-40776-5},
	url = {http://dx.doi.org/10.1007/978-3-642-40776-5_11},
	booktitle = {Multiagent {System} {Technologies}: 11th {German} {Conference}, {MATES} 2013, {Koblenz}, {Germany}, {September} 16-20, 2013. {Proceedings}},
	publisher = {Springer Berlin Heidelberg},
	author = {Klügl, Franziska and Davidsson, Paul},
	editor = {Klusch, Matthias and Thimm, Matthias and Paprzycki, Marcin},
	year = {2013},
	doi = {10.1007/978-3-642-40776-5_11},
	pages = {101--114}
}

@book{noauthor_emergent_nodate-1,
	title = {Emergent {Macroeconomics} - {An} {Agent}-{Based} {Approach} to {Business} {\textbar} {Domenico} {Gatti} {\textbar} {Springer}},
	url = {http://www.springer.com/gp/book/9788847007246},
	abstract = {This book contributes substantively to the current state-of-the-art of macroeconomics by providing a method for building models in which business cycles...},
	urldate = {2016-12-12},
	file = {Snapshot:/home/io.nathan/Zotero/storage/XS9QUFRV/9788847007246.html:text/html}
}

@misc{noauthor_zotero_nodate,
	title = {Zotero {\textbar} {Downloads}},
	url = {https://www.zotero.org/download/},
	urldate = {2018-01-08}
}

@book{russell_artificial_2010,
	title = {Artificial {Intelligence}: {A} {Modern} {Approach}},
	isbn = {978-0-13-604259-4},
	shorttitle = {Artificial {Intelligence}},
	abstract = {Artificial Intelligence: A Modern Approach, 3e offers the most comprehensive, up-to-date introduction to the theory and practice of artificial intelligence. Number one in its field, this textbook is ideal for one or two-semester, undergraduate or graduate-level courses in Artificial Intelligence.   Dr. Peter Norvig, contributing Artificial Intelligence author and Professor Sebastian Thrun, a Pearson author are offering a free online course at Stanford University on artificial intelligence.    According to an article in  The New York Times , the course on artificial intelligence is “one of three being offered experimentally by the Stanford computer science department to extend technology knowledge and skills beyond this elite campus to the entire world.” One of the other two courses, an introduction to database software, is being taught by Pearson author Dr. Jennifer Widom.     Artificial Intelligence: A Modern Approach, 3e is available to purchase as an eText for your Kindle™, NOOK™, and the iPhone®/iPad®.    To learn more about the course on artificial intelligence, visit http://www.ai-class.com. To read the full New York Times article, click here.},
	language = {en},
	publisher = {Prentice Hall},
	author = {Russell, Stuart Jonathan and Norvig, Peter},
	year = {2010},
	keywords = {Computers / Intelligence (AI) \& Semantics}
}

@book{bigbee_replicating_2006,
	title = {Replicating the {Classic} {Sugarscape} in {MASON}},
	abstract = {Replication is essential in science and agent-based computational social science is no exception. We present results from a replication of the Sugarscape model (Eptstein and Axtell, 1996) as initially presented in Growing Artificial Societies (GAS). Sugarscape is a classic agent-based model and contemporary simulation toolkits usually only have a partial replication consisting of a few core model rules without documenting simulation outcomes; code supplied with Repast, Swarm, and NetLogo, for example implement very few of the rules in Sugarscape. By contrast, we demonstrate a detailed replication of Sugarscape in the MASON (Multi-Agent Simulator of Neighborhoods and Networks) environment, and describe various outcomes such migration waves. For major outcomes documenteed in GAS, we describe the degree to which we replicated those results and conclude by outlining major challenges in replication activities and the young field of agent-based modeling in general.},
	author = {Bigbee, Tony and Cioffi-revilla, Claudio and Luke, Sean},
	year = {2006},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/5BTVR47Q/Bigbee et al. - 2006 - Replicating the Classic Sugarscape in MASON ∗.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/RLD6PTN7/summary.html:text/html}
}

@misc{noauthor_replicating_nodate,
	title = {Replicating the {Classic} {Sugarscape} in {MASON} - {Semantic} {Scholar}},
	url = {/paper/Replicating-the-Classic-Sugarscape-in-MASON-Bigbee-Cioffi-Revilla/c2963a8c0a0b880d9bbbfa79f9bdb4e077b302d9},
	abstract = {Replication is essential in science and agent-based computational social science is no exception. We present results from a replication of the Sugarscape model (Eptstein and Axtell, 1996) as initially presented in Growing Artificial Societies (GAS ). Sugarscape is a classic agent-based model and contemporary simulation toolkits usually only have a partial replication consisting of a few core model rules without documenting simulation outcomes; code supplied with Repast, Swarm, and NetLogo, for example implement very few of the rules in Sugarscape. By contrast, we demonstrate a detailed replication of Sugarscape in the MASON (Multi-Agent Simulator of Neighborhoods and Networks) environment, and describe various outcomes such migration waves. For major outcomes documenteed in GAS, we describe the degree to which we replicated those results and conclude by outlining major challenges in replication activities and the young field of agent-based modeling in general.},
	urldate = {2017-11-06},
	file = {Snapshot:/home/io.nathan/Zotero/storage/WQDFZR24/c2963a8c0a0b880d9bbbfa79f9bdb4e077b302d9.html:text/html}
}

@article{ahmed_variance_2013,
	title = {Variance in {System} {Dynamics} and {Agent} {Based} {Modelling} {Using} the {SIR} {Model} of {Infectious} {Disease}},
	url = {http://arxiv.org/abs/1307.2001},
	abstract = {Classical deterministic simulations of epidemiological processes, such as those based on System Dynamics, produce a single result based on a fixed set of input parameters with no variance between simulations. Input parameters are subsequently modified on these simulations using Monte-Carlo methods, to understand how changes in the input parameters affect the spread of results for the simulation. Agent Based simulations are able to produce different output results on each run based on knowledge of the local interactions of the underlying agents and without making any changes to the input parameters. In this paper we compare the influence and effect of variation within these two distinct simulation paradigms and show that the Agent Based simulation of the epidemiological SIR (Susceptible, Infectious, and Recovered) model is more effective at capturing the natural variation within SIR compared to an equivalent model using System Dynamics with Monte-Carlo simulation. To demonstrate this effect, the SIR model is implemented using both System Dynamics (with Monte-Carlo simulation) and Agent Based Modelling based on previously published empirical data.},
	urldate = {2017-11-06},
	journal = {arXiv:1307.2001 [cs]},
	author = {Ahmed, Aslam and Greensmith, Julie and Aickelin, Uwe},
	month = jul,
	year = {2013},
	note = {arXiv: 1307.2001},
	keywords = {Computer Science - Multiagent Systems, Computer Science - Computational Engineering, Finance, and Science},
	file = {arXiv\:1307.2001 PDF:/home/io.nathan/Zotero/storage/THX3LNGY/Ahmed et al. - 2013 - Variance in System Dynamics and Agent Based Modell.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/ASY55BL3/1307.html:text/html}
}

@book{enns_its_2010,
	edition = {1st},
	title = {It's a {Nonlinear} {World}},
	isbn = {978-0-387-75338-6},
	abstract = {Drawing examplesfrom mathematics, physics, chemistry, biology, engineering, economics, medicine, politics, and sports, this book illustrates how nonlinear dynamics plays a vital role in our world. Examples cover a wide range from the spread and possible control of communicable diseases, to the lack of predictability in long-range weather forecasting, to competition between political groups and nations. After an introductorychapter that explores what it means to be nonlinear, the book covers the mathematical conceptssuch as limit cycles, fractals, chaos, bifurcations, and solitons, that will be applied throughout the book. Numerous computer simulations and exercises allow students to explore topics in greater depth using the Maple computer algebra system. The mathematical level of the text assumes prior exposure to ordinary differential equations and familiarity with the wave and diffusion equations.No prior knowledge of Maple is assumed, and all Maple examples are included on a CD. The book may be used at the undergraduate or graduate level to prepare science and engineering students for problems in the "real world", or for self-study by practicing scientists and engineers.},
	publisher = {Springer Publishing Company, Incorporated},
	author = {Enns, Richard H.},
	year = {2010}
}

@book{noauthor_its_nodate,
	title = {It's a {Nonlinear} {World} {\textbar} {Richard} {H}. {Enns} {\textbar} {Springer}},
	url = {//www.springer.com/de/book/9780387753386},
	abstract = {Drawing examples from mathematics, physics, chemistry, biology, engineering, economics, medicine, politics, and sports, this book illustrates how...},
	urldate = {2017-11-06},
	file = {Snapshot:/home/io.nathan/Zotero/storage/SJXUCTVK/9780387753386.html:text/html}
}

@article{porter_industrial_1962,
	title = {Industrial {Dynamics}. {Jay} {Forrester}. {M}.{I}.{T}. {Press}, {Cambridge}, {Mass}.; {Wiley}, {New} {York}, 1961. xv + 464 pp. {Illus}. \$18},
	volume = {135},
	copyright = {1962 by the American Association for the Advancement of Science},
	issn = {0036-8075, 1095-9203},
	url = {http://science.sciencemag.org/content/135/3502/426.2},
	doi = {10.1126/science.135.3502.426-a},
	language = {en},
	number = {3502},
	urldate = {2017-11-06},
	journal = {Science},
	author = {Porter, Donald E.},
	month = feb,
	year = {1962},
	pages = {426--427},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/CG25GZ44/Porter - 1962 - Industrial Dynamics. Jay Forrester. M.I.T. Press, .pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/F7EP3ERV/426.html:text/html}
}

@misc{noauthor_system_nodate,
	title = {System {Dynamics} {Modeling}: {Tools} for {Learning} in a {Complex} {World}},
	url = {http://cmr.berkeley.edu/search/articleDetail.aspx?article=3629},
	urldate = {2017-11-06},
	file = {System Dynamics Modeling\: Tools for Learning in a Complex World:/home/io.nathan/Zotero/storage/9ZGRVG76/articleDetail.html:text/html}
}

@article{kermack_contribution_1927,
	title = {A {Contribution} to the {Mathematical} {Theory} of {Epidemics}},
	volume = {115},
	issn = {1364-5021, 1471-2946},
	url = {http://rspa.royalsocietypublishing.org/content/115/772/700},
	doi = {10.1098/rspa.1927.0118},
	language = {en},
	number = {772},
	urldate = {2017-11-06},
	journal = {Proceedings of the Royal Society of London A: Mathematical, Physical and Engineering Sciences},
	author = {Kermack, W. O. and McKendrick, A. G.},
	month = aug,
	year = {1927},
	pages = {700--721},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/57XZARXB/Kermack and McKendrick - 1927 - A Contribution to the Mathematical Theory of Epide.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/PLT8SIX5/700.html:text/html}
}

@inproceedings{borshchev_system_2004,
	address = {Oxford},
	title = {From {System} {Dynamics} and {Discrete} {Event} to {Practical} {Agent} {Based} {Modeling}: {Reasons}, {Techniques}, {Tools}},
	abstract = {This paper may be considered as a practical reference for those who wish to add (now sufficiently matured) Agent Based modeling to their analysis toolkit and may or may not have some System Dynamics or Discrete Event modeling background. We focus on systems that contain large numbers of active objects (people, business units, animals, vehicles, or even things like projects, stocks, products, etc. that have timing, event ordering or other kind of individual behavior associated with them). We compare the three major paradigms in simulation modeling: System Dynamics, Discrete Event and Agent Based. Modeling with respect to how they approach such systems. We show in detail how an Agent Based model can be built from an existing System Dynamics or a Discrete Event model and then show how easily it can be further enhanced to capture much more complicated behavior, dependencies and interactions thus providing for deeper insight in the system being modeled. Commonly understood examples are used throughout the paper; all models are specified in the visual language supported by AnyLogicTM tool. We view and present Agent Based modeling not as a substitution to older modeling paradigms but as a useful add-on that can be efficiently combined with System Dynamics and Discrete Event modeling. Several multi-paradigm model architectures are suggested.},
	author = {Borshchev, Andrei and Filippov, Alexei},
	month = jul,
	year = {2004}
}

@inproceedings{macal_agent-based_2010,
	address = {Baltimore, Maryland},
	series = {{WSC} '10},
	title = {To {Agent}-based {Simulation} from {System} {Dynamics}},
	isbn = {978-1-4244-9864-2},
	url = {http://dl.acm.org/citation.cfm?id=2433508.2433551},
	abstract = {Agent-based simulation (ABS) is a recent modeling technique that is being widely used in modeling complex social systems. Forrester's System Dynamics (SD) is another longstanding technique for modeling social systems. Several classical models of systems, such as the Kermack-McKendrick model of epidemiology, the Lotka-Volterra equations for modeling predator-prey relationships, and the Bass model for innovation diffusion are formulated as systems of differential equations and have corresponding System Dynamics representations as difference equations. The ABS and SD modeling approaches take fundamentally different perspectives when modeling a system, which can be characterized as bottom-up (ABS) versus top-down (SD). Yet many systems can be equivalently modeled by either approach. In this paper, we present a formal specification for SD and ABS models, use the specification to derive equivalent ABS representations, and present an example of an SIR epidemic model having SD and ABS counterparts.},
	urldate = {2017-10-05},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}},
	publisher = {Winter Simulation Conference},
	author = {Macal, Charles M.},
	year = {2010},
	pages = {371--382},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/7WFBF4UW/Macal - 2010 - To Agent-based Simulation from System Dynamics.pdf:application/pdf}
}

@inproceedings{perez_back_2017,
	address = {New York, NY, USA},
	series = {Haskell 2017},
	title = {Back to the {Future}: {Time} {Travel} in {FRP}},
	isbn = {978-1-4503-5182-9},
	shorttitle = {Back to the {Future}},
	url = {http://doi.acm.org/10.1145/3122955.3122957},
	doi = {10.1145/3122955.3122957},
	abstract = {Functional Reactive Programming (FRP) allows interactive applications to be modelled in a declarative manner using time-varying values. For practical reasons, however, operational constraints are often imposed, such as having a fixed time domain, time always flowing forward, and limiting the exploration of the past.   In this paper we show how these constraints can be overcome, giving local control over the time domain, the direction of time and the sampling step. We study the behaviour of FRP expressions when time flows backwards, and demonstrate how to synchronize subsystems running asynchronously and at different sampling rates. We have verified the practicality of our approach with two non-trivial games in which time control is central to the gameplay.},
	urldate = {2017-10-02},
	booktitle = {Proceedings of the 10th {ACM} {SIGPLAN} {International} {Symposium} on {Haskell}},
	publisher = {ACM},
	author = {Perez, Ivan},
	year = {2017},
	keywords = {Haskell, functional reactive programming, game programming, monadic streams, stream programming, time},
	pages = {105--116},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/P5342SY7/Perez - 2017 - Back to the Future Time Travel in FRP.pdf:application/pdf}
}

@article{perez_testing_2017,
	title = {Testing and {Debugging} {Functional} {Reactive} {Programming}},
	volume = {1},
	issn = {2475-1421},
	url = {http://doi.acm.org/10.1145/3110246},
	doi = {10.1145/3110246},
	abstract = {Many types of interactive applications, including video games, raise particular challenges when it comes to testing and debugging. Reasons include de-facto lack of reproducibility and difficulties of automatically generating suitable test data. This paper demonstrates that certain variants of Functional Reactive Programming (FRP) implemented in pure functional languages can mitigate such difficulties by offering referential transparency at the level of whole programs. This opens up for a multi-pronged approach for assisting with testing and debugging that works across platforms, including assertions based on temporal logic, recording and replaying of runs (also from deployed code), and automated random testing using QuickCheck. The approach has been validated on real, non-trivial games implemented in the FRP system Yampa through a tool providing a convenient Graphical User Interface that allows the execution of the code under scrutiny to be controlled, moving along the execution time line, and pin-pointing of violations of assertions on PCs as well as mobile platforms.},
	number = {ICFP},
	urldate = {2017-10-02},
	journal = {Proc. ACM Program. Lang.},
	author = {Perez, Ivan and Nilsson, Henrik},
	month = aug,
	year = {2017},
	keywords = {game programming, debugging, Functional Reactive Programming, temporal logic, testing},
	pages = {2:1--2:27},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/FIG5HKWX/Perez and Nilsson - 2017 - Testing and Debugging Functional Reactive Programm.pdf:application/pdf}
}

@book{barendregt_lambda_1984,
	title = {The {Lambda} {Calculus}: {Its} {Syntax} and {Semantics}},
	isbn = {978-0-444-87508-2},
	shorttitle = {The {Lambda} {Calculus}},
	abstract = {The revised edition contains a new chapter which provides an elegant description of the semantics. The various classes of lambda calculus models are described in a uniform manner. Some didactical improvements have been made to this edition. An example of a simple model is given and then the general theory (of categorical models) is developed. Indications are given of those parts of the book which can be used to form a coherent course.},
	language = {en},
	publisher = {North-Holland},
	author = {Barendregt, Hendrik Pieter},
	year = {1984},
	note = {Google-Books-ID: KbZFAAAAYAAJ},
	keywords = {Mathematics / Reference}
}

@book{webber_formal_2008,
	address = {Wilsonville, OR, USA},
	title = {Formal {Language}: {A} {Practical} {Introduction}},
	isbn = {978-1-59028-197-0},
	shorttitle = {Formal {Language}},
	abstract = {This book has two major goals. The first is to help you understand and appreciate the beautiful and enduring ideas of formal language. These ideas are the birthright of all computer scientists, and they will profoundly change the way you think about computation. They are not only among the most beautiful, but also among the most useful tools in computer science. They are used to solve problems in a wide variety of practical applications, and they are especially useful for defining programming languages and for building language systems. The second purpose of this book is to help you develop a facility with these useful tools. Our code examples are in Java, but they are not particularly Java-centric and should be accessible to any programmer. There is also a third major reason to study formal language, one that is not a primary focus of this book: to learn the techniques of mathematical proof. When you are learning about formal language, it can also be a good time to learn proof techniques, because the subject is full of theorems to practice on. But this book tries to make the beautiful and useful ideas for formal language accessible to students at all levels of mathematical interest and ability. To that end, although the book presents and discusses many simple proofs, it does not try to teach advanced proof techniques. Relatively few of the exercises pose challenging proof problems. Those planning graduate-level study of theoretical computer science would be well advised not to rely exclusively on this book for that kind of training.},
	publisher = {Franklin, Beedle \& Associates Inc.},
	author = {Webber, Adam Brooks},
	year = {2008}
}

@book{allen_haskell_2016,
	title = {Haskell {Programming} from {First} {Principles}},
	isbn = {978-1-945388-03-3},
	abstract = {Haskell Programming makes Haskell as clear, painless, and practical as it can be, whether you're a beginner or an experienced hacker. Learning Haskell from the ground up is easier and works better. With our exercise-driven approach, you'll build on previous chapters such that by the time you reach the notorious Monad, it'll seem trivial.},
	language = {en},
	publisher = {Allen and Moronuki Publishing},
	author = {Allen, Christopher and Moronuki, Julie},
	month = jul,
	year = {2016},
	note = {Google-Books-ID: 5FaXDAEACAAJ}
}

@book{maclennan_functional_1990,
	title = {Functional {Programming}: {Practice} and {Theory}},
	isbn = {978-0-201-13744-6},
	shorttitle = {Functional {Programming}},
	abstract = {This book is more than an introduction to programming in functional languages; it introduces functional programming as a new programming paradigm. Its focus is on functional programming methodology--what it is, and how it can be used to good effect. In particular, the book shows how this methodology can be used effectively in deriving, analyzing, and proving the correctness of programs. In as much as this book emphasizes general methodology over any particular language, the author has chosen standard mathematical notation for his examples.},
	language = {en},
	publisher = {Addison-Wesley},
	author = {MacLennan, Bruce J.},
	month = jan,
	year = {1990},
	note = {Google-Books-ID: JqhQAAAAMAAJ},
	keywords = {Computers / Programming / Algorithms, Computers / Programming Languages / General}
}

@book{abadi_theory_1996,
	address = {Secaucus, NJ, USA},
	edition = {1st},
	title = {A {Theory} of {Objects}},
	isbn = {978-0-387-94775-4},
	abstract = {From the Publisher:Procedural languages are generally well understood. Their foundations have been cast in calculi that prove useful in matters of implementation and semantics. So far, an analogous understanding has not emerged for object-oriented languages. In this book the authors take a novel approach to the understanding of object-oriented languages by introducing object calculi and developing a theory of objects around them. The book covers both the semantics of objects and their typing rules, and explains a range of object-oriented concepts, such as self, dynamic dispatch, classes, inheritance, prototyping, subtyping, covariance and contravariance, and method specialization. Researchers and graduate students will find this an important development of the underpinnings of object-oriented programming.},
	publisher = {Springer-Verlag New York, Inc.},
	author = {Abadi, Martin and Cardelli, Luca},
	year = {1996}
}

@misc{noauthor_functional_nodate,
	title = {Functional {Programming}: {Practice} and {Theory} - {Bruce} {J}. {MacLennan} - {Google} {Books}},
	url = {https://books.google.at/books/about/Functional_Programming.html?id=JqhQAAAAMAAJ&redir_esc=y},
	urldate = {2017-08-10},
	file = {Functional Programming\: Practice and Theory - Bruce J. MacLennan - Google Books:/home/io.nathan/Zotero/storage/LKMQ2BGV/Functional_Programming.html:text/html}
}

@misc{noauthor_functional_nodate-1,
	title = {Functional {Programming}: {Practice} and {Theory} by {Bruce} {J}. {MacLennan} — {Reviews}, {Discussion}, {Bookclubs}, {Lists}},
	url = {https://www.goodreads.com/book/show/1523750.Functional_Programming},
	urldate = {2017-08-10},
	file = {Functional Programming\: Practice and Theory by Bruce J. MacLennan — Reviews, Discussion, Bookclubs, Lists:/home/io.nathan/Zotero/storage/IBBPNDUX/1523750.html:text/html}
}

@book{bloch_effective_2014,
	title = {Effective {Java} (2nd {Edition})},
	isbn = {978-1-5025-7989-8},
	abstract = {Are you looking for a deeper understanding of the Java(tm) programming language so that you can write code that is clearer, more correct, more robust, and more reusable? Look no further! Effective Java(tm), Second Edition, brings together seventy-eight indispensable programmer's rules of thumb: working, best-practice solutions for the programming challenges you encounter every day. This highly anticipated new edition of the classic, Jolt Award-winning work has been thoroughly updated to cover Java SE 5 and Java SE 6 features introduced since the first edition. Bloch explores new design patterns and language idioms, showing you how to make the most of features ranging from generics to enums, annotations to autoboxing. Each chapter in the book consists of several "items" presented in the form of a short, standalone essay that provides specific advice, insight into Java platform subtleties, and outstanding code examples. The comprehensive descriptions and explanations for each item illuminate what to do, what not to do, and why. Highlights include: New coverage of generics, enums, annotations, autoboxing, the for-each loop, varargs, concurrency utilities, and much more Updated techniques and best practices on classic topics, including objects, classes, libraries, methods, and serialization How to avoid the traps and pitfalls of commonly misunderstood subtleties of the language Focus on the language and its most fundamental libraries: java.lang, java.util, and, to a lesser extent, java.util.concurrent and java.ioSimply put, Effective Java(tm), Second Edition, presents the most practical, authoritative guidelines available for writing efficient, well-designed programs.},
	language = {en},
	publisher = {Createspace Independent Pub},
	author = {Bloch, Joshua},
	month = oct,
	year = {2014},
	note = {Google-Books-ID: 5jXGoQEACAAJ},
	keywords = {Computers / Programming Languages / Java}
}

@book{jr_mythical_1995,
	title = {The {Mythical} {Man}-{Month}: {Essays} on {Software} {Engineering}, {Anniversary} {Edition}},
	isbn = {978-0-13-211916-0},
	shorttitle = {The {Mythical} {Man}-{Month}},
	abstract = {Few books on software project management have been as influential and timeless as The Mythical Man-Month. With a blend of software engineering facts and thought-provoking opinions, Fred Brooks offers insight for anyone managing complex projects. These essays draw from his experience as project manager for the IBM System/360 computer family and then for OS/360, its massive software system. Now, 20 years after the initial publication of his book, Brooks has revisited his original ideas and added new thoughts and advice, both for readers already familiar with his work and for readers discovering it for the first time.   The added chapters contain (1) a crisp condensation of all the propositions asserted in the original book, including Brooks' central argument in The Mythical Man-Month: that large programming projects suffer management problems different from small ones due to the division of labor; that the conceptual integrity of the product is therefore critical; and that it is difficult but possible to achieve this unity; (2) Brooks' view of these propositions a generation later; (3) a reprint of his classic 1986 paper "No Silver Bullet"; and (4) today's thoughts on the 1986 assertion, "There will be no silver bullet within ten years."},
	language = {en},
	publisher = {Pearson Education},
	author = {Jr, Frederick P. Brooks},
	month = aug,
	year = {1995},
	note = {Google-Books-ID: Yq35BY5Fk3gC},
	keywords = {Computers / Software Development \& Engineering / Project Management}
}

@article{kehoe_specification_2015,
	title = {The {Specification} of {Sugarscape}},
	url = {http://arxiv.org/abs/1505.06012},
	abstract = {Sugarscape is a well known and influential Agent Based Social Simulation (ABSS). Various parts of Sugarscape are supplied as examples in almost all Agent Based Model (ABM) toolkits. It has been used for demonstrating the applicability of different approaches to ABM. However a lack of agreement on the precise definition of the rules within Sugarscape has curtailed its usefulness. We provide a formal specification of Sugarscape using the Z specification language. This demonstrates the ability of formal specification to capture the definition of an ABM in a precise manner. It shows that formal specifications could be used as an approach to tackle the replication problem in the field of ABM. It also provides the first clear interpretation of Sugarscape identifying areas where information is missing and/or ambiguous. This enables researchers to make proper comparisons between different implementations of this model.},
	journal = {arXiv:1505.06012 [cs]},
	author = {Kehoe, Joseph},
	month = may,
	year = {2015},
	note = {arXiv: 1505.06012},
	keywords = {Computer Science - Multiagent Systems},
	file = {arXiv\:1505.06012 PDF:/home/io.nathan/Zotero/storage/CK45QB26/Kehoe - 2015 - The Specification of Sugarscape.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/JSV2ZHIP/1505.html:text/html}
}

@incollection{bigbee_replication_2007,
	series = {Springer {Series} on {Agent} {Based} {Social} {Systems}},
	title = {Replication of {Sugarscape} {Using} {MASON}},
	isbn = {978-4-431-71306-7 978-4-431-71307-4},
	url = {https://link.springer.com/chapter/10.1007/978-4-431-71307-4_20},
	abstract = {The purpose of this research was to replicate the Sugarscape model (Eptstein and Axtell 1996) and simulation outcomes as described in Growing Artificial Societies (GAS). Sugarscape is a classic agent-based model and contemporary simulation toolkits usually only have a very simple replication of a few core rules. There is scant evidence of significant replication of the rules and simulation outcomes; code supplied with Repast, Swarm, and NetLogo implement a minority of the rules in Sugarscape. In particular, the standard Repast distribution only implements Growback, Movement, and Replacement. Sugarscape implementations in these toolkits are clearly provided only as basic demonstrations of how wellknown social models might be implemented, rather than complete achievements of scientific replication.},
	language = {en},
	urldate = {2017-07-26},
	booktitle = {Agent-{Based} {Approaches} in {Economic} and {Social} {Complex} {Systems} {IV}},
	publisher = {Springer, Tokyo},
	author = {Bigbee, Anthony and Cioffi-Revilla, Claudio and Luke, Sean},
	year = {2007},
	doi = {10.1007/978-4-431-71307-4_20},
	pages = {183--190},
	file = {Snapshot:/home/io.nathan/Zotero/storage/GC3IKMSR/978-4-431-71307-4_20.html:text/html}
}

@book{graham_hackers_2004,
	title = {Hackers \& {Painters}: {Big} {Ideas} from the {Computer} {Age}},
	isbn = {978-0-596-00662-4},
	shorttitle = {Hackers \& {Painters}},
	abstract = {"The computer world is like an intellectual Wild West, in which you can shoot anyone you wish with your ideas, if you're willing to risk the consequences. " --from Hackers \& Painters: Big Ideas from the Computer Age, by Paul Graham  We are living in the computer age, in a world increasingly designed and engineered by computer programmers and software designers, by people who call themselves hackers. Who are these people, what motivates them, and why should you care?  Consider these facts: Everything around us is turning into computers. Your typewriter is gone, replaced by a computer. Your phone has turned into a computer. So has your camera. Soon your TV will. Your car was not only designed on computers, but has more processing power in it than a room-sized mainframe did in 1970. Letters, encyclopedias, newspapers, and even your local store are being replaced by the Internet.  Hackers \& Painters: Big Ideas from the Computer Age, by Paul Graham, explains this world and the motivations of the people who occupy it. In clear, thoughtful prose that draws on illuminating historical examples, Graham takes readers on an unflinching exploration into what he calls "an intellectual Wild West."  The ideas discussed in this book will have a powerful and lasting impact on how we think, how we work, how we develop technology, and how we live. Topics include the importance of beauty in software design, how to make wealth, heresy and free speech, the programming language renaissance, the open-source movement, digital design, internet startups, and more.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Graham, Paul},
	year = {2004},
	note = {Google-Books-ID: shycAgAAQBAJ},
	keywords = {Computers / Programming / Algorithms, Computers / General, Computers / Information Technology, Computers / Information Theory, Computers / Internet / General, Computers / Operating Systems / Linux, Computers / Social Aspects / General, Computers / Software Development \& Engineering / General, Computers / Web / Design}
}

@article{breuer_endogenous_2015,
	title = {Endogenous leverage and asset pricing in double auctions},
	volume = {53},
	issn = {0165-1889},
	url = {http://econpapers.repec.org/article/eeedyncon/v_3a53_3ay_3a2015_3ai_3ac_3ap_3a144-160.htm},
	abstract = {We propose a double auction mechanism for the exchange of leveraged assets and bonds in an agent based model. In this framework we validate recent results in general equilibrium theory about endogenous leverage and its consequences for asset pricing. We find that the institutional details of exchange are critical for a good match between the theoretical equilibrium state and the final state of the double auction: Specifically, the outcome of the double auction is sensitive to the details of how markets for debt and collateral are coordinated and how collateral is cleared. When trade is restricted to neighbours in a network, final prices and allocations are significantly different from unrestricted equilibrium.},
	number = {C},
	journal = {Journal of Economic Dynamics and Control},
	author = {Breuer, Thomas and Jandačka, Martin and Summer, Martin and Vollbrecht, Hans-Joachim},
	year = {2015},
	keywords = {agent based modeling, Asset pricing, Double auction, Leverage, Trade on networks},
	pages = {144--160},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/A832N5Z5/v_3a53_3ay_3a2015_3ai_3ac_3ap_3a144-160.html:text/html}
}

@inproceedings{paterson_new_2001,
	address = {New York, NY, USA},
	series = {{ICFP} '01},
	title = {A {New} {Notation} for {Arrows}},
	isbn = {978-1-58113-415-5},
	url = {http://doi.acm.org/10.1145/507635.507664},
	doi = {10.1145/507635.507664},
	abstract = {The categorical notion of monad, used by Moggi to structure denotational descriptions, has proved to be a powerful tool for structuring combinator libraries. Moreover, the monadic programming style provides a convenient syntax for many kinds of computation, so that each library defines a new sublanguage. Recently, several workers have proposed a generalization of monads, called variously "arrows" or Freyd-categories. The extra generality promises to increase the power, expressiveness and efficiency of the embedded approach, but does not mesh as well with the native abstraction and application. Definitions are typically given in a point-free style, which is useful for proving general properties, but can be awkward for programming specific instances. In this paper we define a simple extension to the functional language Haskell that makes these new notions of computation more convenient to use. Our language is similar to the monadic style, and has similar reasoning properties. Moreover, it is extensible, in the sense that new combining forms can be defined as expressions in the host language.},
	booktitle = {Proceedings of the {Sixth} {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Paterson, Ross},
	year = {2001},
	pages = {229--240},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/KI4REK3D/Paterson - 2001 - A New Notation for Arrows.pdf:application/pdf}
}

@book{okasaki_purely_1999,
	address = {New York, NY, USA},
	title = {Purely {Functional} {Data} {Structures}},
	isbn = {978-0-521-66350-2},
	abstract = {From the Publisher:Most books on data structures assume an imperative language like C or C++. However, data structures for these languages do not always translate well to functional languages such as Standard ML, Haskell, or Scheme. This book describes data structures from the point of view of functional languages, with examples, and presents design techniques so that programmers can develop their own functional data structures. It includes both classical data structures, such as red-black trees and binomial queues, and a host of new data structures developed exclusively for functional languages. All source code is given in Standard ML and Haskell, and most of the programs can easily be adapted to other functional languages. This handy reference for professional programmers working with functional languages can also be used as a tutorial or for self-study.},
	publisher = {Cambridge University Press},
	author = {Okasaki, Chris},
	year = {1999}
}

@article{baez_physics_2009,
	title = {Physics, {Topology}, {Logic} and {Computation}: {A} {Rosetta} {Stone}},
	shorttitle = {Physics, {Topology}, {Logic} and {Computation}},
	url = {http://arxiv.org/abs/0903.0340},
	abstract = {In physics, Feynman diagrams are used to reason about quantum processes. In the 1980s, it became clear that underlying these diagrams is a powerful analogy between quantum physics and topology: namely, a linear operator behaves very much like a "cobordism". Similar diagrams can be used to reason about logic, where they represent proofs, and computation, where they represent programs. With the rise of interest in quantum cryptography and quantum computation, it became clear that there is extensive network of analogies between physics, topology, logic and computation. In this expository paper, we make some of these analogies precise using the concept of "closed symmetric monoidal category". We assume no prior knowledge of category theory, proof theory or computer science.},
	urldate = {2017-05-31},
	journal = {arXiv:0903.0340 [quant-ph]},
	author = {Baez, John C. and Stay, Mike},
	month = mar,
	year = {2009},
	note = {arXiv: 0903.0340},
	keywords = {Mathematics - Category Theory, Quantum Physics},
	file = {arXiv\:0903.0340 PDF:/home/io.nathan/Zotero/storage/C8KRD8QS/Baez and Stay - 2009 - Physics, Topology, Logic and Computation A Rosett.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/NR2MNDR7/0903.html:text/html}
}

@book{popper_logic_2002,
	title = {The {Logic} of {Scientific} {Discovery}},
	isbn = {978-0-415-27844-7},
	abstract = {Described by the philosopher A.J. Ayer as a work of 'great originality and power', this book revolutionized contemporary thinking on science and knowledge. Ideas such as the now legendary doctrine of 'falsificationism' electrified the scientific community, influencing even working scientists, as well as post-war philosophy. This astonishing work ranks alongside The Open Society and Its Enemies as one of Popper's most enduring books and contains insights and arguments that demand to be read to this day.},
	language = {en},
	publisher = {Psychology Press},
	author = {Popper, Karl Raimund},
	year = {2002},
	note = {Google-Books-ID: Yq6xeupNStMC},
	keywords = {Philosophy / Logic, Science / Philosophy \& Social Aspects}
}

@book{graeber_debt:_2011,
	title = {Debt: {The} {First} 5,000 {Years}},
	isbn = {978-1-61219-098-3},
	shorttitle = {Debt},
	abstract = {Now in paperback: David Graeber’s “fresh . . . fascinating . . . thought-provoking . . . and exceedingly timely” (Financial Times) history of debt   Here anthropologist David Graeber presents a stunning reversal of conventional wisdom: he shows that before there was money, there was debt. For more than 5,000 years, since the beginnings of the first agrarian empires, humans have used elaborate credit systems to buy and sell goods—that is, long before the invention of coins or cash. It is in this era, Graeber argues, that we also first encounter a society divided into debtors and creditors.Graeber shows that arguments about debt and debt forgiveness have been at the center of political debates from Italy to China, as well as sparking innumerable insurrections. He also brilliantly demonstrates that the language of the ancient works of law and religion (words like “guilt,” “sin,” and “redemption”) derive in large part from ancient debates about debt, and shape even our most basic ideas of right and wrong. We are still fighting these battles today without knowing it.},
	language = {en},
	publisher = {Melville House},
	author = {Graeber, David},
	month = jul,
	year = {2011},
	note = {Google-Books-ID: GYhajCQU8XIC},
	keywords = {Business \& Economics / Economics / Theory, Business \& Economics / Economic History, History / Social History}
}

@article{focardi_is_2015,
	title = {Is economics an empirical science? {If} not, can it become one?},
	volume = {1},
	issn = {2297-4687},
	url = {http://journal.frontiersin.org/article/10.3389/fams.2015.00007},
	doi = {10.3389/fams.2015.00007},
	abstract = {Today’s mainstream economics, embodied in Dynamic Stochastic General Equilibrium (DSGE) models, cannot be considered an empirical science in the modern sense of the term: it is not based on empirical data, is not descriptive of the real-world economy, and has little forecasting power. In this paper, I begin with a review of the weaknesses of neoclassical economic theory and argue for a truly scientific theory based on data, the sine qua non of bringing economics into the realm of an empirical science. But I suggest that, before embarking on this endeavor, we first need to analyze the epistemological problems of economics to understand what research questions we can reasonably ask our theory to address.. I then discuss new approaches which hold the promise of bringing economics closer to being an empirical science. Among the approaches discussed are the study of economies as complex systems, econometrics and econophysics, artificial economics made up of multiple interacting agents as well as attempts being made inside present main stream theory to more closely align the theory with the real world},
	journal = {Frontiers in Applied Mathematics and Statistics},
	author = {Focardi, Sergio},
	year = {2015},
	pages = {7}
}

@inproceedings{uhrmacher_discrete_2005,
	title = {Discrete event systems specification in systems biology - a discussion of stochastic pi calculus and {DEVS}},
	doi = {10.1109/WSC.2005.1574266},
	abstract = {The goal of systems biology is to analyze the behavior and interrelationships between entities of entire functional biological systems. Discrete event approaches are of particular interest if small numbers of entities, like DNA molecules, shall be modeled. Two general approaches toward discrete event modeling and simulation are presented. They provide rather different perspectives on the system to be modeled, as is illustrated based on a model of the Trypophan Operon. Whereas in Devs distinctions are emphasized, e.g. between system and its environment, between structural and non structural changes, between properties attributed to a system and the system itself, these distinctions become fluent in the compact description of the π-calculus. However, both share the problem that in order to support a comfortable modeling, adaptations and extensions according to the concrete requirements of this challenging application area are needed.},
	booktitle = {Proceedings of the {Winter} {Simulation} {Conference}, 2005.},
	author = {Uhrmacher, A. M. and Priami, C.},
	month = dec,
	year = {2005},
	keywords = {Adaptation model, Biological system modeling, biological systems, biology, Calculus, Concrete, Devs distinctions, discrete event modeling, discrete event simulation, discrete event systems, discrete event systems specification, DNA, DNA molecules, pi calculus, stochastic pi calculus, Stochastic systems, systems biology, Trypophan Operon},
	pages = {10 pp.--},
	file = {IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/WINJFUR8/1574266.html:text/html;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/SJJ7MWJR/Uhrmacher and Priami - 2005 - Discrete event systems specification in systems bi.pdf:application/pdf}
}

@inproceedings{himmelspach_sequential_2006,
	title = {Sequential processing of {PDEVS} models},
	booktitle = {Proceedings of the 12th {IEEE} {International} {Symposium} on {MASCOTS}},
	author = {Himmelspach, Jan and Uhrmacher, Adelinde},
	month = oct,
	year = {2006}
}

@inproceedings{kuttler_stochastic_2007,
	title = {A {Stochastic} {Pi} {Calculus} for {Concurrent} {Objects}},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-73433-8_17},
	doi = {10.1007/978-3-540-73433-8_17},
	abstract = {We present SpiCO, a new modeling and simulation language for systems biology. SpiCO is based on the stochastic π calculus. It supports higher level modeling via multi-profile concurrent objects with static inheritance. We present a semantics for SpiCO in terms of continuous time Markov chains, and show how to compile SpiCO back into the biochemical stochastic π calculus while preserving semantics.},
	language = {en},
	urldate = {2017-05-19},
	booktitle = {Algebraic {Biology}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Kuttler, Céline and Lhoussaine, Cédric and Niehren, Joachim},
	month = jul,
	year = {2007},
	pages = {232--246},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/K5BU2NUF/Kuttler et al. - 2007 - A Stochastic Pi Calculus for Concurrent Objects.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/5XV5G66Z/10.html:text/html}
}

@article{john_constructing_2013,
	title = {Constructing and visualizing chemical reaction networks from pi-calculus models},
	volume = {25},
	issn = {0934-5043, 1433-299X},
	url = {https://link.springer.com/article/10.1007/s00165-011-0209-0},
	doi = {10.1007/s00165-011-0209-0},
	abstract = {The π-calculus, in particular its stochastic version the stochastic π-calculus, is a common modeling formalism to concisely describe the chemical reactions occurring in biochemical systems. However, it remains largely unexplored how to transform a biochemical model expressed in the stochastic π-calculus back into a set of meaningful reactions. To this end, we present a two step approach of first translating model states to reaction sets and then visualizing sequences of reaction sets, which are obtained from state trajectories, in terms of reaction networks. Our translation from model states to reaction sets is formally defined and shown to be correct, in the sense that it reflects the states and transitions as they are derived from the continuous time Markov chain-semantics of the stochastic π-calculus. Our visualization concept combines high level measures of network complexity with interactive, table-based network visualizations. It directly reflects the structures introduced in the first step and allows modelers to explore the resulting simulation traces by providing both: an overview of a network’s evolution and a detail inspection on demand.},
	language = {en},
	number = {5},
	urldate = {2017-05-19},
	journal = {Formal Aspects of Computing},
	author = {John, Mathias and Schulz, Hans-Jörg and Schumann, Heidrun and Uhrmacher, Adelinde M. and Unger, Andrea},
	month = sep,
	year = {2013},
	pages = {723--742},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/HJ6C84Z7/John et al. - 2013 - Constructing and visualizing chemical reaction net.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/E3KWXUJB/s00165-011-0209-0.html:text/html}
}

@article{ewald_discrete_2007,
	title = {Discrete event modelling and simulation in systems biology},
	volume = {1},
	issn = {1747-7778, 1747-7786},
	url = {https://link.springer.com/article/10.1057/palgrave.jos.4250018},
	doi = {10.1057/palgrave.jos.4250018},
	abstract = {With Systems Biology, a promising new application area for modelling and simulation emerges. Today's biologists are facing huge amounts of data delivered at different levels of detail by a multitude of advanced experimentation techniques. The Systems Biology approach copes with this information by cycling through phases of forming hypotheses, constructing models, experimenting with or analysing these models, and validating the findings by wet-lab experiments. A crucial point is therefore the way in which the knowledge about a system is formalized, that is, how a biological system is described, as this constrains the perception of the system as well as the scope of possible answers the model might provide. In this article, we compare different discrete event modelling formalisms (PETRI NETS, Stochastic π-CALCULUS, STATECHARTS, and DEVS) regarding their applicability to a cell biological system of current research interest, the Wnt signalling pathway. We then introduce the popular Gillespie algorithm, which is the foundation of many discrete event simulators for molecular-biological systems, and elaborate on some interesting extensions.},
	language = {en},
	number = {2},
	urldate = {2017-05-19},
	journal = {Journal of Simulation},
	author = {Ewald, R. and Maus, C. and Rolfs, A. and Uhrmacher, A.},
	month = may,
	year = {2007},
	pages = {81--96},
	file = {Snapshot:/home/io.nathan/Zotero/storage/CEWTKXGS/palgrave.jos.html:text/html}
}

@inproceedings{wang_pi-calculus_2008,
	address = {Miami, Florida},
	series = {{WSC} '08},
	title = {A {Pi}-calculus {Formalism} for {Discrete} {Event} {Simulation}},
	isbn = {978-1-4244-2708-6},
	url = {http://dl.acm.org/citation.cfm?id=1516744.1516876},
	abstract = {This paper presents PiDES, a formalism for discrete event simulation based on Pi-calculus. PiDES provides a rigorous semantics of behavior modeling and coordination for simulation federates. The capability of PiDES is demonstrated by translating a generalized semi-Markov process formalism into PiDES specification. The usage of PiDES is illustrated through a case study of a flexible manufacturing system consisting of two machines, two parts, and a robot. The major advantages of PiDES are discussed, which include: a) a complete set of semantics for both modeling and execution; b) supporting parallel and distributed simulation; c) adaptive modeling; d) rich coordination semantics for developing large simulation systems; and finally e) a formalism that can be used for agent-based simulation. An implementation of PiDES using Java programming language is also provided.},
	urldate = {2017-05-19},
	booktitle = {Proceedings of the 40th {Conference} on {Winter} {Simulation}},
	publisher = {Winter Simulation Conference},
	author = {Wang, Jianrui and Wysk, Richard A.},
	year = {2008},
	pages = {703--711},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/3XRMKMJV/Wang and Wysk - 2008 - A Pi-calculus Formalism for Discrete Event Simulat.pdf:application/pdf}
}

@inproceedings{carchiolo_using_2000,
	title = {Using a {Formal} {Framework} for {Agent} {System} {Design}},
	url = {https://link.springer.com/chapter/10.1007/3-540-45484-5_29},
	doi = {10.1007/3-540-45484-5_29},
	abstract = {The implementation of mobile agent systems involves great problems in particular it is often hard to guarantee that the specification of a system that has been designed actually fulfils the design requirements. Especially for critical applications, for example in real-time domains, there is a need to prove that the system being designed will have certain properties under certain conditions (assumptions).These elements have induced researchers to explore new alternatives. One alternative to traditional techniques is to use formal methods in several stages of design. In mobile agent system design the term formal methods refers to the use of mathematical methods for the specification, validation and simulation of systems.},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Formal {Approaches} to {Agent}-{Based} {Systems}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Carchiolo, V. and Malgeri, M. and Mangioni, G.},
	month = apr,
	year = {2000},
	pages = {308--317},
	file = {Snapshot:/home/io.nathan/Zotero/storage/BEA4H89R/3-540-45484-5_29.html:text/html}
}

@inproceedings{araragi_formal_2000,
	title = {On {Formal} {Modeling} of {Agent} {Computations}},
	url = {https://link.springer.com/chapter/10.1007/3-540-45484-5_4},
	doi = {10.1007/3-540-45484-5_4},
	abstract = {This paper describes a comparative study of three formal methods for modeling and validating agent systems. The study is part of a joint project by researchers in MIT’s Theory of Distributed Systems research group and NTT’s Cooperative Computing research group. Our goal is to establish a mathematical and linguistic foundation for describing and reasoning about agent-style systems.},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Formal {Approaches} to {Agent}-{Based} {Systems}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Araragi, Tadashi and Attie, Paul and Keidar, Idit and Kogure, Kiyoshi and Luchangco, Victor and Lynch, Nancy and Mano, Ken},
	month = apr,
	year = {2000},
	pages = {48--62},
	file = {Snapshot:/home/io.nathan/Zotero/storage/SA7J5TTS/3-540-45484-5_4.html:text/html}
}

@inproceedings{dinverno_formal_2000,
	title = {Formal {Agent} {Development}: {Framework} to {System}},
	shorttitle = {Formal {Agent} {Development}},
	url = {https://link.springer.com/chapter/10.1007/3-540-45484-5_11},
	doi = {10.1007/3-540-45484-5_11},
	abstract = {Much work in the field of agent-based systems has tended to focus on either the development of practical applications of agent systems on the one hand, or the development of sophisticated logics for reasoning about agent systems on the other. Our own view is that work on formal models of agent-based systems are valuable inasmuch as they contribute to a fundamental goal of computing of practical agent development. In an ongoing project that has been running for several years, we have sought to do exactly that through the development of a formal framework that provides a conceptual infrastructure for the analysis and modelling of agents and multi-agent systems on the one hand, and enables implemented and deployed systems to be evaluated and compared on the other. In this paper, we describe our research programme, review its achievements to date, and suggest directions for the future.},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Formal {Approaches} to {Agent}-{Based} {Systems}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {d’Inverno, Mark and Luck, Michael},
	month = apr,
	year = {2000},
	pages = {133--147},
	file = {Snapshot:/home/io.nathan/Zotero/storage/7KFRVX2C/3-540-45484-5_11.html:text/html}
}

@inproceedings{lerman_design_2000,
	title = {Design and {Mathematical} {Analysis} of {Agent}-{Based} {Systems}},
	url = {https://link.springer.com/chapter/10.1007/3-540-45484-5_18},
	doi = {10.1007/3-540-45484-5_18},
	abstract = {Agent-based systems that are composed of simple locally interacting agents but which demonstrate complex group behavior offer several advantages over traditional multi-agent systems. A well-designed complex agent-based systems is an efficient, robust, adaptive and stable system. It has very low communication and computational requirements, meaning that there are virtually no constraints on the system size. The simplicity of agent interactions also makes it amenable to quantitative mathematical analysis. In addition to offering predictive power, mathematical analysis enables the system designer to optimize system performance.To date, there have been relatively few implementations of complex agent-based systems, mainly because of the difficulty of determining what simple agent strategies will lead to desirable collective behavior in a large system. We claim that there exists a set of primitive agent strategies, similar to the basis behaviors in behavior-based robotics, from which complex group behavior can be designed. Moreover, these simple primitive strategies naturally lend themselves to mathematical description, making a quantitative study of agent-based systems possible. We present a case study of coalition formation to show that two simple behaviors, dispersion and aggregation, can lead to coalition formation in a multi-agent system under some conditions. We use this system to illustrate the process by which a mathematical description of the agent-based system is created and analyzed, and discuss the insights the analysis provides for designing coalition forming agents.},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Formal {Approaches} to {Agent}-{Based} {Systems}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Lerman, Kristina},
	month = apr,
	year = {2000},
	pages = {222--234},
	file = {Snapshot:/home/io.nathan/Zotero/storage/DJ8XMGE8/3-540-45484-5_18.html:text/html}
}

@book{noauthor_formal_nodate,
	title = {Formal {Approaches} to {Agent}-{Based} {Systems} - {First} {International} {\textbar} {James} {L}. {Rash} {\textbar} {Springer}},
	url = {http://www.springer.com/gb/book/9783540427162},
	abstract = {This book constitutes the thoroughly refereed post-proceedings of the First International Workshop on Formal Approaches to Agent-Based Systems, FAABS...},
	urldate = {2017-05-18},
	file = {Snapshot:/home/io.nathan/Zotero/storage/7GNRR27F/9783540427162.html:text/html}
}

@incollection{gilbert_holism_1996,
	series = {Theory and {Decision} {Library}},
	title = {Holism, {Individualism} and {Emergent} {Properties}},
	copyright = {©1996 Springer Science+Business Media Dordrecht},
	isbn = {978-90-481-4722-9 978-94-015-8686-3},
	url = {http://link.springer.com/chapter/10.1007/978-94-015-8686-3_1},
	abstract = {This paper begins by showing that sociologists have also struggled with one of the basic conceptual and philosophical problems encountered in simulating societies: the problem of understanding ‘emergence’ and, especially, the relationship between the micro and macro properties of complex systems. Secondly, I shall indicate ways in which some computer simulations may have oversimplified important characteristics of specifically human societies, because the actors (agents) in these societies are capable of, and do routinely reason about the emergent properties of their own societies. This adds a degree of reflexivity to action which is not present (for the most part) in societies made up of simpler agents, and in particular is not a feature of most current computer simulations.},
	language = {en},
	number = {23},
	urldate = {2017-05-18},
	booktitle = {Modelling and {Simulation} in the {Social} {Sciences} from the {Philosophy} of {Science} {Point} of {View}},
	publisher = {Springer Netherlands},
	author = {Gilbert, G. Nigel},
	editor = {Hegselmann, Rainer and Mueller, Ulrich and Troitzsch, Klaus G.},
	year = {1996},
	doi = {10.1007/978-94-015-8686-3_1},
	keywords = {Methodology of the Social Sciences, Philosophy of Science, Systems Theory, Control},
	pages = {1--12},
	file = {Snapshot:/home/io.nathan/Zotero/storage/48S8MVBC/10.html:text/html}
}

@incollection{baas_emergence_1994,
	series = {Santa {Fe} {Studies} in the {Sciences} of {Complexity}},
	title = {Emergence, {Hierarchies} and {Hyperstructures}},
	volume = {Proc Volume XVIII},
	booktitle = {Artificial {Life} {III}},
	publisher = {Addison-Wesley},
	author = {Baas, Nils A.},
	year = {1994},
	pages = {515--537}
}

@incollection{balci_verification_1998,
	title = {Verification, {Validation}, and {Testing}},
	copyright = {Copyright © 1998 John Wiley \& Sons, Inc.},
	isbn = {978-0-470-17244-5},
	url = {http://onlinelibrary.wiley.com/doi/10.1002/9780470172445.ch10/summary},
	abstract = {This chapter contains sections titled:


*
Introduction


*
Life Cycle and a Case Study


*
Verification, Validation, and Testing Principles


*
Verification, Validation, and Testing Techniques


*
Credibility Assessment Stages


*
Concluding Remarks


*
References},
	language = {en},
	urldate = {2017-05-18},
	booktitle = {Handbook of {Simulation}},
	publisher = {John Wiley \& Sons, Inc.},
	author = {Balci, Osman},
	editor = {Banks, Jerry},
	year = {1998},
	doi = {10.1002/9780470172445.ch10},
	keywords = {counterintuitive behavior, military combat systems validation, response-surface methodologies, simulation language compiler, trace-driven simulation methods},
	pages = {335--393},
	file = {Snapshot:/home/io.nathan/Zotero/storage/B8BT8SA3/summary.html:text/html}
}

@article{jennings_agent-based_2000,
	title = {On {Agent}-based {Software} {Engineering}},
	volume = {117},
	issn = {0004-3702},
	url = {http://dx.doi.org/10.1016/S0004-3702(99)00107-1},
	doi = {10.1016/S0004-3702(99)00107-1},
	number = {2},
	urldate = {2017-05-18},
	journal = {Artif. Intell.},
	author = {Jennings, Nicholas R.},
	month = mar,
	year = {2000},
	keywords = {multi-agent systems, agent interactions, agent-based computing, social level, Software Engineering},
	pages = {277--296}
}

@inproceedings{sargent_verification_2005,
	address = {Orlando, Florida},
	series = {{WSC} '05},
	title = {Verification and {Validation} of {Simulation} {Models}},
	isbn = {978-0-7803-9519-0},
	url = {http://dl.acm.org/citation.cfm?id=1162708.1162736},
	abstract = {In this paper we discuss verification and validation of simulation models. Four different approaches to deciding model validity are described; two different paradigms that relate verification and validation to the model development process are presented; various validation techniques are defined; conceptual model validity, model verification, operational validity, and data validity are discussed; a way to document results is given; a recommended procedure for model validation is presented; and accreditation is briefly discussed.},
	urldate = {2017-05-18},
	booktitle = {Proceedings of the 37th {Conference} on {Winter} {Simulation}},
	publisher = {Winter Simulation Conference},
	author = {Sargent, Robert G.},
	year = {2005},
	pages = {130--143},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/D2J3JBG9/Sargent - 2005 - Verification and Validation of Simulation Models.pdf:application/pdf}
}

@article{janssen_empirically_2006,
	title = {Empirically {Based}, {Agent}-based models},
	volume = {11},
	copyright = {© 2006 by the author(s)},
	issn = {1708-3087},
	url = {https://www.ecologyandsociety.org/vol11/iss2/art37/},
	doi = {10.5751/ES-01861-110237},
	abstract = {Janssen, M. A., and E. Ostrom. 2006. Empirically based, agent-based models. Ecology and Society 11(2): 37. https://doi.org/10.5751/ES-01861-110237},
	language = {en},
	number = {2},
	urldate = {2017-05-18},
	journal = {Ecology and Society},
	author = {Janssen, Marco and Ostrom, Elinor},
	month = dec,
	year = {2006},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/E72DDWVX/Janssen and Ostrom - 2006 - Empirically Based, Agent-based models.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/FHV6EKMB/art37.html:text/html}
}

@book{carley_validating_1996,
	title = {Validating {Computational} {Models}},
	abstract = {views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Office of Naval Research or the U.S. government. Validating Computational Models The use of computational models in the social sciences has grown quickly in the past decade. For many these models represent a bewildering and possibly intimidating approach to examining data and developing social and organizational theory. Few researchers have had courses or personal experience in the development and building of computational models and even fewer have an understanding of how to validate such models. And while many papers extort the relative advantages and disadvantages of the computational approach, and many call for the validation of such models, few provide insight into how to validate such models and the issues involved in validation. This paper represents an attempt at redressing this oversight. An overview is provided of computational modeling in the social sciences,},
	author = {Carley, Kathleen M.},
	year = {1996},
	file = {Citeseer - Snapshot:/home/io.nathan/Zotero/storage/8U8H5JVH/summary.html:text/html}
}

@book{zeigler_theory_2000,
	title = {Theory of {Modeling} and {Simulation}: {Integrating} {Discrete} {Event} and {Continuous} {Complex} {Dynamic} {Systems}},
	isbn = {978-0-12-778455-7},
	shorttitle = {Theory of {Modeling} and {Simulation}},
	abstract = {The increased computational power and software tools available to engineers have increased the use and dependence on modeling and computer simulation throughout the design process. These tools have given engineers the capability of designing highly complex systems and computer architectures that were previously unthinkable. Every complex design project, from integrated circuits, to aerospace vehicles, to industrial manufacturing processes requires these new methods. This book fulfills the essential need of system and control engineers at all levels in understanding modeling and simulation. This book, written as a true text/reference has become a standard sr./graduate level course in all EE departments worldwide and all professionals in this area are required to update their skills.  The book provides a rigorous mathematical foundation for modeling and computer simulation. It provides a comprehensive framework for modeling and simulation integrating the various simulation approaches. It covers model formulation, simulation model execution, and the model building process with its key activities model abstraction and model simplification, as well as the organization of model libraries. Emphasis of the book is in particular in integrating discrete event and continuous modeling approaches as well as a new approach for discrete event simulation of continuous processes. The book also discusses simulation execution on parallel and distributed machines and concepts for simulation model realization based on the High Level Architecture (HLA) standard of the Department of Defense.    Presents a working foundation necessary for compliance with High Level Architecture (HLA) standards Provides a comprehensive framework for continuous and discrete event modeling and simulation Explores the mathematical foundation of simulation modeling Discusses system morphisms for model abstraction and simplification Presents a new approach to discrete event simulation of continuous processes Includes parallel and distributed simulation of discrete event models Presents a concept to achieve simulator interoperability in the form of the DEVS-Bus},
	language = {en},
	publisher = {Academic Press},
	author = {Zeigler, Bernard P. and Praehofer, Herbert and Kim, Tag Gon},
	month = jan,
	year = {2000},
	note = {Google-Books-ID: REzmYOQmHuQC},
	keywords = {Technology \& Engineering / Engineering (General), Computers / Computer Engineering}
}

@article{wilensky_making_2007,
	title = {Making {Models} {Match}: {Replicating} an {Agent}-{Based} {Model}},
	volume = {10},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/10/4/2.html},
	abstract = {Scientists have increasingly employed computer models in their work. Recent years have seen a proliferation of agent-based models in the natural and social sciences. But with the exception of a few "classic" models, most of these models have never been replicated by anyone but the original developer. As replication is a critical component of the scientific method and a core practice of scientists, we argue herein for an increased practice of replication in the agent-based modeling community, and for widespread discussion of the issues surrounding replication. We begin by clarifying the concept of replication as it applies to ABM. Furthermore we argue that replication may have even greater benefits when applied to computational models than when applied to physical experiments. Replication of computational models affects model verification and validation and fosters shared understanding about modeling decisions. To facilitate replication, we must create standards for both how to replicate models and how to evaluate the replication. In this paper, we present a case study of our own attempt to replicate a classic agent-based model. We begin by describing an agent-based model from political science that was developed by Axelrod and Hammond. We then detail our effort to replicate that model and the challenges that arose in recreating the model and in determining if the replication was successful. We conclude this paper by discussing issues for (1) researchers attempting to replicate models and (2) researchers developing models in order to facilitate the replication of their results.},
	number = {4},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Wilensky, Uri and Rand, William},
	year = {2007},
	keywords = {Agent-based modeling, Ethnocentrism, Replication, Scientific Method, Validation, Verification},
	pages = {2}
}

@incollection{ormerod_epistemological_2009,
	address = {Berlin, Heidelberg},
	title = {Epistemological {Aspects} of {Computer} {Simulation} in the {Social} {Sciences}},
	isbn = {978-3-642-01108-5},
	url = {http://dx.doi.org/10.1007/978-3-642-01109-2_10},
	abstract = {This paper considers some of the difficulties in establishing verificaction and validation of agent based models. The fact that most ABMs are solved by simulation rather than analytically blurs the distinction between validation and verification. We suggest that a clear description of the phenomena to be explained by the model and testing for the simplest possible realistic agent rules of behaviour are key to the successful validation of ABMs and will provide the strongest base for enabling model comparison and acceptance. In particular, the empirical evidence that in general agents act intuitively rather than rationally is now strong. This implies that models which assign high levels of cognition to their agents require particularly strong justification if they are to be considered valid.},
	urldate = {2017-05-16},
	publisher = {Springer-Verlag},
	author = {Ormerod, Paul and Rosewell, Bridget},
	editor = {Squazzoni, Flaminio},
	year = {2009},
	doi = {10.1007/978-3-642-01109-2_10},
	keywords = {Agent-based models, Verification, Agents, behaviour, validation},
	pages = {130--140}
}

@article{windrum_empirical_2007,
	title = {Empirical {Validation} of {Agent}-{Based} {Models}: {Alternatives} and {Prospects}},
	volume = {10},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/10/2/8.html},
	abstract = {This paper addresses a set of methodological problems arising in the empirical validation of agent-based (AB) economics models and discusses how these are currently being tackled. These problems are generic for all those engaged in AB modelling, not just economists. The discussion is therefore of direct relevance to JASSS readers. The paper has two objectives. The first objective is the identification of a set of issues that are common to all modellers engaged in empirical validation. This gives rise to a novel taxonomy that captures the relevant dimensions along which AB modellers differ. The second objective is a focused discussion of three alternative methodological approaches being developed in AB economics - indirect calibration, the Werker-Brenner approach, and the history-friendly approach – and a set of (as yet) unresolved issues for empirical validation that require future research.},
	number = {2},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Windrum, Paul and Fagiolo, Giorgio and Moneta, Alessio},
	year = {2007},
	keywords = {simulation, Agent-based models, Calibration, Empirical Validation, History-Friendly Models, Methodology},
	pages = {8}
}

@article{galan_errors_2009,
	title = {Errors and {Artefacts} in {Agent}-{Based} {Modelling}},
	volume = {12},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/12/1/1.html},
	abstract = {The objectives of this paper are to define and classify different types of errors and artefacts that can appear in the process of developing an agent-based model, and to propose activities aimed at avoiding them during the model construction and testing phases. To do this in a structured way, we review the main concepts of the process of developing such a model – establishing a general framework that summarises the process of designing, implementing, and using agent-based models. Within this framework we identify the various stages where different types of errors and artefacts may appear. Finally we propose activities that could be used to detect (and hence eliminate) each type of error or artefact.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Galán, José Manuel and Izquierdo, Luis R. and Izquierdo, Segismundo S. and Santos, José Ignacio and del Olmo, Ricardo and López-Paredes, Adolfo and Edmonds, Bruce},
	year = {2009},
	keywords = {Replication, Verification, Agent-Based Modelling, Artefact, Error, Modelling Roles},
	pages = {1}
}

@book{boehm_software_1989,
	address = {Piscataway, NJ, USA},
	title = {Software {Risk} {Management}},
	isbn = {978-0-8186-8906-2},
	publisher = {IEEE Press},
	editor = {Boehm, Barry W.},
	year = {1989}
}

@incollection{epstein_advancing_2016,
	address = {Cambridge, Massachusetts},
	title = {Advancing {Agent}\_Zero},
	booktitle = {Complexity and {Evolution}: {Toward} a {New} {Synthesis} for {Economics}},
	publisher = {MIT Press},
	author = {Epstein, Joshua and Chelen, Julia},
	year = {2016}
}

@techreport{tesfatsion_agent-based_2017,
	title = {Agent-based  {Computational} {Economics} ({ACE}) - {Growing} {Economies} from the {Bottom} {Up}},
	url = {http://www2.econ.iastate.edu/tesfatsi/ace.htm},
	author = {Tesfatsion, Leigh},
	month = may,
	year = {2017}
}

@techreport{wilhite_economic_2006,
	type = {Handbook of {Computational} {Economics}},
	title = {Economic {Activity} on {Fixed} {Networks}},
	url = {http://econpapers.repec.org/bookchap/eeehecchp/2-20.htm},
	abstract = {A large portion of our economic interactions involves a very small portion of the population. We seem to prefer familiar venues. But the tendency to focus our attention on a few individuals or activities is an attribute that is typically omitted in our characterization of markets. In markets agents seem to interact impersonally and efficiently with countless other faceless agents. This chapter looks into the consequences of including a connection between agents, a tendency to interact with a specific few, in economic decision making. Agents are assumed to occupy the nodes of a network and to interact exclusively with agents to whom they are directly linked. We then study evolution of game strategies and the effectiveness of exchange as the topology of the underlying network is altered. We find that networks matter, that changes in a network's structure can alter the steady-state attributes of an artificial society as well as the dynamics of that system.},
	urldate = {2017-05-15},
	institution = {Elsevier},
	author = {Wilhite, Allen},
	year = {2006},
	pages = {1013--1045},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/FBF8WSEF/2-20.html:text/html}
}

@article{newman_structure_2003,
	title = {The structure and function of complex networks},
	volume = {45},
	issn = {0036-1445, 1095-7200},
	url = {http://arxiv.org/abs/cond-mat/0303516},
	doi = {10.1137/S003614450342480},
	abstract = {Inspired by empirical studies of networked systems such as the Internet, social networks, and biological networks, researchers have in recent years developed a variety of techniques and models to help us understand or predict the behavior of these systems. Here we review developments in this field, including such concepts as the small-world effect, degree distributions, clustering, network correlations, random graph models, models of network growth and preferential attachment, and dynamical processes taking place on networks.},
	number = {2},
	urldate = {2017-05-15},
	journal = {SIAM Review},
	author = {Newman, M. E. J.},
	month = jan,
	year = {2003},
	note = {arXiv: cond-mat/0303516},
	keywords = {Condensed Matter - Disordered Systems and Neural Networks, Condensed Matter - Statistical Mechanics},
	pages = {167--256},
	file = {arXiv\:cond-mat/0303516 PDF:/home/io.nathan/Zotero/storage/U6HPS6NU/Newman - 2003 - The structure and function of complex networks.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/I8E9JPRG/0303516.html:text/html}
}

@article{spivak_higher-dimensional_2009,
	title = {Higher-dimensional models of networks},
	url = {http://arxiv.org/abs/0909.4314},
	abstract = {Networks are often studied as graphs, where the vertices stand for entities in the world and the edges stand for connections between them. While relatively easy to study, graphs are often inadequate for modeling real-world situations, especially those that include contexts of more than two entities. For these situations, one typically uses hypergraphs or simplicial complexes. In this paper, we provide a precise framework in which graphs, hypergraphs, simplicial complexes, and many other categories, all of which model higher graphs, can be studied side-by-side. We show how to transform a hypergraph into its nearest simplicial analogue, for example. Our framework includes many new categories as well, such as one that models broadcasting networks. We give several examples and applications of these ideas.},
	urldate = {2017-05-15},
	journal = {arXiv:0909.4314 [cs]},
	author = {Spivak, David I.},
	month = sep,
	year = {2009},
	note = {arXiv: 0909.4314},
	keywords = {C.2.1, Computer Science - Discrete Mathematics, Computer Science - Networking and Internet Architecture, G.2.2},
	file = {arXiv\:0909.4314 PDF:/home/io.nathan/Zotero/storage/WTWEBCXH/Spivak - 2009 - Higher-dimensional models of networks.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/A85T87AQ/0909.html:text/html}
}

@book{easley_networks_2010,
	title = {Networks, {Crowds}, and {Markets}: {Reasoning} {About} a {Highly} {Connected} {World}},
	isbn = {978-0-521-19533-1},
	shorttitle = {Networks, {Crowds}, and {Markets}},
	abstract = {Over the past decade there has been a growing public fascination with the complex connectedness of modern society. This connectedness is found in many incarnations: in the rapid growth of the Internet, in the ease with which global communication takes place, and in the ability of news and information as well as epidemics and financial crises to spread with surprising speed and intensity. These are phenomena that involve networks, incentives, and the aggregate behavior of groups of people; they are based on the links that connect us and the ways in which our decisions can have subtle consequences for others. This introductory undergraduate textbook takes an interdisciplinary look at economics, sociology, computing and information science, and applied mathematics to understand networks and behavior. It describes the emerging field of study that is growing at the interface of these areas, addressing fundamental questions about how the social, economic, and technological worlds are connected.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Easley, David and Kleinberg, Jon},
	month = jul,
	year = {2010},
	note = {Google-Books-ID: 8xf1nAEACAAJ},
	keywords = {Computers / Programming / Algorithms, Business \& Economics / Consumer Behavior, Business \& Economics / E-Commerce / General, Computers / Networking / General, Computers / Web / General, Social Science / Sociology / General}
}

@book{jackson_social_2008,
	title = {Social and {Economic} {Networks}},
	isbn = {978-0-691-13440-6},
	abstract = {Networks of relationships help determine the careers that people choose, the jobs they obtain, the products they buy, and how they vote. The many aspects of our lives that are governed by social networks make it critical to understand how they impact behavior, which network structures are likely to emerge in a society, and why we organize ourselves as we do. In Social and Economic Networks, Matthew Jackson offers a comprehensive introduction to social and economic networks, drawing on the latest findings in economics, sociology, computer science, physics, and mathematics. He provides empirical background on networks and the regularities that they exhibit, and discusses random graph-based models and strategic models of network formation. He helps readers to understand behavior in networked societies, with a detailed analysis of learning and diffusion in networks, decision making by individuals who are influenced by their social neighbors, game theory and markets on networks, and a host of related subjects. Jackson also describes the varied statistical and modeling techniques used to analyze social networks. Each chapter includes exercises to aid students in their analysis of how networks function.  This book is an indispensable resource for students and researchers in economics, mathematics, physics, sociology, and business.},
	language = {en},
	publisher = {Princeton University Press},
	author = {Jackson, Matthew O.},
	year = {2008},
	note = {Google-Books-ID: IpA9LwEACAAJ},
	keywords = {Social Science / Sociology / General, Business \& Economics / Economics / Microeconomics, Mathematics / Group Theory}
}

@article{blume_introduction_2015,
	series = {Computer {Science} and {Economic} {Theory}},
	title = {Introduction to computer science and economic theory},
	volume = {156},
	issn = {0022-0531},
	url = {http://www.sciencedirect.com/science/article/pii/S0022053114001616},
	doi = {10.1016/j.jet.2014.11.002},
	abstract = {This essay introduces the symposium on computer science and economic theory.},
	urldate = {2016-12-12},
	journal = {Journal of Economic Theory},
	author = {Blume, Lawrence and Easley, David and Kleinberg, Jon and Kleinberg, Robert and Tardos, Eva},
	month = mar,
	year = {2015},
	keywords = {Mechanism design, Algorithmic game theory, Implementation, Learning in games, Networks},
	pages = {1--13},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/H3EK4XCX/Blume et al. - 2015 - Introduction to computer science and economic theo.pdf:application/pdf;ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/RFPQJ7KX/Blume et al. - 2015 - Introduction to computer science and economic theo.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/JS2CWSZB/S0022053114001616.html:text/html;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/VBRAMU28/S0022053114001616.html:text/html}
}

@article{hughes_why_1989,
	title = {Why {Functional} {Programming} {Matters}},
	volume = {32},
	issn = {0010-4620},
	url = {http://dx.doi.org/10.1093/comjnl/32.2.98},
	doi = {10.1093/comjnl/32.2.98},
	number = {2},
	urldate = {2016-11-11},
	journal = {Comput. J.},
	author = {Hughes, J.},
	month = apr,
	year = {1989},
	pages = {98--107}
}

@incollection{hewitt_what_2007,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {What {Is} {Commitment}? {Physical}, {Organizational}, and {Social} ({Revised})},
	copyright = {©2007 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-74457-3 978-3-540-74459-7},
	shorttitle = {What {Is} {Commitment}?},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-74459-7_19},
	abstract = {This paper uses Participatory Semantics to explicate commitment. Information expresses the fact that a system is in a certain configuration that is correlated to the configuration of another system. Any physical system may contain information about another physical system. For the purposes of this paper, physical commitment is defined to be information pledgedabout physical systems (situated at a particular place and time). This use of the term physical commitment is currently nonstandard. Note that commitment is defined for whole physical system; not just a participant or process. Organizational and social commitments can be analyzed in terms of physical commitments. For example systems that behave as scientific communities can have commitments for monotonicity, concurrency, commutativity, pluralism, skepticism, and provenance. Speech Act Theory has attempted to formalize the semantics of some kinds of expressions for commitments. Participatory Semantics for commitment can overcome some of the lack of expressiveness and generality in Speech Act Theory.},
	language = {en},
	number = {4386},
	urldate = {2016-10-26},
	booktitle = {Coordination, {Organizations}, {Institutions}, and {Norms} in {Agent} {Systems} {II}},
	publisher = {Springer Berlin Heidelberg},
	author = {Hewitt, Carl},
	editor = {Noriega, Pablo and Vázquez-Salceda, Javier and Boella, Guido and Boissier, Olivier and Dignum, Virginia and Fornara, Nicoletta and Matson, Eric},
	year = {2007},
	doi = {10.1007/978-3-540-74459-7_19},
	keywords = {Software Engineering, Artificial Intelligence (incl. Robotics), Computer Communication Networks, Logics and Meanings of Programs, Programming Techniques, Software Engineering/Programming and Operating Systems},
	pages = {293--307},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/WW478ECG/Hewitt - 2007 - What Is Commitment Physical, Organizational, and .pdf:application/pdf;Full Text PDF:/home/io.nathan/Zotero/storage/6QVEJKUN/Hewitt - 2007 - What Is Commitment Physical, Organizational, and .pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/BXQAFWI9/10.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/FWUQ8MR7/10.html:text/html}
}

@inproceedings{kaminski_verification_2013,
	series = {Lecture {Notes} in {Business} {Information} {Processing}},
	title = {Verification of {Models} in {Agent} {Based} {Computational} {Economics} — {Lessons} from {Software} {Engineering}},
	copyright = {©2013 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-40822-9 978-3-642-40823-6},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-40823-6_15},
	abstract = {Agent based models are highly complex and usually are being implemented using programming languages. This situation calls for adequate methods allowing for their verification that are not used in standard economic research. In order to organize this process we propose to logically decompose agent based model into three layers: conceptual model, computerized model and metamodel. The main possible problems identified using this decomposition are: (a) incomplete specification of conceptual model, (b) unexpected behavior of computerized model and (c) problems with reproduction simulation results. In order to address these issues based on literature review we draw recommendations concerning model documentation, testing and simulation reproduction that are crucial to improve their quality and precision of communication.},
	language = {en},
	urldate = {2016-12-12},
	booktitle = {Perspectives in {Business} {Informatics} {Research}},
	publisher = {Springer Berlin Heidelberg},
	author = {Kamiński, Bogumił and Szufel, Przemysław},
	editor = {Kobyliński, Andrzej and Sobczak, Andrzej},
	month = sep,
	year = {2013},
	doi = {10.1007/978-3-642-40823-6_15},
	keywords = {agent based modeling, Software Engineering, Computational economics, Computer Appl. in Administrative Data Processing, Information Storage and Retrieval, Information Systems Applications (incl. Internet), IT in Business, model verification},
	pages = {185--199},
	file = {Snapshot:/home/io.nathan/Zotero/storage/SRV8WV8Q/978-3-642-40823-6_15.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/2FXIVUJK/978-3-642-40823-6_15.html:text/html}
}

@inproceedings{di_stefano_using_2005,
	address = {Washington, DC, USA},
	series = {{IAT} '05},
	title = {Using the {Erlang} {Language} for {Multi}-{Agent} {Systems} {Implementation}},
	isbn = {978-0-7695-2416-0},
	url = {http://dx.doi.org/10.1109/IAT.2005.141},
	doi = {10.1109/IAT.2005.141},
	abstract = {Even if Java is widely used for agent development, some agent platforms employ ad-hoc programming languages, so the question that arises is: Is there a language that fits the model of an autonomous software agent better than Java? This paper deals with such an issue by deriving an abstract model for agents and proposing some parameters to evaluate programming languages for agent development. As a result, the paper introduces Erlang, a functional language that presents some interesting characteristics for the engineering of agent-based applications. An Erlang-based platform, called eXAT and developed by the authors, is then presented. Finally, a comparison with a Java-based approach explains why, in the authorsý opinion, this language cannot be considered a good choice for the implementation of agent systems.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the {IEEE}/{WIC}/{ACM} {International} {Conference} on {Intelligent} {Agent} {Technology}},
	publisher = {IEEE Computer Society},
	author = {Di Stefano, Antonella and Santoro, Corrado},
	year = {2005},
	pages = {679--685}
}

@book{bowles_understanding_2005,
	address = {New York},
	edition = {3 edition},
	title = {Understanding {Capitalism}: {Competition}, {Command}, and {Change}},
	isbn = {978-0-19-513865-8},
	shorttitle = {Understanding {Capitalism}},
	abstract = {Understanding Capitalism: Competition, Command, and Change, Third Edition, is an introduction to economics that explains how capitalism works, why it sometimes does not work as well as we would like it to, and how over time it not only changes but also revolutionizes the world around us. The "three-dimensional approach" of the text focuses on competition in markets; command in firms, governments, and international relations; and change as a permanent feature of a capitalist economy driven by technical innovation and conflict over the distribution of income.The book covers the standard topics of supply and demand, market competition, imperfect competition, aggregate demand, inflation, and unemployment. It emphasizes the extraordinary dynamism and material productivity of the capitalist economy; the psychological foundations of human behavior; the logic and limitations of Adam Smith's invisible hand; technical change and the new information-based economy; global economic integration and its impact on national economies; the impact of economic activity on the environment; and inequality both within and among nations. In addition, it provides a critical evaluation of the tenets of neoclassical economics, a clear introduction to contract theory, and material drawn from new research in behavioral, institutional, and information economics.Understanding Capitalism, Third Edition, is ideal for undergraduate courses in economics and political economy. An Instructor's Manual is available to adopters.FEATURES OF THE THIRD EDITION·Offers a new chapter on the behavioral foundations of economics, showing that the selfishness of the "economic man" leaves out the important role of other social motives and how individual tastes and values evolve in response to experiences·Includes a new chapter that examines how economic success (and poverty) are passed on from parents to children and also looks at the increasing inequality of income and wealth along lines of race and gender·Presents a completely revised and expanded treatment of the revolutionary changes that have been associated with capitalism over the past three centuries·Provides boxed treatments of issues that can serve as the basis of classroom discussions·Defines important terms in the margins throughout the text·Contains a section entitled "Sources of Economic Information" that helps readers locate relevant outside data, both in print and online},
	language = {English},
	publisher = {Oxford University Press},
	author = {Bowles, Samuel and Edwards, Richard and Roosevelt, Frank},
	month = mar,
	year = {2005}
}

@inproceedings{schneider_towards_2012,
	address = {New York, NY, USA},
	series = {{IHI} '12},
	title = {Towards {Frabjous}: {A} {Two}-level {System} for {Functional} {Reactive} {Agent}-based {Epidemic} {Simulation}},
	isbn = {978-1-4503-0781-9},
	shorttitle = {Towards {Frabjous}},
	url = {http://doi.acm.org/10.1145/2110363.2110458},
	doi = {10.1145/2110363.2110458},
	abstract = {Agent-based infection-transmission models, which simulate an infection moving through a population, are being employed more frequently by health policy-makers. However, these models present several obstacles to widespread adoption. They are complex entities and impose a high development and maintenance cost. Current tools can be opaque, requiring multidisciplinary collaboration between a modeler and an expert programmer, and another round of translation when communicating with domain experts. In this paper, we describe the use of functional reactive programming (FRP), a programming paradigm created by imbuing a functional programming language with an intrinsic sense of time, to represent agent-based models in a concise and transparent way. We document the conversion of several agent-based models developed in the popular hybrid modeling tool AnyLogic to a representation in FRP. We also introduce Frabjous, a programming framework and domain-specific language for computational modeling. Frabjous generates human-readable and modifiable FRP code from a model specification, allowing modelers to have two transparent representations in which to program: a high-level model specification, and a full functional programming language with an agent-based modeling framework.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 2Nd {ACM} {SIGHIT} {International} {Health} {Informatics} {Symposium}},
	publisher = {ACM},
	author = {Schneider, Oliver and Dutchyn, Christopher and Osgood, Nathaniel},
	year = {2012},
	keywords = {functional programming, agent-based simulation, simulation, agent- based modeling, domain-specific language, dynamic model, functional reactive},
	pages = {785--790},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/JVIFRA7J/Schneider et al. - 2012 - Towards Frabjous A Two-level System for Functiona.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/UWGCNZ3M/Schneider et al. - 2012 - Towards Frabjous A Two-level System for Functiona.pdf:application/pdf}
}

@techreport{botta_time_2010,
	type = {Documents de travail du {Centre} d'{Economie} de la {Sorbonne}},
	title = {Time in discrete agent-based models of socio-economic systems},
	url = {https://ideas.repec.org/p/mse/cesdoc/10076.html},
	abstract = {We formulate the problem of computing time in discrete dynamical agent-based models in the context of socio-economic modeling. For such formulation, we outline a simple solution. This requires minimal extensions of the original untimed model. The proposed solution relies on the notion of agent-specific schedules of action and on two modeling assumptions. These are fulfilled by most models of pratical interest. For models for which stronger assumptions can be made, we discuss alternative formulations},
	number = {10076},
	urldate = {2017-01-18},
	institution = {Université Panthéon-Sorbonne (Paris 1), Centre d'Economie de la Sorbonne},
	author = {Botta, Nicola and Mandel, Antoine and Ionescu, Cezar},
	year = {2010},
	keywords = {Agent-based models, time},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/7HI553S6/10076.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/3IPCNES2/10076.html:text/html}
}

@inproceedings{courtney_yampa_2003,
	address = {New York, NY, USA},
	series = {Haskell '03},
	title = {The {Yampa} {Arcade}},
	isbn = {978-1-58113-758-3},
	url = {http://doi.acm.org/10.1145/871895.871897},
	doi = {10.1145/871895.871897},
	abstract = {Simulated worlds are a common (and highly lucrative) application domain that stretches from detailed simulation of physical systems to elaborate video game fantasies. We believe that Functional Reactive Programming (FRP) provides just the right level of functionality to develop simulated worlds in a concise, clear and modular way. We demonstrate the use of FRP in this domain by presenting an implementation of the classic "Space Invaders" game in Yampa, our most recent Haskell-embedded incarnation of FRP.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 2003 {ACM} {SIGPLAN} {Workshop} on {Haskell}},
	publisher = {ACM},
	author = {Courtney, Antony and Nilsson, Henrik and Peterson, John},
	year = {2003},
	keywords = {functional programming, Haskell, FRP, hybrid modeling, modeling languages, synchronous dataflow languages},
	pages = {7--18},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/BSF62EH9/Courtney et al. - 2003 - The Yampa Arcade.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/QHA4MHSZ/Courtney et al. - 2003 - The Yampa Arcade.pdf:application/pdf}
}

@inproceedings{sweeney_next_2006,
	address = {New York, NY, USA},
	series = {{POPL} '06},
	title = {The {Next} {Mainstream} {Programming} {Language}: {A} {Game} {Developer}'s {Perspective}},
	isbn = {978-1-59593-027-9},
	shorttitle = {The {Next} {Mainstream} {Programming} {Language}},
	url = {http://doi.acm.org/10.1145/1111037.1111061},
	doi = {10.1145/1111037.1111061},
	abstract = {Game developers have long been early adopters of new technologies. This is so because we are largely unburdened by legacy code: With each new hardware generation, we are free to rethink our software assumptions and develop new products using new tools and even new programming languages. As a result, games are fertile ground for applying academic advances in these areas.And never has our industry been in need of such advances as it is now! The scale and scope of game development has increased more than ten-fold over the past ten years, yet the underlying limitations of the mainstream C/C++/Java/C\# language family remain largely unaddressed.The talk begins with a high-level presentation of the game developer's world: the kinds of algorithms we employ on modern CPUs and GPUs, the difficulties of componentization and concurrency, and the challenges of writing very complex software with real-time performance requirements.The talk then outlines the ways that future programming languages could help us write better code, providing examples derived from experience writing games and software frameworks that support games. The major areas covered are abstraction facilities -- how we can use them to develop more extensible frameworks and components; practical opportunities for employing stronger typing to reduce run-time failures; and the need for pervasive concurrency support, both implicit and explicit, to effectively exploit the several forms of parallelism present in games and graphics.},
	urldate = {2016-11-11},
	booktitle = {Conference {Record} of the 33rd {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Sweeney, Tim},
	year = {2006},
	pages = {269--269},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/P7VUC96F/Sweeney - 2006 - The Next Mainstream Programming Language A Game D.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/BA9QE54A/Sweeney - 2006 - The Next Mainstream Programming Language A Game D.pdf:application/pdf}
}

@book{moore_nature_2011,
	address = {Oxford England ; New York},
	title = {The {Nature} of {Computation}},
	isbn = {978-0-19-923321-2},
	abstract = {Computational complexity is one of the most beautiful fields of modern mathematics, and it is increasingly relevant to other sciences ranging from physics to biology. But this beauty is often buried underneath layers of unnecessary formalism, and exciting recent results like interactive proofs, phase transitions, and quantum computing are usually considered too advanced for the typical student. This book bridges these gaps by explaining the deep ideas of theoretical computer science in a clear and enjoyable fashion, making them accessible to non-computer scientists and to computer scientists who finally want to appreciate their field from a new point of view. The authors start with a lucid and playful explanation of the P vs. NP problem, explaining why it is so fundamental, and so hard to resolve. They then lead the reader through the complexity of mazes and games; optimization in theory and practice; randomized algorithms, interactive proofs, and pseudorandomness; Markov chains and phase transitions; and the outer reaches of quantum computing. At every turn, they use a minimum of formalism, providing explanations that are both deep and accessible. The book is intended for graduate and undergraduate students, scientists from other areas who have long wanted to understand this subject, and experts who want to fall in love with this field all over again.},
	language = {English},
	publisher = {OUP Oxford},
	author = {Moore, Cristopher and Mertens, Stephan},
	month = jun,
	year = {2011}
}

@article{gintis_emergence_2006,
	title = {The {Emergence} of a {Price} {System} from {Decentralized} {Bilateral} {Exchange}},
	volume = {6},
	issn = {1534-5971},
	url = {https://www.degruyter.com/view/j/bejte.2006.6.1/bejte.2006.6.1.1302/bejte.2006.6.1.1302.xml},
	doi = {10.2202/1534-5971.1302},
	abstract = {This paper analyzes the dynamics of completely decentralized bilateral exchange. In such a framework, neither money nor prices as public information exist. Rather, prices represent an agent's barter strategy, and hence are private information. We call these private prices. Agents formulate trade offers and accept or reject offers from other traders, on the basis of their private prices. Private prices are updated by low-scoring agents periodically imitating the strategies of higher-scoring agents. We show that a system of quasi-public prices emerges in the medium run, and these quasi-public prices converge to stationary distributions that are approximately competitive equilibria of the underlying Walrasian model in the long run. We thus provide, for the first time, a general, decentralized disequilibrium adjustment mechanism that renders market equilibrium dynamically stable in a highly simplified production and exchange economy.},
	number = {1},
	urldate = {2016-09-30},
	journal = {Contributions in Theoretical Economics},
	author = {Gintis, Herbert},
	year = {2006},
	pages = {1--15}
}

@techreport{gintis_dynamics_2007,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {The {Dynamics} of {General} {Equilibrium}},
	url = {http://papers.ssrn.com/abstract=1017117},
	abstract = {The Walrasian general equilibrium model is the centrepiece of modern economic theory, but progress in understanding its dynamical properties has been meagre. This article shows that the instability of Walras' tatonnement process is due to the public nature of prices, which leads to excessive correlation in the behaviour of economic agents. When prices are private information, a dynamic with a globally stable stationary state obtains in economies that are unstable in the tâtonnment process. We provide an agent-based model of a multi-sector Walrasian economy with production and exchange, in which prices are private information. This economy is dynamically well behaved.},
	number = {ID 1017117},
	urldate = {2016-09-30},
	institution = {Social Science Research Network},
	author = {Gintis, Herbert},
	month = sep,
	year = {2007},
	keywords = {Herbert  Gintis, Herbert Gintis, SSRN, The Dynamics of General Equilibrium},
	file = {Snapshot:/home/io.nathan/Zotero/storage/3KJ3DQVW/papers.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/W2RKHICT/papers.html:text/html}
}

@book{muller_design_1997,
	address = {Secaucus, NJ, USA},
	edition = {1st},
	title = {The {Design} of {Intelligent} {Agents}: {A} {Layered} {Approach}},
	isbn = {978-3-540-62003-7},
	shorttitle = {The {Design} of {Intelligent} {Agents}},
	publisher = {Springer-Verlag New York, Inc.},
	author = {Muller, Jorg P.},
	year = {1997}
}

@phdthesis{yuxuan_agent-based_2016,
	address = {School Of Computer Science},
	title = {The {Agent}-based {Simulation} {Environment} in {Java}},
	school = {University Of Nottingham},
	author = {Yuxuan, Jin},
	year = {2016}
}

@inproceedings{isaac_abm_2011,
	title = {The {ABM} template models: {A} reformulation with reference implementations},
	shorttitle = {The {ABM} template models},
	url = {http://citeseer.ist.psu.edu/viewdoc/citations;jsessionid=C8EB659E93CA34C448CE444C5E4C4038?doi=10.1.1.946.9304},
	abstract = {CiteSeerX - Document Details (Isaac Councill, Lee Giles, Pradeep Teregowda): This paper refines a well-known set of template models for agent-based modeling and offers new reference implementations. It also addresses issues of design, flexibility, and ease of use that are relevant},
	urldate = {2017-01-26},
	author = {Isaac, Alan G.},
	year = {2011},
	file = {Snapshot:/home/io.nathan/Zotero/storage/99WW5A5J/citations\;jsessionid=C8EB659E93CA34C448CE444C5E4C4038.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/FU688Q3G/citations\;jsessionid=C8EB659E93CA34C448CE444C5E4C4038.html:text/html}
}

@techreport{de_jong_suitability_2014,
	title = {Suitability of {Haskell} for {Multi}-{Agent} {Systems}},
	institution = {University of Twente},
	author = {De Jong, Tanja},
	year = {2014}
}

@techreport{sulzmann_specifying_2007,
	title = {Specifying and {Controlling} {Agents} in {Haskell}},
	author = {Sulzmann, Martin and Lam, Edmund},
	year = {2007}
}

@techreport{grief_semantics_1975,
	address = {Cambridge, MA, USA},
	title = {{SEMANTICS} {OF} {COMMUNICATING} {PARALLEL} {PROCESSES}},
	abstract = {The thesis of this dissertation is that an understanding of the ordering constraints that are introduced among events of parallel process is essential to the understanding of synchronization and that therefore any language for specifying synchronization of parallel process should be based on a theory of such orderings. While it is possible to write specifications for systems of communicating parallel processes by reference to the time ordering of some global clock external to the system, such specifications cannot be as useful as ones which are in terms of orderings derivable within the system. Specifications should place constraints on intended behavior of the computer system itself rather than on the possible observations of the system''s behaviors from some global viewpoint which may in fact be totally unrealizable. The dissertation is a development of a specification language. It is based on a model of computation in which an individual process is represented by a totally ordered set of events. Synchronization properties of systems of independent processes are guarantees that in fact the set of events in the system can be ordered by a partial order which properly contains the union of the processes'' total orders. This system ordering can be caused by the presence in a system of side-effect primitives or of synchronization primitives. Thus this model applies equally well both to busy waiting synchronization based on coordinated use of storage cells by independent processes and to non-busy waiting synchronization such as that induced by semaphores and structured synchronization primitives. In addition to applying to a range of types of synchronization, the specification language is also used to define a programming language. The meaning of a program is the specification of the behavior of the system into which that program is compiled. Specifications can be written for synchronization problems and for their implementations in terms of various primitives.},
	institution = {Massachusetts Institute of Technology},
	author = {Grief, I. and Greif, Irene},
	year = {1975}
}

@inproceedings{claessen_quickcheck:_2000,
	address = {New York, NY, USA},
	series = {{ICFP} '00},
	title = {{QuickCheck}: {A} {Lightweight} {Tool} for {Random} {Testing} of {Haskell} {Programs}},
	isbn = {978-1-58113-202-1},
	shorttitle = {{QuickCheck}},
	url = {http://doi.acm.org/10.1145/351240.351266},
	doi = {10.1145/351240.351266},
	abstract = {Quick Check is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are described as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffices to obtain good coverage of the definition under test.},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the {Fifth} {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Claessen, Koen and Hughes, John},
	year = {2000},
	pages = {268--279},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/CKGG42NQ/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing .pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/JZJFVIQK/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing .pdf:application/pdf}
}

@inproceedings{hughes_programming_2005,
	address = {Berlin, Heidelberg},
	series = {{AFP}'04},
	title = {Programming with {Arrows}},
	isbn = {978-3-540-28540-3},
	url = {http://dx.doi.org/10.1007/11546382_2},
	doi = {10.1007/11546382_2},
	abstract = {Consider this simple Haskell definition, of a function which counts the number of occurrences of a given word w in a string: count w = length . filter (==w) . words This is an example of “point-free” programming style, where we build a function by composing others, and make heavy use of higher-order functions such as filter. Point-free programming is rightly popular: used appropriately, it makes for concise and readable definitions, which are well suited to equational reasoning in the style of Bird and Meertens [2]. It’s also a natural way to assemble programs from components, and closely related to connecting programs via pipes in the UNIX shell.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 5th {International} {Conference} on {Advanced} {Functional} {Programming}},
	publisher = {Springer-Verlag},
	author = {Hughes, John},
	year = {2005},
	pages = {73--129}
}

@book{hutton_programming_2007,
	address = {Cambridge, UK ; New York},
	title = {Programming in {Haskell}},
	isbn = {978-0-521-69269-4},
	abstract = {Haskell is one of the leading languages for teaching functional programming, enabling students to write simpler and cleaner code, and to learn how to structure and reason about programs. This introduction is ideal for beginners: it requires no previous programming experience and all concepts are explained from first principles via carefully chosen examples. Each chapter includes exercises that range from the straightforward to extended projects, plus suggestions for further reading on more advanced topics. The author is a leading Haskell researcher and instructor, well-known for his teaching skills. The presentation is clear and simple, and benefits from having been refined and class-tested over several years. The result is a text that can be used with courses, or for self-learning. Features include freely accessible Powerpoint slides for each chapter, solutions to exercises and examination questions (with solutions) available to instructors, and a downloadable code that's fully compliant with the latest Haskell release.},
	language = {English},
	publisher = {Cambridge University Press},
	author = {Hutton, Graham},
	month = jan,
	year = {2007}
}

@inproceedings{dawson_opening_2014,
	title = {Opening pandora's box: {Some} insight into the inner workings of an {Agent}-{Based} {Simulation} environment},
	shorttitle = {Opening pandora's box},
	doi = {10.15439/2014F335},
	abstract = {Agent-Based Simulation (ABS) environments are somewhat of a black box to many modelers in Social Simulation or Economics and their inner workings are often only understood by the computer scientists who developed them. We intend to shed some light into the inner workings of such systems. For this purpose we have developed our own simple ABS environment in C++ using hierarchical state machines. In this paper we provide insight into the design of our ABS environment and then test the performance of it by comparing it to that of an "off the shelf" commercial package. While some programming knowledge is required to understand the paper in all its depth we believe that non programming experts will also benefit from this paper as it provides an insight into the underlying mechanisms operating within an ABS using graphical representations and explanations that avoid heavy technical jargon.},
	booktitle = {2014 {Federated} {Conference} on {Computer} {Science} and {Information} {Systems}},
	author = {Dawson, D. and Siebers, P. O. and Vu, Tuong Manh},
	month = sep,
	year = {2014},
	keywords = {ABS environments, agent-based simulation environment, Automata, black box, C++, C++ language, Computational modeling, economics, Educational institutions, graphical representations, hierarchical state machines, History, Object oriented modeling, Observers, Pandora box, social simulation, software agents, Unified modeling language},
	pages = {1453--1460},
	file = {IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/582RWBGR/6933189.html:text/html;IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/WQ6X54MH/6933189.html:text/html;IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/IXV34UZ5/6933189.html:text/html;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/F8IIRZTA/Dawson et al. - 2014 - Opening pandora's box Some insight into the inner.pdf:application/pdf;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/6ZCWVBCQ/Dawson et al. - 2014 - Opening pandora's box Some insight into the inner.pdf:application/pdf;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/QQFQRT79/Dawson et al. - 2014 - Opening pandora's box Some insight into the inner.pdf:application/pdf}
}

@inproceedings{varela_modelling_2004,
	address = {New York, NY, USA},
	series = {{ERLANG} '04},
	title = {On {Modelling} {Agent} {Systems} with {Erlang}},
	isbn = {978-1-58113-918-1},
	url = {http://doi.acm.org/10.1145/1022471.1022481},
	doi = {10.1145/1022471.1022481},
	abstract = {Multi-agent systems are a kind of concurrent distributed systems. In this work, some guidelines on how to create multi-agent systems using Erlang are presented. The modelled system supports cooperation among agents by plan exchange, reconfiguration and has a certain fault-tolerance. The distributed and concurrent functional programming Erlang, together with OTP platform, allows the creation of high-availability and fault-tolerant concurrent and distributed systems, and it seems to be an interesting framework for implementing multi-agent systems.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 2004 {ACM} {SIGPLAN} {Workshop} on {Erlang}},
	publisher = {ACM},
	author = {Varela, Carlos and Abalde, Carlos and Castro, Laura and Gulías, Jose},
	year = {2004},
	keywords = {functional programming, multi-agent systems, distributed systems},
	pages = {65--70},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/WFAZNWNA/Varela et al. - 2004 - On Modelling Agent Systems with Erlang.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/VJ6K5HSU/Varela et al. - 2004 - On Modelling Agent Systems with Erlang.pdf:application/pdf}
}

@book{darley_nasdaq_2007,
	address = {River Edge, NJ, USA},
	title = {Nasdaq {Market} {Simulation}: {Insights} on a {Major} {Market} from the {Science} of {Complex} {Adaptive} {Systems}},
	isbn = {978-981-270-001-8},
	shorttitle = {Nasdaq {Market} {Simulation}},
	abstract = {This pioneering book describes the applications of agent-based modeling to financial markets. It presents a new paradigm for finance, where markets are treated as complex systems whose behavior emerges as a result of interactions of market participants, market institutions, and market rules. This includes both a presentation of the conceptual model and its software implementation. It also summarises the result of the profound research on the successful practical application of this new approach to answer questions regarding the Nasdaq Stock Market s decimalization that was implemented in 2001. The book presents conceptual foundations for modeling markets as complex systems. It describes the agent-based model of the Nasdaq stock market, including strategies used by market-makers and investors, market participants interactions, and impacts of rules and regulations. It includes analyses of simulation behavior, comparison with the behaviors observed in the real-world markets (existence of fat tails, spread clustering, etc.), and predictions about possible outcomes of decimalization. A framework for calibrating the market behavior and individual market-makers strategies to historical data is also presented.},
	publisher = {World Scientific Publishing Co., Inc.},
	author = {Darley, Vincent and Outkin, Alexander V.},
	year = {2007}
}

@inproceedings{wadler_monads_1995,
	address = {London, UK, UK},
	title = {Monads for {Functional} {Programming}},
	isbn = {978-3-540-59451-2},
	url = {http://dl.acm.org/citation.cfm?id=647698.734146},
	urldate = {2016-11-16},
	booktitle = {Advanced {Functional} {Programming}, {First} {International} {Spring} {School} on {Advanced} {Functional} {Programming} {Techniques}-{Tutorial} {Text}},
	publisher = {Springer-Verlag},
	author = {Wadler, Philip},
	year = {1995},
	pages = {24--52}
}

@techreport{lehalle_market_2013,
	type = {World {Scientific} {Books}},
	title = {Market {Microstructure} in {Practice}},
	url = {http://econpapers.repec.org/bookchap/wsiwsbook/8967.htm},
	abstract = {Market Microstructure in Practice comments on the consequences of Reg NMS and MiFID on market microstructure. It covers changes in market design, electronic trading, and investor and trader behaviors. The emergence of high frequency trading and critical events like the ¡°Flash Crash¡± of 2010 are also analyzed in depth. Edited by Charles-Albert Lehalle and Sophie Laruelle, and with contributions from Romain Burgot, St¨¦phanie Pelin and Matthieu Lasnier, this book uses a quantitative viewpoint to help students, academics, regulators, policy makers, and practitioners understand how an attrition of liquidity and regulatory changes can impact the whole microstructure of financial markets. A mathematical Appendix details the quantitative tools and indicators used throughout the book, allowing the reader to go further on his own. Contents: Monitoring the Fragmentation at Any Scale: Fluctuations of Market Shares: A First Graph Smart Order Routing (SOR), A Structural Component of European Price Formation Process Still Looking for the Optimal Tick Size Can We See in the Dark? Understanding the Stakes and the Roots of Fragmentation: From Intraday Market Share to Volume Curves: Some Stationarity Issues Does More Liquidity Guarantee a Better Market Share? A Little Story About the European Bid-Ask Spread The Agenda of High Frequency Traders: How Do They Extend Their Universe? The Link Between Fragmentation and Systemic Risk Optimal Organisations for Optimal Trading: Organising a Trading Structure to Answer to a Fragmented Landscape Market Impact Measurements: Understanding the Price Formation Process from the Viewpoint of One Investor Optimal Trading Methods Readership: Students, academics, researchers, finance professionals, regulators and policy makers interested in public markets, exchange and securities.},
	urldate = {2016-10-03},
	institution = {World Scientific Publishing Co. Pte. Ltd.},
	author = {Lehalle, Charles-Albert and Laruelle, Sophie},
	year = {2013},
	keywords = {ESMA, Finance, Financial Markets, Market Microstructure, MiFID, Reg NMS, Regulation},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/F5CWRBW4/8967.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/25AHM9IC/8967.html:text/html}
}

@article{baker_market_2013,
	title = {Market {Microstructure} in {Emerging} and {Developed} {Markets}},
	url = {http://digitalcommons.fairfield.edu/business-books/37},
	journal = {Business Faculty Book Gallery},
	author = {Baker, H. Kent and Kiymaz, Halil and Alan, Nazli Sila and Bildik, Recep and Schwartz, Robert},
	month = jan,
	year = {2013},
	file = {"Market Microstructure in Emerging and Developed Markets" by H. Kent Baker, Halil Kiymaz et al.:/home/io.nathan/Zotero/storage/EX9CUCD4/37.html:text/html;"Market Microstructure in Emerging and Developed Markets" by H. Kent Baker, Halil Kiymaz et al.:/home/io.nathan/Zotero/storage/SC3MSAP3/37.html:text/html}
}

@book{genesereth_logical_1987,
	address = {San Francisco, CA, USA},
	title = {Logical {Foundations} of {Artificial} {Intelligence}},
	isbn = {978-0-934613-31-6},
	publisher = {Morgan Kaufmann Publishers Inc.},
	author = {Genesereth, Michael R. and Nilsson, Nils J.},
	year = {1987}
}

@inproceedings{wah_latency_2013,
	address = {New York, NY, USA},
	series = {{EC} '13},
	title = {Latency {Arbitrage}, {Market} {Fragmentation}, and {Efficiency}: {A} {Two}-market {Model}},
	isbn = {978-1-4503-1962-1},
	shorttitle = {Latency {Arbitrage}, {Market} {Fragmentation}, and {Efficiency}},
	url = {http://doi.acm.org/10.1145/2482540.2482577},
	doi = {10.1145/2482540.2482577},
	abstract = {We study the effect of latency arbitrage on allocative efficiency and liquidity in fragmented financial markets. We propose a simple model of latency arbitrage in which a single security is traded on two exchanges, with aggregate information available to regular traders only after some delay. An infinitely fast arbitrageur profits from market fragmentation by reaping the surplus when the two markets diverge due to this latency in cross-market communication. We develop a discrete-event simulation system to capture this processing and information transfer delay, and using an agent-based approach, we simulate the interactions between high-frequency and zero-intelligence trading agents at the millisecond level. We then evaluate allocative efficiency and market liquidity arising from the simulated order streams, and we find that market fragmentation and the presence of a latency arbitrageur reduces total surplus and negatively impacts liquidity. By replacing continuous-time markets with periodic call markets, we eliminate latency arbitrage opportunities and achieve further efficiency gains through the aggregation of orders over short time periods.},
	urldate = {2017-02-03},
	booktitle = {Proceedings of the {Fourteenth} {ACM} {Conference} on {Electronic} {Commerce}},
	publisher = {ACM},
	author = {Wah, Elaine and Wellman, Michael P.},
	year = {2013},
	keywords = {allocative efficiency, high-frequency trading, regulation nms},
	pages = {855--872},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/E57FC22X/Wah and Wellman - 2013 - Latency Arbitrage, Market Fragmentation, and Effic.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/BQQUVFXH/Wah and Wellman - 2013 - Latency Arbitrage, Market Fragmentation, and Effic.pdf:application/pdf}
}

@incollection{bove_language_2009,
	address = {Berlin, Heidelberg},
	title = {Language {Engineering} and {Rigorous} {Software} {Development}},
	isbn = {978-3-642-03152-6},
	url = {http://dx.doi.org/10.1007/978-3-642-03153-3_2},
	abstract = {In these lecture notes we give an introduction to functional programming with dependent types. We use the dependently typed programming language Agda which is an extension of Martin-Löf type theory. First we show how to do simply typed functional programming in the style of Haskell and ML. Some differences between Agda's type system and the Hindley-Milner type system of Haskell and ML are also discussed. Then we show how to use dependent types for programming and we explain the basic ideas behind type-checking dependent types. We go on to explain the Curry-Howard identification of propositions and types. This is what makes Agda a programming logic and not only a programming language. According to Curry-Howard, we identify programs and proofs, something which is possible only by requiring that all program terminate. However, at the end of these notes we present a method for encoding partial and general recursive functions as total functions using dependent types.},
	urldate = {2017-05-12},
	publisher = {Springer-Verlag},
	author = {Bove, Ana and Dybjer, Peter},
	editor = {Bove, Ana and Barbosa, Luís Soares and Pardo, Alberto and Pinto, Jorge Sousa},
	year = {2009},
	doi = {10.1007/978-3-642-03153-3_2},
	pages = {57--99}
}

@phdthesis{bezirgiannis_improving_2013,
	title = {Improving {Performance} of {Simulation} {Software} {Using} {Haskells} {Concurrency} \& {Parallelism}},
	school = {Utrecht University - Dept. of Information and Computing Sciences},
	author = {Bezirgiannis, Nikolaos},
	year = {2013}
}

@book{aldridge_high-frequency_2009,
	title = {High-{Frequency} {Trading}: {A} {Practical} {Guide} to {Algorithmic} {Strategies} and {Trading} {Systems}},
	isbn = {978-0-470-57977-0},
	shorttitle = {High-{Frequency} {Trading}},
	abstract = {A hands-on guide to the fast and ever-changing world of high-frequency, algorithmic trading Financial markets are undergoing rapid innovation due to the continuing proliferation of computer power and algorithms. These developments have created a new investment discipline called high-frequency trading. This book covers all aspects of high-frequency trading, from the business case and formulation of ideas through the development of trading systems to application of capital and subsequent performance evaluation. It also includes numerous quantitative trading strategies, with market microstructure, event arbitrage, and deviations arbitrage discussed in great detail.  Contains the tools and techniques needed for building a high-frequency trading system Details the post-trade analysis process, including key performance benchmarks and trade quality evaluation Written by well-known industry professional Irene Aldridge  Interest in high-frequency trading has exploded over the past year. This book has what you need to gain a better understanding of how it works and what it takes to apply this approach to your trading endeavors.},
	language = {en},
	publisher = {John Wiley and Sons},
	author = {Aldridge, Irene},
	month = dec,
	year = {2009},
	note = {Google-Books-ID: fEXKZAAVu4oC},
	keywords = {Business \& Economics / General, Business \& Economics / Investments \& Securities / General}
}

@article{hughes_generalising_2000,
	title = {Generalising {Monads} to {Arrows}},
	volume = {37},
	issn = {0167-6423},
	url = {http://dx.doi.org/10.1016/S0167-6423(99)00023-4},
	doi = {10.1016/S0167-6423(99)00023-4},
	number = {1-3},
	urldate = {2016-11-16},
	journal = {Sci. Comput. Program.},
	author = {Hughes, John},
	month = may,
	year = {2000},
	pages = {67--111}
}

@mastersthesis{meisinger_game-engine-architektur_2010,
	address = {Austria},
	title = {Game-{Engine}-{Architektur} mit funktional-reaktiver {Programmierung} in {Haskell}/{Yampa}},
	language = {German},
	school = {Fachhochschule Oberösterreich - Fakultät für Informatik, Kommunikation und Medien (Campus Hagenberg)},
	author = {Meisinger, Gerold},
	year = {2010}
}

@inproceedings{perez_functional_2016,
	address = {New York, NY, USA},
	series = {Haskell 2016},
	title = {Functional {Reactive} {Programming}, {Refactored}},
	isbn = {978-1-4503-4434-0},
	url = {http://doi.acm.org/10.1145/2976002.2976010},
	doi = {10.1145/2976002.2976010},
	abstract = {Functional Reactive Programming (FRP) has come to mean many things. Yet, scratch the surface of the multitude of realisations, and there is great commonality between them. This paper investigates this commonality, turning it into a mathematically coherent and practical FRP realisation that allows us to express the functionality of many existing FRP systems and beyond by providing a minimal FRP core parameterised on a monad. We give proofs for our theoretical claims and we have verified the practical side by benchmarking a set of existing, non-trivial Yampa applications running on top of our new system with very good results.},
	urldate = {2016-12-19},
	booktitle = {Proceedings of the 9th {International} {Symposium} on {Haskell}},
	publisher = {ACM},
	author = {Perez, Ivan and Baerenz, Manuel and Nilsson, Henrik},
	year = {2016},
	keywords = {Haskell, monadic streams, stream programming, Functional Reactive Programming, reactive program- ming},
	pages = {33--44},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/P6DGWVUG/Perez et al. - 2016 - Functional Reactive Programming, Refactored.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/IIQ3I92S/Perez et al. - 2016 - Functional Reactive Programming, Refactored.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/CU7HCWAC/Perez et al. - 2016 - Functional Reactive Programming, Refactored.pdf:application/pdf}
}

@inproceedings{wan_functional_2000,
	address = {New York, NY, USA},
	series = {{PLDI} '00},
	title = {Functional {Reactive} {Programming} from {First} {Principles}},
	isbn = {978-1-58113-199-4},
	url = {http://doi.acm.org/10.1145/349299.349331},
	doi = {10.1145/349299.349331},
	abstract = {Functional Reactive Programming, or FRP, is a general framework for programming hybrid systems in a high-level, declarative manner. The key ideas in FRP are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are time-ordered sequences of discrete-time event occurrences. FRP is the essence of Fran, a domain-specific language embedded in Haskell for programming reactive animations, but FRP is now also being used in vision, robotics and other control systems applications. 
In this paper we explore the formal semantics of FRP and how it
relates to an implementation based on streams that represent (and therefore only approximate) continuous behaviors. We show that, in the limit as the sampling interval goes to zero, the implementation is faithful to the formal, continuous semantics, but only when certain constraints on behaviors are observed. We explore the nature of these constraints, which vary amongst the FRP primitives. Our results show both the power and limitations of this approach to language design and implementation. As an example of a limitation, we show that streams are incapable of representing instantaneous predicate events over behaviors.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 2000 {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {ACM},
	author = {Wan, Zhanyong and Hudak, Paul},
	year = {2000},
	pages = {242--252},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/QTXQ44D8/Wan and Hudak - 2000 - Functional Reactive Programming from First Princip.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/P6Q6MVKX/Wan and Hudak - 2000 - Functional Reactive Programming from First Princip.pdf:application/pdf}
}

@inproceedings{nilsson_functional_2002,
	address = {New York, NY, USA},
	series = {Haskell '02},
	title = {Functional {Reactive} {Programming}, {Continued}},
	isbn = {978-1-58113-605-0},
	url = {http://doi.acm.org/10.1145/581690.581695},
	doi = {10.1145/581690.581695},
	abstract = {Functional Reactive Programming (FRP) extends a host programming language with a notion of time flow. Arrowized FRP (AFRP) is a version of FRP embedded in Haskell based on the arrow combinators. AFRP is a powerful synchronous dataflow programming language with hybrid modeling capabilities, combining advanced synchronous dataflow features with the higher-order lazy functional abstractions of Haskell. In this paper, we describe the AFRP programming style and our Haskell-based implementation. Of particular interest are the AFRP combinators that support dynamic collections and continuation-based switching. We show how these combinators can be used to express systems with an evolving structure that are difficult to model in more traditional dataflow languages.},
	urldate = {2016-11-04},
	booktitle = {Proceedings of the 2002 {ACM} {SIGPLAN} {Workshop} on {Haskell}},
	publisher = {ACM},
	author = {Nilsson, Henrik and Courtney, Antony and Peterson, John},
	year = {2002},
	keywords = {functional programming, Haskell, FRP, hybrid modeling, synchronous dataflow languages, domain-specific languages},
	pages = {51--64},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/PN5DAWIV/Nilsson et al. - 2002 - Functional Reactive Programming, Continued.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/S8JVEM69/Nilsson et al. - 2002 - Functional Reactive Programming, Continued.pdf:application/pdf}
}

@techreport{jankovic_functional_2007,
	title = {Functional {Programming} and {Discrete} {Simulation}},
	author = {Jankovic, Peter and Such, Ondrej},
	year = {2007}
}

@phdthesis{mun_hon_functional_2005,
	address = {Sydney, Australia},
	title = {Functional {Programming} and 3D {Games}},
	abstract = {Games are commonly programmed in imperative languages.
                Functional languages have been known to have benefits but have
                rarely been used to program games. In this thesis we implement
                a first person shooting game in Haskell and Yampa. The merits
                of this approach are examined.},
	school = {University of New South Wales},
	author = {Mun Hon, Cheong},
	year = {2005}
}

@incollection{nilsson_functional_2003,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Functional {Hybrid} {Modeling}},
	copyright = {©2003 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-00389-2 978-3-540-36388-0},
	url = {http://link.springer.com/chapter/10.1007/3-540-36388-2_25},
	abstract = {The modeling and simulation of physical systems is of key importance in many areas of science and engineering, and thus can bene- fit from high-quality software tools. In previous research we have demonstrated how functional programming can form the basis of an expressive language for causal hybrid modeling and simulation. There is a growing realization, however, that a move toward non-causal modeling is necessary for coping with the ever increasing size and complexity of modeling problems. Our goal is to combine the strengths of functional programming and non-causal modeling to create a powerful, strongly typed fully declarative modeling language that provides modeling and simulation capabilities beyond the current state of the art. Although our work is still in its very early stages, we believe that this paper clearly articulates the need for improved modeling languages and shows how functional programming techniques can play a pivotal role in meeting this need.},
	language = {en},
	number = {2562},
	urldate = {2016-10-31},
	booktitle = {Practical {Aspects} of {Declarative} {Languages}},
	publisher = {Springer Berlin Heidelberg},
	author = {Nilsson, Henrik and Peterson, John and Hudak, Paul},
	editor = {Dahl, Veronica and Wadler, Philip},
	month = jan,
	year = {2003},
	doi = {10.1007/3-540-36388-2_25},
	keywords = {Software Engineering, Logics and Meanings of Programs, Programming Techniques, Compilers, Interpreters, Programming Languages, Programming Languages, Compilers, Interpreters},
	pages = {376--390},
	file = {Snapshot:/home/io.nathan/Zotero/storage/IZM67KI5/10.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/A82NMJCK/10.html:text/html}
}

@inproceedings{henderson_functional_1982,
	address = {New York, NY, USA},
	series = {{LFP} '82},
	title = {Functional {Geometry}},
	isbn = {978-0-89791-082-8},
	url = {http://doi.acm.org/10.1145/800068.802148},
	doi = {10.1145/800068.802148},
	abstract = {A method of describing pictures is introduced. The equations, which describe the appearance of a picture, also form a purely functional program which can be used to compute the set of lines necessary to plot the picture on a graphical device. The method is illustrated by using it to describe the structure of one of the woodcuts of Maurits Escher.},
	urldate = {2016-12-09},
	booktitle = {Proceedings of the 1982 {ACM} {Symposium} on {LISP} and {Functional} {Programming}},
	publisher = {ACM},
	author = {Henderson, Peter},
	year = {1982},
	pages = {179--187},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/3HMA3EWS/Henderson - 1982 - Functional Geometry.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/GMXBBVK6/Henderson - 1982 - Functional Geometry.pdf:application/pdf}
}

@incollection{vendrov_frabjous:_2014,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Frabjous: {A} {Declarative} {Domain}-{Specific} {Language} for {Agent}-{Based} {Modeling}},
	copyright = {©2014 Springer International Publishing Switzerland},
	isbn = {978-3-319-05578-7 978-3-319-05579-4},
	shorttitle = {Frabjous},
	url = {http://link.springer.com/chapter/10.1007/978-3-319-05579-4_47},
	abstract = {Agent-based modeling (ABM) is a powerful tool for the study of complex systems; but agent-based models are notoriously difficult to create, modify, and reason about, especially in contrast to system dynamics models. We argue that these difficulties are strongly related to the choice of specification language, and that they can be mitigated by using functional reactive programming (FRP), a paradigm for describing dynamic systems. We describe Frabjous, a new language for agent-based modeling based on FRP, and discuss its software engineering benefits and their broader implications for language choice in ABM.},
	language = {en},
	number = {8393},
	urldate = {2016-10-31},
	booktitle = {Social {Computing}, {Behavioral}-{Cultural} {Modeling} and {Prediction}},
	publisher = {Springer International Publishing},
	author = {Vendrov, Ivan and Dutchyn, Christopher and Osgood, Nathaniel D.},
	editor = {Kennedy, William G. and Agarwal, Nitin and Yang, Shanchieh Jay},
	month = apr,
	year = {2014},
	doi = {10.1007/978-3-319-05579-4_47},
	keywords = {functional programming, agent-based simulation, simulation, Agent-based modeling, Computer Communication Networks, Information Systems Applications (incl. Internet), domain-specific language, dynamic model, functional reactive, Computer Appl. in Social and Behavioral Sciences, Computers and Society, Data Mining and Knowledge Discovery, Management of Computing and Information Systems},
	pages = {385--392},
	file = {Snapshot:/home/io.nathan/Zotero/storage/QNAUCNTW/10.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/6ZSU4JKC/10.html:text/html}
}

@techreport{clinger_foundations_1981,
	address = {Cambridge, MA, USA},
	title = {Foundations of {Actor} {Semantics}},
	abstract = {The actor message-passing model of concurrent computation has inspired new ideas in the areas of knowledge-based systems, programming languages and their semantics, and computer systems architecture. This thesis extends and unifies the work of Carl Hewitt, Irene Greif, Henry Baker, and Giuseppe Attardi, who developed the mathematical content of the model. The ordering laws postulated by Hewitt and Baker can be proved using a notion of global time. The most general ordering laws are equivalent to an axiom of realizability in global time. Since nondeterministic concurrency is more fundamental than deterministic sequential computation, there may be no need to take fixed points in the underlying domain of a power domain. Power domains built from incomplete domains can solve the problem of providing a fixed point semantics for a class of nondeterministic programming languages in which a fair merge can be written. The locality laws postulated by Hewitt and Baker may be proved for the semantics of an actor-based language. Altering the semantics slightly can falsify the locality laws. The locality laws thus constrain what counts as an actor semantics.},
	institution = {Massachusetts Institute of Technology},
	author = {Clinger, William D},
	year = {1981}
}

@techreport{di_stefano_exat:_2007,
	title = {{eXAT}: an {Experimental} {Tool} for {Programming} {Multi}-{Agent} {Systems} in {Erlang}},
	author = {Di Stefano, Antonella and Santoro, Corrado},
	year = {2007}
}

@article{kirman_evolving_2001,
	title = {Evolving market structure: {An} {ACE} model of price dispersion and loyalty},
	volume = {25},
	issn = {0165-1889},
	shorttitle = {Evolving market structure},
	url = {http://econpapers.repec.org/article/eeedyncon/v_3a25_3ay_3a2001_3ai_3a3-4_3ap_3a459-502.htm},
	number = {3-4},
	urldate = {2016-12-12},
	journal = {Journal of Economic Dynamics and Control},
	author = {Kirman, Alan and Vriend, Nicolaas},
	year = {2001},
	pages = {459--502},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/M4RPRHJH/v_3a25_3ay_3a2001_3ai_3a3-4_3ap_3a459-502.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/9TQ8X96B/v_3a25_3ay_3a2001_3ai_3a3-4_3ap_3a459-502.html:text/html}
}

@article{nowak_evolutionary_1992,
	title = {Evolutionary games and spatial chaos},
	volume = {359},
	copyright = {© 1992 Nature Publishing Group},
	issn = {0028-0836},
	url = {http://www.nature.com/nature/journal/v359/n6398/abs/359826a0.html},
	doi = {10.1038/359826a0},
	language = {en},
	number = {6398},
	urldate = {2017-01-17},
	journal = {Nature},
	author = {Nowak, Martin A. and May, Robert M.},
	month = oct,
	year = {1992},
	pages = {826--829},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/249DX8ED/Nowak and May - 1992 - Evolutionary games and spatial chaos.pdf:application/pdf;Full Text PDF:/home/io.nathan/Zotero/storage/RTWIWUBX/Nowak and May - 1992 - Evolutionary games and spatial chaos.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/S4K44BBF/359826a0.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/ACJCZADC/359826a0.html:text/html}
}

@article{huberman_evolutionary_1993,
	title = {Evolutionary games and computer simulations},
	volume = {90},
	issn = {0027-8424, 1091-6490},
	url = {http://www.pnas.org/content/90/16/7716},
	abstract = {The Prisoner's Dilemma has long been considered the paradigm for studying the emergence of cooperation among selfish individuals. Because of its importance, it has been studied through computer experiments as well as in the laboratory and by analytical means. However, there are important differences between the way a system composed of many interacting elements is simulated by a digital machine and the manner in which it behaves when studied in real experiments. In some instances, these disparities can be marked enough so as to cast doubt on the implications of cellular automata-type simulations for the study of cooperation in social systems. In particular, if such a simulation imposes space-time granularity, then its ability to describe the real world may be compromised. Indeed, we show that the results of digital simulations regarding territoriality and cooperation differ greatly when time is discrete as opposed to continuous.},
	language = {en},
	number = {16},
	urldate = {2017-01-17},
	journal = {Proceedings of the National Academy of Sciences},
	author = {Huberman, B. A. and Glance, N. S.},
	month = aug,
	year = {1993},
	pmid = {8356075},
	pages = {7716--7718},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/3NNM25PF/Huberman and Glance - 1993 - Evolutionary games and computer simulations.pdf:application/pdf;Full Text PDF:/home/io.nathan/Zotero/storage/S63U46TG/Huberman and Glance - 1993 - Evolutionary games and computer simulations.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/5RMFZDRU/7716.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/3XWCK5EQ/7716.html:text/html}
}

@article{dawid_evolutionary_2007,
	series = {Tenth {Workshop} on {Economic} {Heterogeneous} {Interacting} {AgentsWEHIA} 2005},
	title = {Evolutionary game dynamics and the analysis of agent-based imitation models: {The} long run, the medium run and the importance of global analysis},
	volume = {31},
	issn = {0165-1889},
	shorttitle = {Evolutionary game dynamics and the analysis of agent-based imitation models},
	url = {http://www.sciencedirect.com/science/article/pii/S0165188907000127},
	doi = {10.1016/j.jedc.2007.01.002},
	abstract = {In this paper it is examined under which circumstances analytical concepts developed in evolutionary game theory can be usefully applied to predict the behavior of imitation processes of several interacting finite populations of agents. I review results concerning stochastic stability and approximation by deterministic dynamics in the long run and in the medium run and complement the theoretical analysis with insights obtained from simulations. In particular, it is demonstrated that the predictive power of deterministic dynamic analysis depends on the structure of the basins of attraction with respect to that dynamical system. Methods developed for the global analysis of deterministic systems turn out to be useful to characterize the predictive power of the deterministic analysis.},
	number = {6},
	urldate = {2016-09-30},
	journal = {Journal of Economic Dynamics and Control},
	author = {Dawid, Herbert},
	month = jun,
	year = {2007},
	keywords = {Basins of attraction, Evolutionary stability, Imitation, Stochastic stability},
	pages = {2108--2133},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/KAVHM6RM/Dawid - 2007 - Evolutionary game dynamics and the analysis of age.pdf:application/pdf;ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/IT6HWN8H/Dawid - 2007 - Evolutionary game dynamics and the analysis of age.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/V2E39ZMR/S0165188907000127.html:text/html;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/E4BDVAPE/S0165188907000127.html:text/html}
}

@book{noauthor_emergent_2008,
	address = {Milano},
	title = {Emergent {Macroeconomics}},
	isbn = {978-88-470-0724-6 978-88-470-0725-3},
	url = {http://link.springer.com/10.1007/978-88-470-0725-3},
	language = {en},
	urldate = {2016-09-30},
	publisher = {Springer Milan},
	year = {2008}
}

@article{budish_editors_2015,
	title = {Editor's {Choice} {The} {High}-{Frequency} {Trading} {Arms} {Race}: {Frequent} {Batch} {Auctions} as a {Market} {Design} {Response}},
	volume = {130},
	shorttitle = {Editor's {Choice} {The} {High}-{Frequency} {Trading} {Arms} {Race}},
	url = {http://econpapers.repec.org/article/oupqjecon/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.htm},
	abstract = {The high-frequency trading arms race is a symptom of flawed market design. Instead of the continuous limit order book market design that is currently predominant, we argue that financial exchanges should use frequent batch auctions: uniform price double auctions conducted, for example, every tenth of a second. That is, time should be treated as discrete instead of continuous, and orders should be processed in a batch auction instead of serially. Our argument has three parts. First, we use millisecond-level direct-feed data from exchanges to document a series of stylized facts about how the continuous market works at high-frequency time horizons: (i) correlations completely break down; which (ii) leads to obvious mechanical arbitrage opportunities; and (iii) competition has not affected the size or frequency of the arbitrage opportunities, it has only raised the bar for how fast one has to be to capture them. Second, we introduce a simple theory model which is motivated by and helps explain the empirical facts. The key insight is that obvious mechanical arbitrage opportunities, like those observed in the data, are built into the market design—continuous-time serial-processing implies that even symmetrically observed public information creates arbitrage rents. These rents harm liquidity provision and induce a never-ending socially wasteful arms race for speed. Last, we show that frequent batch auctions directly address the flaws of the continuous limit order book. Discrete time reduces the value of tiny speed advantages, and the auction transforms competition on speed into competition on price. Consequently, frequent batch auctions eliminate the mechanical arbitrage rents, enhance liquidity for investors, and stop the high-frequency trading arms race. JEL Codes: D47, D44, D82, G10, G14, G20.},
	number = {4},
	urldate = {2016-12-12},
	journal = {The Quarterly Journal of Economics},
	author = {Budish, Eric and Cramton, Peter and Shim, John},
	year = {2015},
	pages = {1547--1621},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/3UWECS8Q/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/BBUKJRMV/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/GE2ZFFCC/v_3a130_3ay_3a2015_3ai_3a4_3ap_3a1547-1621.html:text/html}
}

@book{gamma_design_1994,
	edition = {1 edition},
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	shorttitle = {Design {Patterns}},
	abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John and Booch, Grady},
	month = oct,
	year = {1994}
}

@inproceedings{ionescu_dependently-typed_2012,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Dependently-{Typed} {Programming} in {Scientific} {Computing}},
	copyright = {©2013 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-41581-4 978-3-642-41582-1},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-41582-1_9},
	abstract = {Computer simulations are essential in virtually every scientific discipline, even more so in those such as economics or climate change where the ability to make laboratory experiments is limited. Therefore, it is important to ensure that the models are implemented correctly, that they can be re-implemented and that the results can be reproduced. Typically, though, the models are described by a mixture of prose and mathematics which is insufficient for these purposes. We argue that using dependent types allows us to gradually reduce the gap between the mathematical description and the implementation, and we give examples from economic modelling. We discuss the consequences that our incremental approach has on programming style and the requirements it imposes on the dependently-typed programming languages used.},
	language = {en},
	urldate = {2016-12-12},
	booktitle = {Implementation and {Application} of {Functional} {Languages}},
	publisher = {Springer Berlin Heidelberg},
	author = {Ionescu, Cezar and Jansson, Patrik},
	editor = {Hinze, Ralf},
	month = aug,
	year = {2012},
	doi = {10.1007/978-3-642-41582-1_9},
	keywords = {Software Engineering, Logics and Meanings of Programs, Programming Techniques, Information Systems Applications (incl. Internet), Compilers, Interpreters, Programming Languages, Programming Languages, Compilers, Interpreters, Mathematical Logic and Formal Languages},
	pages = {140--156},
	file = {Snapshot:/home/io.nathan/Zotero/storage/N66ADBRB/978-3-642-41582-1_9.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/X3NH7SQF/978-3-642-41582-1_9.html:text/html}
}

@inproceedings{nilsson_declarative_2014,
	address = {New York, NY, USA},
	series = {{PPDP} '14},
	title = {Declarative {Game} {Programming}: {Distilled} {Tutorial}},
	isbn = {978-1-4503-2947-7},
	shorttitle = {Declarative {Game} {Programming}},
	url = {http://doi.acm.org/10.1145/2643135.2643160},
	doi = {10.1145/2643135.2643160},
	abstract = {Video games are usually not programmed very declaratively. There are a number of reasons for this, from low-level efficiency concerns, via the nature of commonly employed programming languages, libraries, and frameworks, to the conceptual nature of such games, with state and effects being omnipresent. However, by structuring games in terms of time-varying values and transformations on such values, it is possible to design and implement video games in a more declarative way. This tutorial shows how this can be achieved through Functional Reactive Programming (FRP) by implementing the high-level parts of a 2D game akin to the classical game Breakout. The tutorial uses the Haskell-embedded FRP implementation Yampa and bindings to SDL (Simple DirectMedia Layer) to obtain game play and visual standards typical of the 2D genre; for example, as seen in many currently popular games for smartphones and tablets.},
	urldate = {2016-10-31},
	booktitle = {Proceedings of the 16th {International} {Symposium} on {Principles} and {Practice} of {Declarative} {Programming}},
	publisher = {ACM},
	author = {Nilsson, Henrik and Perez, Ivan},
	year = {2014},
	keywords = {Functional Reactive Programming, Hybrid Modelling, Video Game Programming},
	pages = {159--160},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/8TJGD92C/Nilsson and Perez - 2014 - Declarative Game Programming Distilled Tutorial.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/RF7KVI8X/Nilsson and Perez - 2014 - Declarative Game Programming Distilled Tutorial.pdf:application/pdf}
}

@article{oprea_continuous_2014,
	title = {Continuous time and communication in a public-goods experiment},
	volume = {108},
	issn = {0167-2681},
	url = {http://www.sciencedirect.com/science/article/pii/S0167268114002509},
	doi = {10.1016/j.jebo.2014.09.012},
	abstract = {We investigate the nature of continuous time strategic interaction in public-goods games. In one set of treatments, four subjects make contribution decisions in continuous time during a 10-min interval while in another they make them only at 10 discrete points of time during this interval. The effect of continuous time is muted in public-goods games compared to simpler social dilemmas and the data suggest that widespread coordination problems are to blame. When we add a rich communication protocol, these coordination problems largely disappear and the median subject contributes completely to the public good with no sign of decay over time. At the median, the same communication protocol is less than half as effective in discrete time.},
	urldate = {2016-10-27},
	journal = {Journal of Economic Behavior \& Organization},
	author = {Oprea, Ryan and Charness, Gary and Friedman, Daniel},
	month = dec,
	year = {2014},
	keywords = {C72, C92, Continuous time games, D70, H41, Public goods, Voluntary contribution mechanism},
	pages = {212--223},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/E8G26SUE/Oprea et al. - 2014 - Continuous time and communication in a public-good.pdf:application/pdf;ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/RTP8JK8G/Oprea et al. - 2014 - Continuous time and communication in a public-good.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/5AKR23BX/S0167268114002509.html:text/html;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/JTD4E6HG/S0167268114002509.html:text/html}
}

@techreport{glasserman_contagion_2015,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {Contagion in {Financial} {Networks}},
	url = {https://papers.ssrn.com/abstract=2681392},
	abstract = {This paper surveys the rapidly growing literature about interconnectedness and financial stability. The paper focuses on insights in the literature on the relationship between network structure and the vulnerability of the financial system to contagion.},
	number = {ID 2681392},
	urldate = {2016-12-12},
	institution = {Social Science Research Network},
	author = {Glasserman, Paul and Young, Peyton},
	month = oct,
	year = {2015},
	keywords = {SSRN, Contagion in Financial Networks, Paul  Glasserman, Paul Glasserman, Peyton  Young, Peyton Young},
	file = {Snapshot:/home/io.nathan/Zotero/storage/ZT94UFPZ/papers.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/PIK862B8/papers.html:text/html}
}

@inproceedings{moggi_computational_1989,
	address = {Piscataway, NJ, USA},
	title = {Computational {Lambda}-calculus and {Monads}},
	isbn = {978-0-8186-1954-0},
	url = {http://dl.acm.org/citation.cfm?id=77350.77353},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the {Fourth} {Annual} {Symposium} on {Logic} in {Computer} {Science}},
	publisher = {IEEE Press},
	author = {Moggi, E.},
	year = {1989},
	pages = {14--23}
}

@book{hector_computable_2012,
	address = {Singapore ; Hackensack, N.J},
	title = {{COMPUTABLE} {UNIVERSE}, {A}: {UNDERSTANDING} {AND} {EXPLORING} {NATURE} {AS} {COMPUTATION}},
	isbn = {978-981-4374-29-3},
	shorttitle = {{COMPUTABLE} {UNIVERSE}, {A}},
	abstract = {This volume, with a foreword by Sir Roger Penrose, discusses the foundations of computation in relation to nature. It focuses on two main questions: What is computation? How does nature compute? The contributors are world-renowned experts who have helped shape a cutting-edge computational understanding of the universe. They discuss computation in the world from a variety of perspectives, ranging from foundational concepts to pragmatic models to ontological conceptions and philosophical implications. The volume provides a state-of-the-art collection of technical papers and non-technical essays, representing a field that assumes information and computation to be key in understanding and explaining the basic structure underpinning physical reality. It also includes a new edition of Konrad Zuse's "Calculating Space" (the MIT translation), and a panel discussion transcription on the topic, featuring worldwide experts in quantum mechanics, physics, cognition, computation and algorithmic complexity. The volume is dedicated to the memory of Alan M Turing - the inventor of universal computation, on the 100th anniversary of his birth, and is part of the Turing Centenary celebrations.},
	language = {English},
	publisher = {World Scientific Publishing Company},
	author = {HECTOR, ZENIL},
	editor = {Zenil, Hector},
	month = dec,
	year = {2012}
}

@inproceedings{wadler_comprehending_1990,
	address = {New York, NY, USA},
	series = {{LFP} '90},
	title = {Comprehending {Monads}},
	isbn = {978-0-89791-368-3},
	url = {http://doi.acm.org/10.1145/91556.91592},
	doi = {10.1145/91556.91592},
	abstract = {Category theorists invented monads in the 1960's to concisely express certain aspects of universal algebra. Functional programmers invented list comprehensions in the 1970's to concisely express certain programs involving lists. This paper shows how list comprehensions may be generalised to an arbitrary monad, and how the resulting programming feature can concisely express in a pure functional language some programs that manipulate state, handle exceptions, parse text, or invoke continuations. A new solution to the old problem of destructive array update is also presented. No knowledge of category theory is assumed.},
	urldate = {2016-11-16},
	booktitle = {Proceedings of the 1990 {ACM} {Conference} on {LISP} and {Functional} {Programming}},
	publisher = {ACM},
	author = {Wadler, Philip},
	year = {1990},
	pages = {61--78},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/AECB8N24/Wadler - 1990 - Comprehending Monads.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/D74BK2WP/Wadler - 1990 - Comprehending Monads.pdf:application/pdf}
}

@book{kirman_complex_2010,
	address = {London ; New York, NY},
	title = {Complex {Economics}: {Individual} and {Collective} {Rationality}},
	isbn = {978-0-415-56855-5},
	shorttitle = {Complex {Economics}},
	abstract = {The economic crisis is also a crisis for economic theory. Most analyses of the evolution of the crisis invoke three themes, contagion, networks and trust, yet none of these play a major role in standard macroeconomic models. What is needed is a theory in which these aspects are central. The direct interaction between individuals, firms and banks does not simply produce imperfections in the functioning of the economy but is the very basis of the functioning of a modern economy. This book suggests a way of analysing the economy which takes this point of view.  The economy should be considered as a complex adaptive system in which the agents constantly react to, influence and are influenced by, the other individuals in the economy. In such systems which are familiar from statistical physics and biology for example, the behaviour of the aggregate cannot be deduced from the behaviour of the average, or "representative" individual. Just as the organised activity of an ants’ nest cannot be understood from the behaviour of a "representative ant" so macroeconomic phenomena should not be assimilated to those associated with the "representative agent". This book provides examples where this can clearly be seen. The examples range from Schelling’s model of segregation, to contributions to public goods, the evolution of buyer seller relations in fish markets, to financial models based on the foraging behaviour of ants.   The message of the book is that coordination rather than efficiency is the central problem in economics. How do the myriads of individual choices and decisions come to be coordinated? How does the economy or a market, "self organise" and how does this sometimes result in major upheavals, or to use the phrase from physics, "phase transitions"? The sort of system described in this book is not in equilibrium in the standard sense, it is constantly changing and moving from state to state and its very structure is always being modified. The economy is not a ship sailing on a well-defined trajectory which occasionally gets knocked off course. It is more like the slime described in the book "emergence", constantly reorganising itself so as to slide collectively in directions which are neither understood nor necessarily desired by its components.},
	language = {English},
	publisher = {Routledge},
	author = {Kirman, Alan},
	month = jul,
	year = {2010}
}

@book{spivak_category_2014,
	address = {Cambridge, Massachusetts},
	edition = {1},
	title = {Category {Theory} for the {Sciences}},
	isbn = {978-0-262-02813-4},
	abstract = {Category theory was invented in the 1940s to unify and synthesize different areas in mathematics, and it has proven remarkably successful in enabling powerful communication between disparate fields and subfields within mathematics. This book shows that category theory can be useful outside of mathematics as a rigorous, flexible, and coherent modeling language throughout the sciences. Information is inherently dynamic; the same ideas can be organized and reorganized in countless ways, and the ability to translate between such organizational structures is becoming increasingly important in the sciences. Category theory offers a unifying framework for information modeling that can facilitate the translation of knowledge between disciplines. Written in an engaging and straightforward style, and assuming little background in mathematics, the book is rigorous but accessible to non-mathematicians. Using databases as an entry to category theory, it begins with sets and functions, then introduces the reader to notions that are fundamental in mathematics: monoids, groups, orders, and graphs -- categories in disguise. After explaining the "big three" concepts of category theory -- categories, functors, and natural transformations -- the book covers other topics, including limits, colimits, functor categories, sheaves, monads, and operads. The book explains category theory by examples and exercises rather than focusing on theorems and proofs. It includes more than 300 exercises, with solutions. Category Theory for the Sciences is intended to create a bridge between the vast array of mathematical concepts used by mathematicians and the models and frameworks of such scientific disciplines as computation, neuroscience, and physics.},
	language = {Englisch},
	publisher = {Mit Press Ltd},
	author = {Spivak, David I.},
	month = nov,
	year = {2014}
}

@article{backus_can_1978,
	title = {Can {Programming} {Be} {Liberated} from the {Von} {Neumann} {Style}?: {A} {Functional} {Style} and {Its} {Algebra} of {Programs}},
	volume = {21},
	issn = {0001-0782},
	shorttitle = {Can {Programming} {Be} {Liberated} from the {Von} {Neumann} {Style}?},
	url = {http://doi.acm.org/10.1145/359576.359579},
	doi = {10.1145/359576.359579},
	abstract = {Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs.
An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages.
Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs.
 A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation.},
	number = {8},
	urldate = {2016-12-09},
	journal = {Commun. ACM},
	author = {Backus, John},
	month = aug,
	year = {1978},
	keywords = {functional programming, Programming Languages, algebra of programs, applicative computing systems, applicative state transition systems, combining forms, functional forms, metacomposition, models of computing systems, program correctness, program termination, program transformation, programming languages, von Neumann computers, von Neumann languages},
	pages = {613--641},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/2RHSWUKM/Backus - 1978 - Can Programming Be Liberated from the Von Neumann .pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/DGWI8UF3/Backus - 1978 - Can Programming Be Liberated from the Von Neumann .pdf:application/pdf}
}

@book{pierce_basic_1991,
	address = {Cambridge, MA, USA},
	title = {Basic {Category} {Theory} for {Computer} {Scientists}},
	isbn = {978-0-262-66071-6},
	publisher = {MIT Press},
	author = {Pierce, Benjamin C.},
	year = {1991}
}

@inproceedings{hewitt_universal_1973,
	address = {San Francisco, CA, USA},
	series = {{IJCAI}'73},
	title = {A {Universal} {Modular} {ACTOR} {Formalism} for {Artificial} {Intelligence}},
	url = {http://dl.acm.org/citation.cfm?id=1624775.1624804},
	urldate = {2016-10-25},
	booktitle = {Proceedings of the 3rd {International} {Joint} {Conference} on {Artificial} {Intelligence}},
	publisher = {Morgan Kaufmann Publishers Inc.},
	author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
	year = {1973},
	pages = {235--245}
}

@incollection{hudak_arrows_2003,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Arrows, {Robots}, and {Functional} {Reactive} {Programming}},
	copyright = {©2003 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-40132-2 978-3-540-44833-4},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-44833-4_6},
	abstract = {Functional reactive programming},
	language = {en},
	number = {2638},
	urldate = {2016-11-04},
	booktitle = {Advanced {Functional} {Programming}},
	publisher = {Springer Berlin Heidelberg},
	author = {Hudak, Paul and Courtney, Antony and Nilsson, Henrik and Peterson, John},
	editor = {Jeuring, Johan and Jones, Simon L. Peyton},
	year = {2003},
	doi = {10.1007/978-3-540-44833-4_6},
	keywords = {Software Engineering, Logics and Meanings of Programs, Programming Techniques, Compilers, Interpreters, Programming Languages, Programming Languages, Compilers, Interpreters},
	pages = {159--187},
	file = {Snapshot:/home/io.nathan/Zotero/storage/2VRFNQVC/10.html:text/html;Snapshot:/home/io.nathan/Zotero/storage/WW5CGBKS/10.html:text/html}
}

@book{wooldridge_introduction_2009,
	edition = {2nd},
	title = {An {Introduction} to {MultiAgent} {Systems}},
	isbn = {978-0-470-51946-2},
	abstract = {The study of multi-agent systems (MAS) focuses on systems in which many intelligent agents interact with each other. These agents are considered to be autonomous entities such as software programs or robots. Their interactions can either be cooperative (for example as in an ant colony) or selfish (as in a free market economy). This book assumes only basic knowledge of algorithms and discrete maths, both of which are taught as standard in the first or second year of computer science degree programmes. A basic knowledge of artificial intelligence would useful to help understand some of the issues, but is not essential. The books main aims are: To introduce the student to the concept of agents and multi-agent systems, and the main applications for which they are appropriate To introduce the main issues surrounding the design of intelligent agents To introduce the main issues surrounding the design of a multi-agent society To introduce a number of typical applications for agent technology},
	publisher = {Wiley Publishing},
	author = {Wooldridge, Michael},
	year = {2009}
}

@book{wilensky_introduction_2015,
	title = {An {Introduction} to {Agent}-{Based} {Modeling}: {Modeling} {Natural}, {Social}, and {Engineered} {Complex} {Systems} with {NETLogo}},
	isbn = {978-0-262-73189-8},
	url = {https://www.amazon.co.uk/Introduction-Agent-Based-Modeling-Natural-Engineered/dp/0262731894},
	urldate = {2016-12-14},
	publisher = {MIT Press},
	author = {Wilensky, Uri and Rand, William},
	year = {2015}
}

@inproceedings{agha_algebraic_2004,
	title = {An {Algebraic} {Theory} of {Actors} and its {Application} to a {Simple} {Object}-{Based} {Language}},
	booktitle = {In {Ole}-{Johan} {Dahl}’s {Festschrift}, volume 2635 of {LNCS}},
	publisher = {Springer},
	author = {Agha, Gul},
	year = {2004},
	pages = {26--57},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/TPTJDN49/Agha - 2004 - An Algebraic Theory of Actors and its Application .pdf:application/pdf;Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/AUQ299V6/Agha - 2004 - An Algebraic Theory of Actors and its Application .pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/G7NF537X/summary.html:text/html;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/CIPWAFRD/summary.html:text/html}
}

@article{gode_allocative_1993,
	title = {Allocative {Efficiency} of {Markets} with {Zero}-{Intelligence} {Traders}: {Market} as a {Partial} {Substitute} for {Individual} {Rationality}},
	volume = {101},
	issn = {0022-3808},
	shorttitle = {Allocative {Efficiency} of {Markets} with {Zero}-{Intelligence} {Traders}},
	url = {http://www.jstor.org/stable/2138676},
	abstract = {We report market experiments in which human traders are replaced by "zero-intelligence" programs that submit random bids and offers. Imposing a budget constraint (i.e., not permitting traders to sell below their costs or buy above their values) is sufficient to raise the allocative efficiency of these auctions close to 100 percent. Allocative efficiency of a double auction derives largely from its structure, independent of traders' motivation, intelligence, or learning. Adam Smith's invisible hand may be more powerful than some may have thought; it can generate aggregate rationality not only from individual rationality but also from individual irrationality.},
	number = {1},
	urldate = {2016-09-30},
	journal = {Journal of Political Economy},
	author = {Gode, Dhananjay K. and Sunder, Shyam},
	year = {1993},
	pages = {119--137}
}

@book{sher_agent-based_2013,
	title = {Agent-{Based} {Modeling} {Using} {Erlang} {Eliminating} {The} {Conceptual} {Gap} {Between} {The} {Programming} {Language} \& {ABM}},
	abstract = {Abstract: There is a conceptual gap between real world systems and their models created using differential equations. Numerous systems, such as traffic flow, financial markets, neural networks... are all naturally composed of agents interacting with each other and the environment, from which the behavior of such systems emerges. The more complex the interactions and agents, the more difficult, and even impossible, it becomes to model them using averages and standard mathematical approaches like sets of differential equations. A more direct approach to modeling such complex systems is by modeling the agents themselves, and letting them interact with each other and the environment, with the system's behavior then emerging naturally. This approach is called Agent Based Modeling (ABM), and the conceptual gap between real world phenomena produced by interacting agents and their respective ABMs is lower than the models created using sets of differential equations. The removal of this conceptual gap through the use of ABMs allows us to tackle larger and more complex problems and explore emergent behavior more easily. Unfortunately, ABMs and the programming languages used to create them do not have a 1-to-1 mapping, and thus, producing a conceptual gap between the two. This paper attempts to present and make a claim that we can eliminate this conceptual gap by using an actor model based concurrency oriented programming language called Erlang. In this paper we discuss how Erlang fits into ABM and Multi-Agent Simulation systems, and what features it possesses that make it such a perfect},
	author = {Sher, Gene I.},
	year = {2013},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/IDV4DJRX/Sher - Agent-Based Modeling Using Erlang Eliminating The .pdf:application/pdf;Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/NIJAES5Q/Sher - Agent-Based Modeling Using Erlang Eliminating The .pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/E2JXSGV7/summary.html:text/html;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/GHIJM8EA/summary.html:text/html}
}

@article{ballot_agent-based_2015,
	title = {Agent-based modeling and economic theory: where do we stand?},
	volume = {10},
	issn = {1860-711X},
	shorttitle = {Agent-based modeling and economic theory},
	url = {http://econpapers.repec.org/article/sprjeicoo/v_3a10_3ay_3a2015_3ai_3a2_3ap_3a199-220.htm},
	abstract = {This paper provides a survey of the development and contributions of agent-based modeling to economic analysis, without any claim to be exhaustive. Our perspective is particularly shaped by the papers presented at the 17th Wehia conference, a selection of which are published in this special issue. The paper shows how agent-based models have developed, and how they have improved our understanding not only of macroeconomic disequilibria but also of the possibilities of the emergence of equilibrium in such realistic systems. It also reviews the progress made in our understanding of real markets, and lists some of the improvements needed to establish these models as alternative tools to the present orthodox models. Copyright Springer-Verlag Berlin Heidelberg 2015},
	number = {2},
	urldate = {2016-10-31},
	journal = {Journal of Economic Interaction and Coordination},
	author = {Ballot, Gérard and Mandel, Antoine and Vignes, Annick},
	year = {2015},
	keywords = {Agent-based modeling, B5, C8, Economic thought, Heterogeneity},
	pages = {199--220},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/AQIE9XB9/v_3a10_3ay_3a2015_3ai_3a2_3ap_3a199-220.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/B7ZP8XKC/v_3a10_3ay_3a2015_3ai_3a2_3ap_3a199-220.html:text/html}
}

@techreport{richiardi_agent-based_2007,
	type = {{LABORatorio} {R}. {Revelli} {Working} {Papers} {Series}},
	title = {Agent-based {Computational} {Economics}. {A} {Short} {Introduction}},
	url = {http://econpapers.repec.org/paper/ccawplabo/69.htm},
	number = {69},
	urldate = {2016-10-31},
	institution = {LABORatorio R. Revelli, Centre for Employment Studies},
	author = {Richiardi, Matteo},
	year = {2007},
	file = {RePEc PDF:/home/io.nathan/Zotero/storage/F2INS8MN/Richiardi - 2007 - Agent-based Computational Economics. A Short Intro.pdf:application/pdf;RePEc PDF:/home/io.nathan/Zotero/storage/BMHCQZZC/Richiardi - 2007 - Agent-based Computational Economics. A Short Intro.pdf:application/pdf;RePEc Snapshot:/home/io.nathan/Zotero/storage/2267APQ8/69.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/NVMX9FNC/69.html:text/html}
}

@techreport{tesfatsion_agent-based_2006,
	type = {Handbook of {Computational} {Economics}},
	title = {Agent-{Based} {Computational} {Economics}: {A} {Constructive} {Approach} to {Economic} {Theory}},
	shorttitle = {Agent-{Based} {Computational} {Economics}},
	url = {http://econpapers.repec.org/bookchap/eeehecchp/2-16.htm},
	abstract = {Economies are complicated systems encompassing micro behaviors, interaction patterns, and global regularities. Whether partial or general in scope, studies of economic systems must consider how to handle difficult real-world aspects such as asymmetric information, imperfect competition, strategic interaction, collective learning, and the possibility of multiple equilibria. Recent advances in analytical and computational tools are permitting new approaches to the quantitative study of these aspects. One such approach is Agent-based Computational Economics (ACE), the computational study of economic processes modeled as dynamic systems of interacting agents. This chapter explores the potential advantages and disadvantages of ACE for the study of economic systems. General points are concretely illustrated using an ACE model of a two-sector decentralized market economy. Six issues are highlighted: Constructive understanding of production, pricing, and trade processes; the essential primacy of survival; strategic rivalry and market power; behavioral uncertainty and learning; the role of conventions and organizations; and the complex interactions among structural attributes, institutional arrangements, and behavioral dispositions.},
	urldate = {2016-10-31},
	institution = {Elsevier},
	author = {Tesfatsion, Leigh},
	year = {2006},
	pages = {831--880},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/DHCPVABB/2-16.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/ETA4NG3S/2-16.html:text/html}
}

@techreport{tesfatsion_agent-based_2002,
	type = {Computational {Economics}},
	title = {Agent-{Based} {Computational} {Economics}},
	url = {http://econpapers.repec.org/paper/wpawuwpco/0203001.htm},
	abstract = {Agent-based computational economics (ACE) is the computational study of economies modeled as evolving systems of autonomous interacting agents. Starting from initial conditions, specified by the modeler, the computational economy evolves over time as its constituent agents repeatedly interact with each other and learn from these interactions. ACE is therefore a bottom-up culture-dish approach to the study of economic systems. This study discusses the key characteristics and goals of the ACE methodology. Eight currently active research areas are highlighted for concrete illustration. Potential advantages and disadvantages of the ACE methodology are considered, along with open questions and possible directions for future research.},
	urldate = {2016-10-31},
	institution = {EconWPA},
	author = {Tesfatsion, Leigh},
	month = aug,
	year = {2002},
	keywords = {Learning, Mechanism design, Computational economics, Agent-based computational economics, Autonomous agents, Evolution, Interaction networks, Object-oriented programming.},
	file = {RePEc PDF:/home/io.nathan/Zotero/storage/9W7VTRAI/Tesfatsion - 2002 - Agent-Based Computational Economics.pdf:application/pdf;RePEc PDF:/home/io.nathan/Zotero/storage/52M4Q3HN/Tesfatsion - 2002 - Agent-Based Computational Economics.pdf:application/pdf;RePEc Snapshot:/home/io.nathan/Zotero/storage/3ITSCTJQ/0203001.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/EQUF772D/0203001.html:text/html}
}

@article{botta_functional_2011,
	title = {A functional framework for agent-based models of exchange},
	volume = {218},
	issn = {0096-3003},
	url = {http://www.sciencedirect.com/science/article/pii/S0096300311010915},
	doi = {10.1016/j.amc.2011.08.051},
	abstract = {We propose a functional framework for studying agent-based dynamical models of exchange. The framework consists of a notation and of a number of elementary definitions. We argue that – in comparison to narrative descriptions – the framework has a number of advantages: (1) it allows one to express precisely the relationships between the classical notion of general equilibrium and agent-based models of exchange; (2) it supports computational descriptions of models of exchange which can be unambiguously implemented; (3) it assists the numerical investigation of such models by providing a specific set of elementary notions and computational primitives. These can be used to deduce model properties and to setup “crucial” numerical experiments for validating model implementations. In a companion paper, we apply the framework to specify and study a model of exchange in which multiple equilibrium prices coexist and prices evolve according to a simple trading scheme and to a generic genetic rule.},
	number = {8},
	urldate = {2016-09-30},
	journal = {Applied Mathematics and Computation},
	author = {Botta, N. and Mandel, A. and Ionescu, C. and Hofmann, M. and Lincke, D. and Schupp, S. and Jaeger, C.},
	month = dec,
	year = {2011},
	keywords = {Agent-based methods, Barter economies, Functional specifications, General equilibrium, Price dynamics},
	pages = {4025--4040},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/XBR8T9WN/Botta et al. - 2011 - A functional framework for agent-based models of e.pdf:application/pdf;ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/DAB4AVMK/Botta et al. - 2011 - A functional framework for agent-based models of e.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/K4DQT3U4/S0096300311010915.html:text/html;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/G5IGQAKV/S0096300311010915.html:text/html}
}

@book{lysenko_framework_2008,
	title = {A {Framework} for {Megascale} {Agent} {Based} {Model} {Simulations} on the {GPU}},
	author = {Lysenko, Mikola and D’souza, Roshan and Rahmani, Keyvan},
	year = {2008}
}

@book{a_framework_nodate,
	title = {A {Framework} for {Megascale} {Agent} {Based} {Model} {Simulations} on the {GPU}},
	abstract = {This paper presents a series of efficient, data parallel algorithms for simulating agent based models. These include methods for handling environment updates, agent interactions and replication. One of the most important techniques presented in this work is a novel stochastic allocator which enables parallel agent replication in O(1) average time. These techniques can be easily implemented on a modern day graphics processing unit (GPU) resulting in a substantial performance increase. We believe that our system is the first ever completely GPU based agent simulation framework.},
	author = {A, Mikola Lysenko and B, Roshan D’souza and B, Keyvan Rahmani},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/DASXIQNT/A et al. - A Framework for Megascale Agent Based Model Simula.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/JXAV765D/summary.html:text/html}
}

@article{agha_foundation_1997,
	title = {A {Foundation} for {Actor} {Computation}},
	volume = {7},
	issn = {0956-7968},
	url = {http://dx.doi.org/10.1017/S095679689700261X},
	doi = {10.1017/S095679689700261X},
	abstract = {We present an actor language which is an extension of a simple functional language, and provide an operational semantics for this extension. Actor configurations represent open distributed systems, by which we mean that the specification of an actor system explicitly takes into account the interface with external components. We study the composability of such systems. We define and study various notions of testing equivalence on actor expressions and configurations. The model we develop provides fairness. An important result is that the three forms of equivalence, namely, convex, must, and may equivalences, collapse to two in the presence of fairness. We further develop methods for proving laws of equivalence and provide example proofs to illustrate our methodology.},
	number = {1},
	urldate = {2016-10-26},
	journal = {J. Funct. Program.},
	author = {Agha, Gul A. and Mason, Ian A. and Smith, Scott F. and Talcott, Carolyn L.},
	month = jan,
	year = {1997},
	pages = {1--72}
}

@article{parker_distributed_2011,
	title = {A {Distributed} {Platform} for {Global}-{Scale} {Agent}-{Based} {Models} of {Disease} {Transmission}},
	volume = {22},
	issn = {1049-3301},
	url = {http://doi.acm.org/10.1145/2043635.2043637},
	doi = {10.1145/2043635.2043637},
	abstract = {The Global-Scale Agent Model (GSAM) is presented. The GSAM is a high-performance distributed platform for agent-based epidemic modeling capable of simulating a disease outbreak in a population of several billion agents. It is unprecedented in its scale, its speed, and its use of Java. Solutions to multiple challenges inherent in distributing massive agent-based models are presented. Communication, synchronization, and memory usage are among the topics covered in detail. The memory usage discussion is Java specific. However, the communication and synchronization discussions apply broadly. We provide benchmarks illustrating the GSAM’s speed and scalability.},
	number = {1},
	urldate = {2016-10-31},
	journal = {ACM Trans. Model. Comput. Simul.},
	author = {Parker, Jon and Epstein, Joshua M.},
	month = dec,
	year = {2011},
	keywords = {Agent-based modeling, agent behavior, Epidemiology},
	pages = {2:1--2:25},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/UFEZFVPP/Parker and Epstein - 2011 - A Distributed Platform for Global-Scale Agent-Base.pdf:application/pdf;ACM Full Text PDF:/home/io.nathan/Zotero/storage/4QK66WS3/Parker and Epstein - 2011 - A Distributed Platform for Global-Scale Agent-Base.pdf:application/pdf}
}

@techreport{gaffeo_adaptive_2008,
	type = {Department of {Economics} {Working} {Paper}},
	title = {Adaptive microfoundations for emergent macroeconomics},
	url = {https://ideas.repec.org/p/trn/utwpde/0802.html},
	abstract = {In this paper we present the basics of a research program aimed at providing microfoundations to macroeconomic theory on the basis of computational agentbased adaptive descriptions of individual behavior. To exemplify our proposal, a simple prototype model of decentralized multi-market transactions is offered. We show that a very simple agent-based computational laboratory can challenge more structured dynamic stochastic general equilibrium models in mimicking comovements over the business cycle.},
	number = {0802},
	urldate = {2016-12-12},
	institution = {Department of Economics, University of Trento, Italia},
	author = {Gaffeo, Edoardo and Gatti, Domenico Delli and Desiderio, Saul and Gallegati, Mauro},
	year = {2008},
	keywords = {Adaptive behavior, Agent-based economics, Microfoundations of macroeconomics},
	file = {RePEc PDF:/home/io.nathan/Zotero/storage/JTF9SZP7/Gaffeo et al. - 2008 - Adaptive microfoundations for emergent macroeconom.pdf:application/pdf;RePEc PDF:/home/io.nathan/Zotero/storage/T7A9VNZE/Gaffeo et al. - 2008 - Adaptive microfoundations for emergent macroeconom.pdf:application/pdf;RePEc Snapshot:/home/io.nathan/Zotero/storage/ECPGCH8A/0802.html:text/html;RePEc Snapshot:/home/io.nathan/Zotero/storage/2Q26WMEP/0802.html:text/html}
}

@article{bauer_adaptation-based_2011,
	title = {Adaptation-{Based} {Programming} in {Haskell}},
	volume = {66},
	issn = {2075-2180},
	url = {http://arxiv.org/abs/1109.0774},
	doi = {10.4204/EPTCS.66.1},
	abstract = {We present an embedded DSL to support adaptation-based programming (ABP) in Haskell. ABP is an abstract model for defining adaptive values, called adaptives, which adapt in response to some associated feedback. We show how our design choices in Haskell motivate higher-level combinators and constructs and help us derive more complicated compositional adaptives. We also show an important specialization of ABP is in support of reinforcement learning constructs, which optimize adaptive values based on a programmer-specified objective function. This permits ABP users to easily define adaptive values that express uncertainty anywhere in their programs. Over repeated executions, these adaptive values adjust to more efficient ones and enable the user's programs to self optimize. The design of our DSL depends significantly on the use of type classes. We will illustrate, along with presenting our DSL, how the use of type classes can support the gradual evolution of DSLs.},
	urldate = {2016-10-31},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Bauer, Tim and Erwig, Martin and Fern, Alan and Pinto, Jervis},
	month = sep,
	year = {2011},
	note = {arXiv: 1109.0774},
	keywords = {Computer Science - Programming Languages, D.3.3},
	pages = {1--23},
	file = {arXiv\:1109.0774 PDF:/home/io.nathan/Zotero/storage/P7UCFRNH/Bauer et al. - 2011 - Adaptation-Based Programming in Haskell.pdf:application/pdf;arXiv\:1109.0774 PDF:/home/io.nathan/Zotero/storage/GFRKVUKD/Bauer et al. - 2011 - Adaptation-Based Programming in Haskell.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/IUKI3DHQ/1109.html:text/html;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/RNHIE699/1109.html:text/html}
}

@book{agha_actors:_1986,
	address = {Cambridge, MA, USA},
	title = {Actors: {A} {Model} of {Concurrent} {Computation} in {Distributed} {Systems}},
	isbn = {978-0-262-01092-4},
	shorttitle = {Actors},
	publisher = {MIT Press},
	author = {Agha, Gul},
	year = {1986}
}

@article{hewitt_actor_2010,
	title = {Actor {Model} of {Computation}: {Scalable} {Robust} {Information} {Systems}},
	shorttitle = {Actor {Model} of {Computation}},
	url = {http://arxiv.org/abs/1008.1459},
	abstract = {The Actor model is a mathematical theory that treats "Actors" as the universal primitives of concurrent digital computation. The model has been used both as a framework for a theoretical understanding of concurrency, and as the theoretical basis for several practical implementations of concurrent systems. Unlike previous models of computation, the Actor model was inspired by physical laws. It was also influenced by the programming languages Lisp, Simula 67 and Smalltalk-72, as well as ideas for Petri Nets, capability-based systems and packet switching. The advent of massive concurrency through client-cloud computing and many-core computer architectures has galvanized interest in the Actor model. Actor technology will see significant application for integrating all kinds of digital information for individuals, groups, and organizations so their information usefully links together. Information integration needs to make use of the following information system principles: * Persistence. Information is collected and indexed. * Concurrency: Work proceeds interactively and concurrently, overlapping in time. * Quasi-commutativity: Information can be used regardless of whether it initiates new work or become relevant to ongoing work. * Sponsorship: Sponsors provide resources for computation, i.e., processing, storage, and communications. * Pluralism: Information is heterogeneous, overlapping and often inconsistent. * Provenance: The provenance of information is carefully tracked and recorded The Actor Model is intended to provide a foundation for inconsistency robust information integration},
	urldate = {2016-10-26},
	journal = {arXiv:1008.1459 [cs]},
	author = {Hewitt, Carl},
	month = aug,
	year = {2010},
	note = {arXiv: 1008.1459},
	keywords = {Computer Science - Programming Languages, and Cluster Computing, Computer Science - Distributed, Computer Science - Distributed, Parallel, and Cluster Computing, Parallel},
	file = {arXiv\:1008.1459 PDF:/home/io.nathan/Zotero/storage/KMJ2WJ6Z/Hewitt - 2010 - Actor Model of Computation Scalable Robust Inform.pdf:application/pdf;arXiv\:1008.1459 PDF:/home/io.nathan/Zotero/storage/9X3FI6JI/Hewitt - 2010 - Actor Model of Computation Scalable Robust Inform.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/FIH4IZDU/1008.html:text/html;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/7I6F6KIZ/1008.html:text/html}
}

@book{sorokin_aivika_2015,
	title = {Aivika 3: {Creating} a {Simulation} {Library} based on {Functional} {Programming}},
	author = {Sorokin, David},
	year = {2015}
}

@book{noauthor_agent_nodate,
	title = {Agent {Based} {Modeling} and {Simulation} with {ActoMoS} - {Semantic} {Scholar}},
	url = {https://www.semanticscholar.org/paper/Agent-Based-Modeling-and-Simulation-with-ActoMoS-Poggi/f1538ab426159d98aeb451bded60625be1f16f4c},
	abstract = {— ActoMoS is an actor-based software library for the development of agent-based models and for their simulation. This library offers software components and tools for modeling and simulating systems in different application domains. In particular, it allows the definition of agent model by reusing or extending a set of predefined agent models and supports efficient and scalable agent-based simulations involving a large number of agents. This paper, after an introduction of the actor model and implementation used by the software library, underlines the main features of the software library and presents its experimentation in some well-known domains.},
	urldate = {2016-10-31},
	file = {Snapshot:/home/io.nathan/Zotero/storage/RANEUT3K/f1538ab426159d98aeb451bded60625be1f16f4c.html:text/html}
}

@book{railsback_stupidmodel_2005,
	title = {{StupidModel} and {Extensions}: {A} {Template} and {Teaching} {Tool} for {Agent}-based {Modeling} {Platforms}},
	url = {http://condor.depaul.edu/slytinen/abm/StupidModelFormulation.pdf},
	author = {Railsback, Steve and Lytinen, Steve and Grimm, Volker},
	month = dec,
	year = {2005}
}

@misc{railsback_stupidmodel_2005-1,
	title = {{StupidModel} and {Extensions}: {A} {Template} and {Teaching} {Tool} for {Agent}-based {Modeling} {Platforms}},
	url = {http://condor.depaul.edu/slytinen/abm/StupidModelFormulation.pdf},
	author = {Railsback, Steve and Lytinen, Steve and Grimm, Volker},
	month = dec,
	year = {2005}
}

@book{a_framework_nodate-1,
	title = {A {Framework} for {Megascale} {Agent} {Based} {Simulations} on the {GPU}},
	abstract = {This paper presents a series of efficient, data parallel algorithms for simulating agent based models on a graphics processing unit (GPU). These include methods for handling environment updates, agent interactions, and replication. One of the most important techniques presented in this work is a novel stochastic allocator which enables parallel agent replication in O(1) average time. We believe that our system is the first ever completely GPU based agent simulation framework. Due to a combination of algorithmic and architectural advancements, our prototype system achieves a speed up of several orders of magnitude over conventional CPU based approaches.},
	author = {A, Mikola Lysenko and B, Roshan D’souza and B, Keyvan Rahmani},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/M47BA6FQ/A et al. - A Framework for Megascale Agent Based Simulations .pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/S6JVBTC4/summary.html:text/html}
}

@book{botta_issn:_2010,
	title = {{ISSN}: 1955-611XTime in discrete agent-based models of socio-economic systems},
	shorttitle = {{ISSN}},
	abstract = {We formulate the problem of computing time in discrete dynamical agent-based models in the context of socio-economic modeling. For such formulation, we outline a simple solution. This requires minimal extensions of the original untimed model. The proposed solution relies on the notion of agent-specific schedules of action and on two modeling assumptions. These are fulfilled by most models of practical interest. For models for which stronger assumptions can be made, we discuss alternative formulations. halshs-00542250, version 1- 2 Dec 2010 1},
	author = {Botta, Nicola and Mandel, Antoine and Ionescu, Cezar and Botta, N. and Ionescu, C.},
	year = {2010},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/HWEGXZUW/Botta et al. - 2010 - ISSN 1955-611XTime in discrete agent-based models.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/MNK8MIZH/summary.html:text/html}
}

@misc{sorokin_aivika_2015-1,
	title = {Aivika 3: {Creating} a {Simulation} {Library} based on {Functional} {Programming}},
	author = {Sorokin, David},
	year = {2015}
}

@misc{noauthor_nasdaq_nodate,
	title = {Nasdaq {Market} {Simulation}},
	url = {http://dl.acm.org/citation.cfm?id=1526340},
	urldate = {2016-12-12},
	file = {Nasdaq Market Simulation:/home/io.nathan/Zotero/storage/2GV5RBM2/citation.html:text/html}
}

@misc{noauthor_agent_nodate-1,
	title = {Agent {Based} {Modeling} and {Simulation} with {ActoMoS} - {Semantic} {Scholar}},
	url = {https://www.semanticscholar.org/paper/Agent-Based-Modeling-and-Simulation-with-ActoMoS-Poggi/f1538ab426159d98aeb451bded60625be1f16f4c},
	abstract = {— ActoMoS is an actor-based software library for the development of agent-based models and for their simulation. This library offers software components and tools for modeling and simulating systems in different application domains. In particular, it allows the definition of agent model by reusing or extending a set of predefined agent models and supports efficient and scalable agent-based simulations involving a large number of agents. This paper, after an introduction of the actor model and implementation used by the software library, underlines the main features of the software library and presents its experimentation in some well-known domains.},
	urldate = {2016-10-31},
	file = {Snapshot:/home/io.nathan/Zotero/storage/H42GJCI9/f1538ab426159d98aeb451bded60625be1f16f4c.html:text/html}
}

@techreport{arthur_out--equilibrium_2006,
	type = {Handbook of {Computational} {Economics}},
	title = {Out-of-{Equilibrium} {Economics} and {Agent}-{Based} {Modeling}},
	url = {https://ideas.repec.org/h/eee/hecchp/2-32.html},
	abstract = {Standard neoclassical economics asks what agents' actions, strategies, or expectations are in equilibrium with (consistent with) the outcome or pattern these behaviors aggregatively create. Agent-based computational economics enables us to ask a wider question: how agents' actions, strategies, or expectations might react to--might endogenously change with--the patterns they create. In other words, it enables us to examine how the economy behaves out of equilibrium, when it is not at a steady state.This out-of-equilibrium approach is not a minor adjunct to standard economic theory; it is economics done in a more general way. When examined out of equilibrium, economic patterns sometimes simplify into a simple, homogeneous equilibrium of standard economics; but just as often they show perpetually novel and complex behavior. The static equilibrium approach suffers two characteristic indeterminacies: it cannot easily resolve among multiple equilibria; nor can it easily model individuals' choices of expectations. Both problems are ones of formation (of an equilibrium and of an "ecology" of expectations, respectively), and when analyzed in formation--that is, out of equilibrium--these anomalies disappear.},
	urldate = {2017-05-15},
	institution = {Elsevier},
	author = {Arthur, W. Brian},
	year = {2006},
	pages = {1551--1564},
	file = {RePEc Snapshot:/home/io.nathan/Zotero/storage/FQUWDJFP/2-32.html:text/html}
}

@article{farmer_economy_2009,
	title = {The economy needs agent-based modelling},
	volume = {460},
	copyright = {© 2009 Nature Publishing Group},
	issn = {0028-0836},
	url = {https://www.nature.com/nature/journal/v460/n7256/full/460685a.html},
	doi = {10.1038/460685a},
	abstract = {The leaders of the world are flying the economy by the seat of their pants, say J. Doyne Farmer and Duncan Foley. There is, however, a better way to help guide financial policies.},
	language = {en},
	number = {7256},
	urldate = {2017-05-15},
	journal = {Nature},
	author = {Farmer, J. Doyne and Foley, Duncan},
	month = aug,
	year = {2009},
	pages = {685--686},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/WAFTQRMI/Farmer and Foley - 2009 - The economy needs agent-based modelling.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/T7XE3KBE/460685a.html:text/html}
}

@inproceedings{panayi_agent-based_2012,
	title = {Agent-{Based} {Modelling} of {Stock} {Markets} {Using} {Existing} {Order} {Book} {Data}},
	url = {https://link.springer.com/chapter/10.1007/978-3-642-38859-0_8},
	doi = {10.1007/978-3-642-38859-0_8},
	abstract = {We propose a new method for creating alternative scenarios for the evolution of a financial time series over short time periods. Using real order book data from the Chi-X exchange, along with a number of agents to interact with that data, we create a semi-synthetic time series of stock prices. We investigate the impact of using both simple, limited intelligence traders, along with a more realistic set of traders. We also test two different hypotheses about how real participants in the market would modify their orders in the alternative scenario created by the model. We run our experiments on 3 different stocks, evaluating a number of financial metrics for intra- and inter-day variability. Our results using realistic traders and relative pricing of real orders were found to outperform other approaches.},
	language = {en},
	urldate = {2017-05-15},
	booktitle = {Multi-{Agent}-{Based} {Simulation} {XIII}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Panayi, Efstathios and Harman, Mark and Wetherilt, Anne},
	month = jun,
	year = {2012},
	pages = {101--114},
	file = {Snapshot:/home/io.nathan/Zotero/storage/WGTCGXXR/978-3-642-38859-0_8.html:text/html}
}

@incollection{streltchenko_multi-agent_2005,
	series = {International {Handbooks} on {Information} {Systems}},
	title = {Multi-{Agent} {Simulation} of {Financial} {Markets}},
	copyright = {©2005 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-21431-1 978-3-540-26989-2},
	url = {http://link.springer.com/chapter/10.1007/3-540-26989-4_15},
	abstract = {This paper discusses the principal reasons for, and prospective opportunities of, simulating financial markets using an architecture based on artificial agents. The paper then discusses in detail the design and architecture of a simulator for financial markets. The Gaia methodology was employed in the development of MAFiMSi (Multi-Agent Finanacial Market Simulator), a general-purpose finacial market simulator of a dealer-type market. MAFiMSi is implemented as a library of C++ classes that currently support a stand-alone market simulation.},
	language = {en},
	urldate = {2017-05-15},
	booktitle = {Formal {Modelling} in {Electronic} {Commerce}},
	publisher = {Springer Berlin Heidelberg},
	author = {Streltchenko, Olga and Yesha, Yelena and Finin, Timothy},
	editor = {Kimbrough, Professor Steven O. and Wu, Professor D. J.},
	year = {2005},
	doi = {10.1007/3-540-26989-4_15},
	keywords = {Information Systems Applications (incl. Internet), IT in Business},
	pages = {393--419},
	file = {Snapshot:/home/io.nathan/Zotero/storage/TNHA4JZJ/10.html:text/html}
}

@inproceedings{lebaron_building_2002,
	title = {Building the santa fe artificial stock market. {Working} {Paper}, {Graduate}},
	abstract = {This short summary presents an insider’s look at the construction of the Santa Fe artificial stock market. The perspective considers the many design questions that went into building the market from the perspective of a decade of experience with agent-based financial markets. The market is assessed based on its overall strengths and weaknesses.},
	booktitle = {School of {International} {Economics} and {Finance}, {Brandeis}},
	author = {Lebaron, Blake},
	year = {2002},
	pages = {1117--1147},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/29N6VUQJ/Lebaron - 2002 - Building the santa fe artificial stock market. Wor.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/B7UMAAZ7/summary.html:text/html}
}

@inproceedings{toulis_mertacor:_2006,
	address = {New York, NY, USA},
	series = {{AAMAS} '06},
	title = {Mertacor: {A} {Successful} {Autonomous} {Trading} {Agent}},
	isbn = {978-1-59593-303-4},
	shorttitle = {Mertacor},
	url = {http://doi.acm.org/10.1145/1160633.1160847},
	doi = {10.1145/1160633.1160847},
	abstract = {In this paper we present the internal architecture and bidding mechanisms designed for Mertacor, a successful trading agent, which ended up first in the Classic Trading Agent Competition (TAC) of 2005. TAC provides a realistic benchmarking environment in which different trading agents compete with each other in order to best satisfy their clients' preferences and maximize their total profit. The "travel game" scenario of TAC involves three types of auctions; a) continuous one-sided that sell flight tickets, b) ascending multi-unit auctions for booking hotel rooms, and c) continuous double auctions for entertainment tickets. For each one of these types, we describe the techniques deployed by Mertacor. In flight auctions prices are updated according to a random walk process, thus the accurate prediction of the next update is not feasible. A key element of agent behavior in these auctions is its ability to accurately deduce the specific time in an auction, at which bidding will be profitable. In order to deal with the uncertainty due to price fluctuations in flight auctions and to provide our agent with an efficient decision mechanism, we have designed the z-heuristic framework. The goal of z-heuristic is to figure out when the price assumes its minimum value and recommend bidding at that moment. In the case of hotel auctions, Mertacor used fuzzy reasoning in conjunction with rule-based reasoning in order to predict the closing prices of hotel rooms, when historical data from past auctions are available. In order to bid efficiently in entertainment auctions, we have designed a bidding strategy whose goal is to preserve a pre-specified long-term profit. We finally present and discuss the results of agent benchmarking in the TAC Classic game.},
	urldate = {2017-05-15},
	booktitle = {Proceedings of the {Fifth} {International} {Joint} {Conference} on {Autonomous} {Agents} and {Multiagent} {Systems}},
	publisher = {ACM},
	author = {Toulis, Panos and Kehagias, Dionisis and Mitkas, Pericles A.},
	year = {2006},
	keywords = {auctions, trading agents, agent-mediated e-commerce},
	pages = {1191--1198},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/SBX44ZFC/Toulis et al. - 2006 - Mertacor A Successful Autonomous Trading Agent.pdf:application/pdf}
}

@article{lebaron_agent-based_2000,
	title = {Agent-based computational finance: {Suggested} readings and early research},
	volume = {24},
	issn = {0165-1889},
	shorttitle = {Agent-based computational finance},
	url = {http://www.sciencedirect.com/science/article/pii/S0165188999000226},
	doi = {10.1016/S0165-1889(99)00022-6},
	abstract = {The use of computer simulated markets with individual adaptive agents in finance is a new, but growing field. This paper explores some of the early works in the area concentrating on a set of some of the earliest papers. Six papers are summarized in detail, along with references to many other pieces of this wide ranging research area. It also covers many of the questions that new researchers will face when getting into the field, and hopefully can serve as a kind of minitutorial for those interested in getting started.},
	number = {5–7},
	urldate = {2017-05-15},
	journal = {Journal of Economic Dynamics and Control},
	author = {LeBaron, Blake},
	month = jun,
	year = {2000},
	keywords = {Learning, Agents, Evolution, Heterogeneous information, Simulated markets},
	pages = {679--702},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/G27SM5AH/LeBaron - 2000 - Agent-based computational finance Suggested readi.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/U2JN5APT/S0165188999000226.html:text/html}
}

@inproceedings{eriksson_sics_1998,
	title = {{SICS} {MarketSpace} — {An} {Agent}-{Based} {Market} {Infrastructure}},
	url = {https://link.springer.com/chapter/10.1007/3-540-48835-9_3},
	doi = {10.1007/3-540-48835-9_3},
	abstract = {We present a simple and uniform communication framework for an agent-based market infrastructure, the goal of which is to enable automation of consumer goods markets distributed over the Internet. The framework consists of an information model for participant interests and an interaction model that defines a basic vocabulary for advertising, searching, negotiating and settling deals. The information model is based on structured documents representing contracts and representations of constrained sets of contracts called interests. The interaction model is asynchronous message communication in a speech act based language, similar to, but simpler than, KQML [7] and FIPA ACL [8]. We also discuss integration of an agent-based market infrastructure with the web.},
	language = {en},
	urldate = {2017-05-15},
	booktitle = {Agent {Mediated} {Electronic} {Commerce}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Eriksson, Joakim and Finne, Niclas and Janson, Sverker},
	month = may,
	year = {1998},
	pages = {41--53},
	file = {Snapshot:/home/io.nathan/Zotero/storage/6T3BBZGD/3-540-48835-9_3.html:text/html}
}

@techreport{yim_effect_2015,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {The {Effect} of {Fast} {Traders} in {Continuous} {Double} {Auction} {Market}},
	url = {https://papers.ssrn.com/abstract=2702014},
	abstract = {In this paper, we investigate the effect of fast traders in continuous double action markets using agent-based modeling. We consider two agent types, such as fa},
	number = {ID 2702014},
	urldate = {2017-05-15},
	institution = {Social Science Research Network},
	author = {Yim, Kyubin and Oh, Gabjin and Kim, Seunghwan},
	month = dec,
	year = {2015},
	keywords = {agent based modeling, Market Microstructure, high-frequency trading, Continuous double auction market, Fast and slow traders},
	file = {Snapshot:/home/io.nathan/Zotero/storage/VJSSVF5E/papers.html:text/html}
}

@article{leal_rock_2016,
	title = {Rock around the clock: {An} agent-based model of low- and high-frequency trading},
	volume = {26},
	issn = {0936-9937, 1432-1386},
	shorttitle = {Rock around the clock},
	url = {https://link.springer.com/article/10.1007/s00191-015-0418-4},
	doi = {10.1007/s00191-015-0418-4},
	abstract = {We build an agent-based model to study how the interplay between low- and high-frequency trading affects asset price dynamics. Our main goal is to investigate whether high-frequency trading exacerbates market volatility and generates flash crashes. In the model, low-frequency agents adopt trading rules based on chronological time and can switch between fundamentalist and chartist strategies. By contrast, high-frequency traders activation is event-driven and depends on price fluctuations. High-frequency traders use directional strategies to exploit market information produced by low-frequency traders. Monte-Carlo simulations reveal that the model replicates the main stylized facts of financial markets. Furthermore, we find that the presence of high-frequency traders increases market volatility and plays a fundamental role in the generation of flash crashes. The emergence of flash crashes is explained by two salient characteristics of high-frequency traders, i.e., their ability to i. generate high bid-ask spreads and ii. synchronize on the sell side of the limit order book. Finally, we find that higher rates of order cancellation by high-frequency traders increase the incidence of flash crashes but reduce their duration.},
	language = {en},
	number = {1},
	urldate = {2017-05-15},
	journal = {Journal of Evolutionary Economics},
	author = {Leal, Sandrine Jacob and Napoletano, Mauro and Roventini, Andrea and Fagiolo, Giorgio},
	month = mar,
	year = {2016},
	pages = {49--76},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/ADSIESFG/Leal et al. - 2016 - Rock around the clock An agent-based model of low.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/UJJQIV43/s00191-015-0418-4.html:text/html}
}

@techreport{sornette_crashes_2011,
	type = {Government {Office} for {Science}},
	title = {Crashes and high frequency trading},
	shorttitle = {Computer trading},
	url = {https://www.gov.uk/government/publications/computer-trading-crashes-and-high-frequency-trading},
	abstract = {Report evaluating the risks posed by high-speed algorithmic trading.},
	urldate = {2017-05-15},
	author = {Sornette, D and von der Becke, S},
	month = aug,
	year = {2011},
	file = {Snapshot:/home/io.nathan/Zotero/storage/KC9XKI93/computer-trading-crashes-and-high-frequency-trading.html:text/html}
}

@misc{noauthor_computer_nodate,
	title = {Computer trading: crashes and high frequency trading - {GOV}.{UK}},
	shorttitle = {Computer trading},
	url = {https://www.gov.uk/government/publications/computer-trading-crashes-and-high-frequency-trading},
	abstract = {Report evaluating the risks posed by high-speed algorithmic trading.},
	urldate = {2017-05-15},
	file = {Snapshot:/home/io.nathan/Zotero/storage/BT3EH8DP/computer-trading-crashes-and-high-frequency-trading.html:text/html}
}

@book{harris_trading_2003,
	title = {Trading and {Exchanges}: {Market} {Microstructure} for {Practitioners}},
	isbn = {978-0-19-514470-3},
	shorttitle = {Trading and {Exchanges}},
	abstract = {This book is about trading, the people who trade securities and contracts, the marketplaces where they trade, and the rules that govern it. Readers will learn about investors, brokers, dealers, arbitrageurs, retail traders, day traders, rogue traders, and gamblers; exchanges, boards of trade, dealer networks, ECNs (electronic communications networks), crossing markets, and pink sheets. Also covered in this text are single price auctions, open outcry auctions, and brokered markets limit orders, market orders, and stop orders. Finally, the author covers the areas of program trades, block trades, and short trades, price priority, time precedence, public order precedence, and display precedence, insider trading, scalping, and bluffing, and investing, speculating, and gambling.},
	language = {en},
	publisher = {Oxford University Press},
	author = {Harris, Larry},
	year = {2003},
	note = {Google-Books-ID: Rd9hDRR1Yx4C},
	keywords = {Business \& Economics / Investments \& Securities / General, Business \& Economics / Finance / General}
}

@book{roth_who_2015,
	title = {Who {Gets} {What} - {And} {Why}: {The} {Hidden} {World} of {Matchmaking} and {Market} {Design}},
	isbn = {978-0-00-752079-4},
	shorttitle = {Who {Gets} {What} - {And} {Why}},
	abstract = {How our lives are shaped not only by the choices we make, but by the choices we have. In many parts of life – jobs, housing, medical care, education, even a date on the internet – price is not the only determinant of who gets what. So how do the other processes that influence who gets which goods, jobs, university places and partners really work? In ‘Who Gets What’, Nobel Prize winning economist Alvin Roth uncovers the global rules of how markets allocate, how matchmaking shapes lives, where markets exist that we may not even realise, and how everything about our biggest experiences – from getting accepted at university or living where we want – can be better understood and negotiated when one understands the design of those matching markets. The distribution of rewards is often unfair, but it’s seldom as random as it seems, and Roth reveals just how much of our life takes place in marketplaces, and leads us to a new understanding of who gets what and why. For fans of ‘Freakonomics’ and ‘Thinking Fast and Slow’ this groundbreaking book sheds new light on the politics of free markets, and how many things that we choose in life also must choose us.},
	language = {en},
	publisher = {HarperCollins UK},
	author = {Roth, Alvin},
	month = jun,
	year = {2015},
	note = {Google-Books-ID: gV\_GBAAAQBAJ},
	keywords = {Business \& Economics / General, Business \& Economics / Decision-Making \& Problem Solving, Business \& Economics / Economics / General, Self-Help / General}
}

@article{lloyd_category-theoretic_2010,
	title = {A {Category}-{Theoretic} {Approach} to {Agent}-based {Modeling} and {Simulation}},
	abstract = {Category Theory represents a robust mathematical formalism for the study of systems, including
system elements, coupling, structure, behavior and morphism1
. These properties are also fundamental
in the study and practice of Agent-Based Modeling and Simulation (ABMS).
The purpose of this presentation is to provide a very elementary, introductory overview of the
application of a category-theoretic approach to ABMS. This approach is applied to a real-world
biomedical problem domain involving emergent properties of inter-cellular interaction in Systemic
Inflammatory Response Syndrome.
The objective is to raise awareness of the value of this approach and to demonstrate the representation
of the universal properties of this methodology.},
	journal = {Swarmfest 2010 Santa Fe},
	author = {Lloyd, Kenneth},
	year = {2010}
}

@inproceedings{beheshti_analyzing_2013,
	address = {Washington, DC, USA},
	series = {{WI}-{IAT} '13},
	title = {Analyzing {Agent}-{Based} {Models} {Using} {Category} {Theory}},
	isbn = {978-0-7695-5145-6},
	url = {http://dx.doi.org/10.1109/WI-IAT.2013.121},
	doi = {10.1109/WI-IAT.2013.121},
	abstract = {Agent-based models are a useful technique for rapidly prototyping complex social systems, they are widely used in a number of disciplines and can yield theoretical insights that are different from those produced by a variable based analysis. However, it remains difficult to compare the results of two models and to validate the performance of an agent-based simulation. In this paper, we present a case study on how to analyze the relationship between agent-based models using category theory. Category theory is a powerful mathematical methodology that was originally introduced to organize mathematical ideas according to their shared structure. It has been successfully employed in abstract mathematical domains, but has also enjoyed some success as a formalism for software engineering. Here we present a procedure for analyzing agent-based models using category theory and a case study in its usage at analyzing two different types of simulations.},
	urldate = {2017-05-12},
	booktitle = {Proceedings of the 2013 {IEEE}/{WIC}/{ACM} {International} {Joint} {Conferences} on {Web} {Intelligence} ({WI}) and {Intelligent} {Agent} {Technologies} ({IAT}) - {Volume} 02},
	publisher = {IEEE Computer Society},
	author = {Beheshti, Rahmatollah and Sukthankar, Gita},
	year = {2013},
	keywords = {Agent-based modeling, category theory, Markov-chain Monte Carlo},
	pages = {280--286},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/A9RNXIFQ/Beheshti and Sukthankar - 2013 - Analyzing Agent-Based Models Using Category Theory.pdf:application/pdf}
}

@incollection{bove_dependent_2009,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Dependent {Types} at {Work}},
	copyright = {©2009 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-03152-6 978-3-642-03153-3},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-03153-3_2},
	abstract = {In these lecture notes we give an introduction to functional programming with dependent types. We use the dependently typed programming language Agda which is an extension of Martin-Löf type theory. First we show how to do simply typed functional programming in the style of Haskell and ML. Some differences between Agda’s type system and the Hindley-Milner type system of Haskell and ML are also discussed. Then we show how to use dependent types for programming and we explain the basic ideas behind type-checking dependent types. We go on to explain the Curry-Howard identification of propositions and types. This is what makes Agda a programming logic and not only a programming language. According to Curry-Howard, we identify programs and proofs, something which is possible only by requiring that all program terminate. However, at the end of these notes we present a method for encoding partial and general recursive functions as total functions using dependent types.},
	language = {en},
	number = {5520},
	urldate = {2017-05-12},
	booktitle = {Language {Engineering} and {Rigorous} {Software} {Development}},
	publisher = {Springer Berlin Heidelberg},
	author = {Bove, Ana and Dybjer, Peter},
	editor = {Bove, Ana and Barbosa, Luís Soares and Pardo, Alberto and Pinto, Jorge Sousa},
	year = {2009},
	doi = {10.1007/978-3-642-03153-3_2},
	keywords = {Software Engineering, Programming Techniques, Programming Languages, Compilers, Interpreters, Management of Computing and Information Systems, Simulation and Modeling},
	pages = {57--99},
	file = {Snapshot:/home/io.nathan/Zotero/storage/73V8CMI7/10.html:text/html}
}

@inproceedings{norell_dependently_2009,
	address = {New York, NY, USA},
	series = {{TLDI} '09},
	title = {Dependently {Typed} {Programming} in {Agda}},
	isbn = {978-1-60558-420-1},
	url = {http://doi.acm.org/10.1145/1481861.1481862},
	doi = {10.1145/1481861.1481862},
	abstract = {Dependently typed languages have for a long time been used to describe proofs about programs. Traditionally, dependent types are used mostly for stating and proving the properties of the programs and not in defining the programs themselves. An impressive example is the certified compiler by Leroy (2006) implemented and proved correct in Coq (Bertot and Castéran 2004). Recently there has been an increased interest in dependently typed programming, where the aim is to write programs that use the dependent type system to a much higher degree. In this way a lot of the properties that were previously proved separately can be integrated in the type of the program, in many cases adding little or no complexity to the definition of the program. New languages, such as Epigram (McBride and McKinna 2004), are being designed, and existing languages are being extended with new features to accomodate these ideas, for instance the work on dependently typed programming in Coq by Sozeau (2007). This talk gives an overview of the Agda programming language (Norell 2007), whose main focus is on dependently typed programming. Agda provides a rich set of inductive types with a powerful mechanism for pattern matching, allowing dependently typed programs to be written with minimal fuss. To read about programming in Agda, see the lecture notes from the Advanced Functional Programming summer school (Norell 2008) and the work by Oury and Swierstra (2008). In the talk a number of examples of interesting dependently typed programs chosen from the domain of programming language implementation are presented as they are implemented in Agda.},
	urldate = {2017-05-12},
	booktitle = {Proceedings of the 4th {International} {Workshop} on {Types} in {Language} {Design} and {Implementation}},
	publisher = {ACM},
	author = {Norell, Ulf},
	year = {2009},
	keywords = {dependent types, programming},
	pages = {1--2},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/EZ6GTU4X/Norell - 2009 - Dependently Typed Programming in Agda.pdf:application/pdf}
}

@inproceedings{bove_brief_2009,
	address = {Berlin, Heidelberg},
	series = {{TPHOLs} '09},
	title = {A {Brief} {Overview} of {Agda} — {A} {Functional} {Language} with {Dependent} {Types}},
	isbn = {978-3-642-03358-2},
	url = {http://dx.doi.org/10.1007/978-3-642-03359-9_6},
	doi = {10.1007/978-3-642-03359-9_6},
	abstract = {We give an overview of Agda, the latest in a series of dependently typed programming languages developed in Gothenburg. Agda is based on Martin-Löf's intuitionistic type theory but extends it with numerous programming language features. It supports a wide range of inductive data types, including inductive families and inductive-recursive types, with associated flexible pattern-matching. Unlike other proof assistants, Agda is not tactic-based. Instead it has an Emacs-based interface which allows programming by gradual refinement of incomplete type-correct terms.},
	urldate = {2017-05-12},
	booktitle = {Proceedings of the 22Nd {International} {Conference} on {Theorem} {Proving} in {Higher} {Order} {Logics}},
	publisher = {Springer-Verlag},
	author = {Bove, Ana and Dybjer, Peter and Norell, Ulf},
	year = {2009},
	pages = {73--78}
}

@inproceedings{peyton_jones_concurrent_1996,
	address = {New York, NY, USA},
	series = {{POPL} '96},
	title = {Concurrent {Haskell}},
	isbn = {978-0-89791-769-8},
	url = {http://doi.acm.org/10.1145/237721.237794},
	doi = {10.1145/237721.237794},
	urldate = {2017-05-12},
	booktitle = {Proceedings of the 23rd {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Peyton Jones, Simon and Gordon, Andrew and Finne, Sigbjorn},
	year = {1996},
	pages = {295--308}
}

@inproceedings{jones_tutorial_2009,
	address = {Berlin, Heidelberg},
	series = {{AFP}'08},
	title = {A {Tutorial} on {Parallel} and {Concurrent} {Programming} in {Haskell}},
	isbn = {978-3-642-04651-3},
	url = {http://dl.acm.org/citation.cfm?id=1813347.1813353},
	abstract = {This practical tutorial introduces the features available in Haskell for writing parallel and concurrent programs. We first describe how to write semi-explicit parallel programs by using annotations to express opportunities for parallelism and to help control the granularity of parallelism for effective execution on modern operating systems and processors. We then describe the mechanisms provided by Haskell for writing explicitly parallel programs with a focus on the use of software transactional memory to help share information between threads. Finally, we show how nested data parallelism can be used to write deterministically parallel programs which allows programmers to use rich data types in data parallel programs which are automatically transformed into flat data parallel versions for efficient execution on multi-core processors.},
	urldate = {2017-05-12},
	booktitle = {Proceedings of the 6th {International} {Conference} on {Advanced} {Functional} {Programming}},
	publisher = {Springer-Verlag},
	author = {Jones, Simon Peyton and Singh, Satnam},
	year = {2009},
	pages = {267--305}
}

@book{marlow_parallel_2013,
	title = {Parallel and {Concurrent} {Programming} in {Haskell}},
	isbn = {978-1-4493-3593-9},
	abstract = {If you have a working knowledge of Haskell, this hands-on book shows you how to use the language\{u2019\}s many APIs and frameworks for writing both parallel and concurrent programs. You\{u2019\}ll learn how parallelism exploits multicore processors to speed up computation-heavy programs, and how concurrency enables you to write programs with threads for multiple interactions. Author Simon Marlow walks you through the process with lots of code examples that you can run, experiment with, and extend. Divided into separate sections on Parallel and Concurrent Haskell, this book also includes exercises to help you become familiar with the concepts presented: Express parallelism in Haskell with the Eval monad and Evaluation Strategies Parallelize ordinary Haskell code with the Par monad Build parallel array-based computations, using the Repa library Use the Accelerate library to run computations directly on the GPU Work with basic interfaces for writing concurrent code Build trees of threads for larger and more complex programs Learn how to build high-speed concurrent network servers Write distributed programs that run on multiple machines in a network.},
	language = {en},
	publisher = {O'Reilly},
	author = {Marlow, Simon},
	year = {2013},
	note = {Google-Books-ID: k0W6AQAACAAJ}
}

@book{gregory_game_2018,
	title = {Game {Engine} {Architecture}, {Third} {Edition}},
	isbn = {978-1-138-03545-4},
	abstract = {Covers theory and practice of game engine software development, bringing together a wide range of concepts and techniques actually used by real game studios like Electronic Arts and Naughty Dog. The examples are often grounded in specific technologies, but the discussion extends way beyond any particular engine or API. The references and citations make it a great jumping off point for those who wish to dig deeper into any particular aspect of the game development process. New to this edition: update the section on game console HW, extend the rendering chapter, include a section on 2D GUI, new chapter on multiplayer networking, more coverage of the Unity game engine.},
	language = {en},
	publisher = {Taylor \& Francis},
	author = {Gregory, Jason},
	month = mar,
	year = {2018}
}

@book{osullivan_real_2008,
	edition = {1st},
	title = {Real {World} {Haskell}},
	isbn = {978-0-596-51498-3},
	abstract = {This easy-to-use, fast-moving tutorial introduces you to functional programming with Haskell. You'll learn how to use Haskell in a variety of practical ways, from short scripts to large and demanding applications. Real World Haskell takes you through the basics of functional programming at a brisk pace, and then helps you increase your understanding of Haskell in real-world issues like I/O, performance, dealing with data, concurrency, and more as you move through each chapter. With this book, you will: Understand the differences between procedural and functional programming Learn the features of Haskell, and how to use it to develop useful programs Interact with filesystems, databases, and network services Write solid code with automated tests, code coverage, and error handling Harness the power of multicore systems via concurrent and parallel programming You'll find plenty of hands-on exercises, along with examples of real Haskell programs that you can modify, compile, and run. Whether or not you've used a functional language before, if you want to understand why Haskell is coming into its own as a practical language in so many major organizations, Real World Haskell is the best place to start.},
	publisher = {O'Reilly Media, Inc.},
	author = {O'Sullivan, Bryan and Goerzen, John and Stewart, Don},
	year = {2008}
}

@article{claessen_testing_2002,
	title = {Testing {Monadic} {Code} with {QuickCheck}},
	volume = {37},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/636517.636527},
	doi = {10.1145/636517.636527},
	abstract = {QuickCheck is a previously published random testing tool for Haskell programs. In this paper we show how to use it for testing monadic code, and in particular imperative code written using the ST monad. QuickCheck tests a program against a specification: we show that QuickCheck's specification language is sufficiently powerful to represent common forms of specifications: algebraic, model-based (both functional and relational), and pre-/post-conditional. Moreover, all these forms of specification can be used directly for testing. We define a new language of monadic properties, and make a link between program testing and the notion of observational equivalence.},
	number = {12},
	urldate = {2017-05-11},
	journal = {SIGPLAN Not.},
	author = {Claessen, Koen and Hughes, John},
	month = dec,
	year = {2002},
	pages = {47--59},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/3SMCN5GK/Claessen and Hughes - 2002 - Testing Monadic Code with QuickCheck.pdf:application/pdf}
}

@book{hutton_programming_2016,
	title = {Programming in {Haskell}},
	isbn = {978-1-316-87597-1},
	abstract = {Haskell is a purely functional language that allows programmers to rapidly develop clear, concise, and correct software. The language has grown in popularity in recent years, both in teaching and in industry. This book is based on the author's experience of teaching Haskell for more than twenty years. All concepts are explained from first principles and no programming experience is required, making this book accessible to a broad spectrum of readers. While Part I focuses on basic concepts, Part II introduces the reader to more advanced topics. This new edition has been extensively updated and expanded to include recent and more advanced features of Haskell, new examples and exercises, selected solutions, and freely downloadable lecture slides and example code. The presentation is clean and simple, while also being fully compliant with the latest version of the language, including recent changes concerning applicative, monadic, foldable, and traversable types.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Hutton, Graham},
	month = aug,
	year = {2016},
	note = {Google-Books-ID: 1xHPDAAAQBAJ},
	keywords = {Computers / Programming Languages / General, Mathematics / Discrete Mathematics, Mathematics / Numerical Analysis}
}

@book{michaelson_introduction_2011,
	title = {An {Introduction} to {Functional} {Programming} {Through} {Lambda} {Calculus}},
	isbn = {978-0-486-47883-8},
	abstract = {Functional programming is rooted in lambda calculus, which constitutes the world\&\#39;s smallest programming language. This well-respected text offers an accessible introduction to functional programming concepts and techniques for students of mathematics and computer science. The treatment is as nontechnical as possible, and it assumes no prior knowledge of mathematics or functional programming. Cogent examples illuminate the central ideas, and numerous exercises appear throughout the text, offering reinforcement of key concepts. All problems feature complete solutions.},
	language = {en},
	publisher = {Courier Corporation},
	author = {Michaelson, Greg},
	year = {2011},
	note = {Google-Books-ID: gKvwPtvsSjsC},
	keywords = {Computers / Programming Languages / General, Computers / Programming / Object Oriented, Mathematics / General}
}

@inproceedings{hudak_history_2007,
	address = {New York, NY, USA},
	series = {{HOPL} {III}},
	title = {A {History} of {Haskell}: {Being} {Lazy} with {Class}},
	isbn = {978-1-59593-766-7},
	shorttitle = {A {History} of {Haskell}},
	url = {http://doi.acm.org/10.1145/1238844.1238856},
	doi = {10.1145/1238844.1238856},
	abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
	urldate = {2017-05-10},
	booktitle = {Proceedings of the {Third} {ACM} {SIGPLAN} {Conference} on {History} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
	year = {2007},
	pages = {12--1--12--55},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/GJQ4BK8V/Hudak et al. - 2007 - A History of Haskell Being Lazy with Class.pdf:application/pdf}
}

@book{church_calculi_1941,
	title = {The {Calculi} of {Lambda}-conversion},
	isbn = {978-0-691-08394-0},
	abstract = {The description for this book, The Calculi of Lambda Conversion. (AM-6), will be forthcoming.},
	language = {en},
	publisher = {Princeton University Press},
	author = {Church, Alonzo},
	year = {1941},
	note = {Google-Books-ID: KCOuGztKVgcC},
	keywords = {Mathematics / Calculus}
}

@inproceedings{wadler_essence_1992,
	address = {New York, NY, USA},
	series = {{POPL} '92},
	title = {The {Essence} of {Functional} {Programming}},
	isbn = {978-0-89791-453-6},
	url = {http://doi.acm.org/10.1145/143165.143169},
	doi = {10.1145/143165.143169},
	abstract = {This paper explores the use monads to structure functional
programs. No prior knowledge of monads or category theory is
required.

Monads increase the ease with which programs may be modified.
They can mimic the effect of impure features such as exceptions,
state, and continuations; and also provide effects not easily
achieved with such features. The types of a program reflect which
effects occur.

The first section is an extended example of the use of monads. A
simple interpreter is modified to support various extra features:
error messages, state, output, and non-deterministic choice. The
second section describes the relation between monads and the
continuation-passing style. The third section sketches how monads
are used in a compiler for Haskell that is written in Haskell.},
	urldate = {2017-05-10},
	booktitle = {Proceedings of the 19th {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {Wadler, Philip},
	year = {1992},
	pages = {1--14},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/6CUXH85P/Wadler - 1992 - The Essence of Functional Programming.pdf:application/pdf}
}

@inproceedings{kawabe_nepi2programming_2000,
	title = {The {Nepi}2Programming {System}: {A} pi-{Calculus}-{Based} {Approach} to {Agent}-{Based} {Programming}},
	shorttitle = {The {Nepi}2Programming {System}},
	url = {https://link.springer.com/chapter/10.1007/3-540-45484-5_7},
	doi = {10.1007/3-540-45484-5_7},
	abstract = {We introduce a programming system Nepi2, which is based on a process algebraic framework called the π-calculus. The Nepi2 system supports programmers who wish to construct communicating software or agents. In this paper, we demonstrate programming in Nepi2. First, we write a metacircular interpreter, which enables the construction of a mobile agent framework. We then construct an entity for mobile agent systems, which is called a place agent. Finally, we give an example concerning an electronic marketplace.},
	language = {en},
	urldate = {2017-05-10},
	booktitle = {Formal {Approaches} to {Agent}-{Based} {Systems}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Kawabe, Yoshinobu and Mano, Ken and Kogure, Kiyoshi},
	month = apr,
	year = {2000},
	pages = {90--102},
	file = {Snapshot:/home/io.nathan/Zotero/storage/SP69E8F9/3-540-45484-5_7.html:text/html}
}

@inproceedings{esterline_using_2001,
	address = {London, UK, UK},
	series = {{FAABS} '00},
	title = {Using the pi-{Calculus} to {Model} {Multiagent} {Systems}},
	isbn = {978-3-540-42716-2},
	url = {http://dl.acm.org/citation.cfm?id=646168.681137},
	abstract = {We present a formal framework that uses the π-calculus for modeling multiagent systems. A process algebra in general is a term algebra used as an abstract programming language that stresses the composition of processes by a small set of process operators. The π-calculus in particular allows one to express systems of processes that have changing communication structure. We explicate the agent abstraction as a π calculus process that persists through communication actions. Our principal task here is to show how the π-calculus can be used to model certain aspects that have already been specified for a major multiagent system. We also sketch how a π-calculus framework supports development activities in this context, and we suggest how various general aspects of multiagent systems may be modeled in this framework.},
	urldate = {2017-05-10},
	booktitle = {Proceedings of the {First} {International} {Workshop} on {Formal} {Approaches} to {Agent}-{Based} {Systems}-{Revised} {Papers}},
	publisher = {Springer-Verlag},
	author = {Esterline, Albert C. and Rorie, Toinette},
	year = {2001},
	pages = {164--179}
}

@article{milner_elements_1993,
	title = {Elements of {Interaction}: {Turing} {Award} {Lecture}},
	volume = {36},
	issn = {0001-0782},
	shorttitle = {Elements of {Interaction}},
	url = {http://doi.acm.org/10.1145/151233.151240},
	doi = {10.1145/151233.151240},
	number = {1},
	urldate = {2017-05-10},
	journal = {Commun. ACM},
	author = {Milner, Robin},
	month = jan,
	year = {1993},
	keywords = {pi calculus, CCS, interaction, naming and reference, process algebra, process calculus, reduction rule},
	pages = {78--89},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/UZQMDKPH/Milner - 1993 - Elements of Interaction Turing Award Lecture.pdf:application/pdf}
}

@article{milner_calculus_1992,
	title = {A calculus of mobile processes, {II}},
	volume = {100},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/0890540192900095},
	doi = {10.1016/0890-5401(92)90009-5},
	abstract = {This is the second of two papers in which we present the π-calculus, a calculus of mobile processes. We provide a detailed presentation of some of the theory of the calculus developed to date, and in particular we establish most of the results stated in the companion paper.},
	number = {1},
	urldate = {2017-05-10},
	journal = {Information and Computation},
	author = {Milner, Robin and Parrow, Joachim and Walker, David},
	month = sep,
	year = {1992},
	pages = {41--77},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/DHF9NAR2/Milner et al. - 1992 - A calculus of mobile processes, II.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/SKZC8E9E/0890540192900095.html:text/html}
}

@article{milner_calculus_1992-1,
	title = {A calculus of mobile processes, {I}},
	volume = {100},
	issn = {0890-5401},
	url = {http://www.sciencedirect.com/science/article/pii/0890540192900084},
	doi = {10.1016/0890-5401(92)90008-4},
	abstract = {We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.},
	number = {1},
	urldate = {2017-05-10},
	journal = {Information and Computation},
	author = {Milner, Robin and Parrow, Joachim and Walker, David},
	month = sep,
	year = {1992},
	pages = {1--40},
	file = {ScienceDirect Full Text PDF:/home/io.nathan/Zotero/storage/HZMSWBKI/Milner et al. - 1992 - A calculus of mobile processes, I.pdf:application/pdf;ScienceDirect Snapshot:/home/io.nathan/Zotero/storage/JZ3P7A2I/0890540192900084.html:text/html}
}

@book{milner_communicating_1999,
	title = {Communicating and {Mobile} {Systems}: {The} {Pi} {Calculus}},
	isbn = {978-0-521-64320-7},
	shorttitle = {Communicating and {Mobile} {Systems}},
	abstract = {Communication is a fundamental and integral part of computing, whether between different computers on a network, or between components within a single computer. In this book Robin Milner introduces a new way of modelling communication that reflects its position. He treats computers and their programs as themselves built from communicating parts, rather than adding communication as an extra level of activity. Everything is introduced by means of examples, such as mobile phones, job schedualers, vending machines, data structures, and the objects of object-oriented programming. But the aim of the book is to develop a theory, the pi-calculus, in which these things can be treated rigorously. The pi-calculus differs from other models of communicating behaviour mainly in its treatment of mobility. The movement of a piece of data inside a computer program is treated exactly the same as the transfer of a message--or indeed an entire computer program--across the internet. One can also describe networks which reconfigure themselves. The calculus is very simple but powerful; its most prominent ingredient is the notion of a name. Its theory has two important ingredients: the concept of behavioural (or observational) equivalence, and the use of a new theory of types to classify patterns of interactive behaviour. The internet, and its communication protocols, fall within the scope of the theory just as much as computer programs, data structures, algorithms and programming languages. This book is the first textbook on the subject; it has been long-awaited by professionals and will be welcome by them, and their students.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Milner, Robin},
	month = may,
	year = {1999},
	note = {Google-Books-ID: k2tfQgAACAAJ},
	keywords = {Computers / Networking / General}
}

@book{milner_calculus_1980,
	title = {A {Calculus} of {Communicating} {Systems}},
	isbn = {978-0-387-10235-1},
	language = {en},
	publisher = {Springer-Verlag},
	author = {Milner, Robin},
	year = {1980},
	note = {Google-Books-ID: 7L1PAQAAIAAJ},
	keywords = {Mathematics / Logic, Computers / Machine Theory, Formal languages, Language Arts \& Disciplines / General, Machine theory}
}

@book{hoare_communicating_1985,
	title = {Communicating {Sequential} {Processes}},
	isbn = {978-0-13-153289-2},
	abstract = {This book introduces a new mathematical approach to the study of concurrency and communication. Most suitable application of this new field is to the specification, design and implementation of computer systems which continuously act and interact with their environment.},
	language = {en},
	publisher = {Prentice-Hall},
	author = {Hoare, C. A. R.},
	year = {1985},
	note = {Google-Books-ID: tpZLQgAACAAJ},
	keywords = {Computers / General}
}

@article{armstrong_erlang_2010,
	title = {Erlang},
	volume = {53},
	issn = {0001-0782},
	url = {http://doi.acm.org/10.1145/1810891.1810910},
	doi = {10.1145/1810891.1810910},
	abstract = {The same component isolation that made it effective for large distributed telecom systems makes it effective for multicore CPUs and networked applications.},
	number = {9},
	urldate = {2017-05-09},
	journal = {Commun. ACM},
	author = {Armstrong, Joe},
	month = sep,
	year = {2010},
	pages = {68--75},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/R95QPAN3/Armstrong - 2010 - Erlang.pdf:application/pdf}
}

@book{todd_multi-agent_nodate,
	title = {Multi-agent {System} {Simulation} in {Scala}: {An} {Evaluation} of {Actors} for {Parallel} {Simulation}},
	shorttitle = {Multi-agent {System} {Simulation} in {Scala}},
	abstract = {Abstract — Multi-agent system (MAS) simulation, a growing field within artificial intelligence, requires the creation of high-performance, parallel, and user-friendly simulation frameworks. The standard approach is to use threads and shared memory. The drawbacks of this approach are the common concurrency pitfalls of race conditions and performance loss due to synchronization. Our goal was to evaluate the feasibility of an alternate model of concurrency, actors. An actor can be thought of as a very lightweight thread that does not share memory with other threads, instead communicating only through message passing. Actors seem to be a natural fit for this task, since agents are concurrently processed objects that communicate with each other through message passing. We write an actor framework and an equivalent threaded framework in the modern object-functional JVM language Scala and compare their performance. We conclude that the actor model seems like a natural fit, but its performance is inferior to that of the threaded model. Despite this drawback, it shows great promise due to its elegance and simplicity. When scaling to multiple machines, the advantages of actors will almost certainly outweigh any performance costs.},
	author = {Todd, Aaron B. and Keller, Amara K. and Lewis, Mark C. and Kelly, Martin G.},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/UHQBJRT7/Todd et al. - Multi-agent System Simulation in Scala An Evaluat.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/WWD2GRVV/summary.html:text/html}
}

@inproceedings{altenkirch_pi_2010,
	address = {Berlin, Heidelberg},
	series = {{FLOPS}'10},
	title = {Pi {Sigma}: {Dependent} {Types} {Without} the {Sugar}},
	isbn = {978-3-642-12250-7},
	shorttitle = {\${\textbackslash}{Pi}\$\${\textbackslash}{Sigma}\$},
	url = {http://dx.doi.org/10.1007/978-3-642-12251-4_5},
	doi = {10.1007/978-3-642-12251-4_5},
	abstract = {The recent success of languages like Agda and Coq demonstrates the potential of using dependent types for programming. These systems rely on many high-level features like datatype definitions, pattern matching and implicit arguments to facilitate the use of the languages. However, these features complicate the metatheoretical study and are a potential source of bugs. To address these issues we introduce ΠΣ, a dependently typed core language. It is small enough for metatheoretical study and the type checker is small enough to be formally verified. In this language there is only one mechanism for recursion—used for types, functions and infinite objects—and an explicit mechanism to control unfolding, based on lifted types. Furthermore structural equality is used consistently for values and types; this is achieved by a new notion of α-equality for recursive definitions. We show, by translating several high-level constructions, that ΠΣ is suitable as a core language for dependently typed programming.},
	urldate = {2018-01-11},
	booktitle = {Proceedings of the 10th {International} {Conference} on {Functional} and {Logic} {Programming}},
	publisher = {Springer-Verlag},
	author = {Altenkirch, Thorsten and Danielsson, Nils Anders and Loeh, Andres and Oury, Nicolas},
	year = {2010},
	pages = {40--55}
}

@inproceedings{altenkirch_why_2005,
	title = {Why dependent types matter},
	abstract = {We exhibit the rationale behind the design of Epigram, a dependently typed programming language and interactive program development system, using refinements of a well known program—merge sort—as a running example. We discuss its relationship with other proposals to introduce aspects of dependent types into functional programming languages and sketch some topics for further work in this area. 1.},
	booktitle = {http://www.e-pig.org/downloads/ydtm.pdf},
	author = {Altenkirch, Thorsten and Mcbride, Conor and Mckinna, James},
	year = {2005},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/ZFVYLQBT/Altenkirch et al. - 2005 - Why dependent types matter.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/NWC5YIDG/summary.html:text/html}
}

@book{program_homotopy_2013,
	address = {Institute for Advanced Study},
	title = {Homotopy {Type} {Theory}: {Univalent} {Foundations} of {Mathematics}},
	publisher = {https://homotopytypetheory.org/book},
	author = {Program, The Univalent Foundations},
	year = {2013}
}

@article{brady_idris_2013,
	title = {Idris, a general-purpose dependently typed programming language: {Design} and implementation},
	volume = {23},
	issn = {1469-7653},
	url = {http://journals.cambridge.org/article_S095679681300018X},
	doi = {10.1017/S095679681300018X},
	number = {05},
	journal = {Journal of Functional Programming},
	author = {Brady, Edwin},
	year = {2013},
	pages = {552--593}
}

@book{brady_type-driven_2017,
	title = {Type-{Driven} {Development} with {Idris}},
	isbn = {978-1-61729-302-3},
	abstract = {Summary Type-Driven Development with Idris, written by the creator of Idris, teaches you how to improve the performance and accuracy of your programs by taking advantage of a state-of-the-art type system. This book teaches you with Idris, a language designed to support type-driven development. Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications. About the Technology Stop fighting type errors! Type-driven development is an approach to coding that embraces types as the foundation of your code - essentially as built-in documentation your compiler can use to check data relationships and other assumptions. With this approach, you can define specifications early in development and write code that's easy to maintain, test, and extend. Idris is a Haskell-like language with first-class, dependent types that's perfect for learning type-driven programming techniques you can apply in any codebase. About the Book Type-Driven Development with Idris teaches you how to improve the performance and accuracy of your code by taking advantage of a state-of-the-art type system. In this book, you'll learn type-driven development of real-world software, as well as how to handle side effects, interaction, state, and concurrency. By the end, you'll be able to develop robust and verified software in Idris and apply type-driven development methods to other languages. What's Inside  Understanding dependent types Types as first-class language constructs Types as a guide to program construction Expressing relationships between data  About the Reader Written for programmers with knowledge of functional programming concepts. About the Author Edwin Brady leads the design and implementation of the Idris language. Table of Contents PART 1 - INTRODUCTION  Overview Getting started with Idris PART 2 - CORE IDRIS  Interactive development with types User-defined data types Interactive programs: input and output processing Programming with first-class types Interfaces: using constrained generic types Equality: expressing relationships between data Predicates: expressing assumptions and contracts in types Views: extending pattern matching  PART 3 - IDRIS AND THE REAL WORLD  Streams and processes: working with infinite data Writing programs with state State machines: verifying protocols in types Dependent state machines: handling feedback and errors Type-safe concurrent programming},
	language = {en},
	publisher = {Manning Publications Company},
	author = {Brady, Edwin},
	year = {2017},
	note = {Google-Books-ID: eWzEjwEACAAJ},
	keywords = {Computers / Software Development \& Engineering / Quality Assurance \& Testing, Computers / Software Development \& Engineering / Systems Analysis \& Design, Computers / Software Development \& Engineering / Tools}
}

@article{wadler_propositions_2015,
	title = {Propositions {As} {Types}},
	volume = {58},
	issn = {0001-0782},
	url = {http://doi.acm.org/10.1145/2699407},
	doi = {10.1145/2699407},
	abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
	number = {12},
	urldate = {2018-01-15},
	journal = {Commun. ACM},
	author = {Wadler, Philip},
	month = nov,
	year = {2015},
	pages = {75--84},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/8I8P2VDP/Wadler - 2015 - Propositions As Types.pdf:application/pdf}
}

@inproceedings{jeffrey_causality_2013,
	address = {New York, NY, USA},
	series = {{PLPV} '13},
	title = {Causality for {Free}!: {Parametricity} {Implies} {Causality} for {Functional} {Reactive} {Programs}},
	isbn = {978-1-4503-1860-0},
	shorttitle = {Causality for {Free}!},
	url = {http://doi.acm.org/10.1145/2428116.2428127},
	doi = {10.1145/2428116.2428127},
	abstract = {Functional Reactive Programming (FRP) is a model of reactive systems in which signals are time-dependent values, and signal functions are functions between signals. Signal functions are required to be causal, in that output behaviour at time t is only allowed to depend on input behaviour up to time t. In order to enforce causality, many FRP libraries are arrowized, in that they provide combinators for building signal functions, rather than allowing users to write functions directly. In this paper, we provide a definition of deep causality (which coincides with the usual definition on signals of base type, but differs on nested signals). We show that FRP types can be interpreted in System Fomega extended with a kind of time, and show that in this interpretation, a "theorems for free" argument shows that parametric functions are deep causal. Since all System Fomega functions are parametric, this implies that all implementable functions are deep causal. This model is the formal basis of the agda-frp-js FRP library for the dependently typed programming language Agda, which compiles to JavaScript and executes in the browser. Assuming parametricity of Agda, this allows reactive programs to be written as regular functions over signals, without sacrificing causality. All results in this paper have been mechanically verified in Agda.},
	urldate = {2018-01-15},
	booktitle = {Proceedings of the 7th {Workshop} on {Programming} {Languages} {Meets} {Program} {Verification}},
	publisher = {ACM},
	author = {Jeffrey, Alan},
	year = {2013},
	keywords = {functional reactive programming, parametricity},
	pages = {57--68},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/9JR2B82A/Jeffrey - 2013 - Causality for Free! Parametricity Implies Causali.pdf:application/pdf}
}

@inproceedings{sculthorpe_safe_2009,
	address = {New York, NY, USA},
	series = {{ICFP} '09},
	title = {Safe {Functional} {Reactive} {Programming} {Through} {Dependent} {Types}},
	isbn = {978-1-60558-332-7},
	url = {http://doi.acm.org/10.1145/1596550.1596558},
	doi = {10.1145/1596550.1596558},
	abstract = {Functional Reactive Programming (FRP) is an approach to reactive programming where systems are structured as networks of functions operating on signals. FRP is based on the synchronous data-flow paradigm and supports both continuous-time and discrete-time signals (hybrid systems). What sets FRP apart from most other languages for similar applications is its support for systems with dynamic structure and for higher-order reactive constructs. Statically guaranteeing correctness properties of programs is an attractive proposition. This is true in particular for typical application domains for reactive programming such as embedded systems. To that end, many existing reactive languages have type systems or other static checks that guarantee domain-specific properties, such as feedback loops always being well-formed. However, they are limited in their capabilities to support dynamism and higher-order data-flow compared with FRP. Thus, the onus of ensuring such properties of FRP programs has so far been on the programmer as established static techniques do not suffice. In this paper, we show how dependent types allow this concern to be addressed. We present an implementation of FRP embedded in the dependently-typed language Agda, leveraging the type system of the host language to craft a domain-specific (dependent) type system for FRP. The implementation constitutes a discrete, operational semantics of FRP, and as it passes the Agda type, coverage, and termination checks, we know the operational semantics is total, which means our type system is safe.},
	urldate = {2018-01-15},
	booktitle = {Proceedings of the 14th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Sculthorpe, Neil and Nilsson, Henrik},
	year = {2009},
	keywords = {functional programming, FRP, domain-specific languages, dependent types, DSELS, reactive programming, synchronous data-flow},
	pages = {23--34},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/UFUQ95EQ/Sculthorpe and Nilsson - 2009 - Safe Functional Reactive Programming Through Depen.pdf:application/pdf}
}

@inproceedings{krishnaswami_higher-order_2013,
	address = {New York, NY, USA},
	series = {{ICFP} '13},
	title = {Higher-order {Functional} {Reactive} {Programming} {Without} {Spacetime} {Leaks}},
	isbn = {978-1-4503-2326-0},
	url = {http://doi.acm.org/10.1145/2500365.2500588},
	doi = {10.1145/2500365.2500588},
	abstract = {Functional reactive programming (FRP) is an elegant approach to declaratively specify reactive systems. However, the powerful abstractions of FRP have historically made it difficult to predict and control the resource usage of programs written in this style. In this paper, we give a new language for higher-order reactive programming. Our language generalizes and simplifies prior type systems for reactive programming, by supporting the use of streams of streams, first-class functions, and higher-order operations. We also support many temporal operations beyond streams, such as terminatable streams, events, and even resumptions with first-class schedulers. Furthermore, our language supports an efficient implementation strategy permitting us to eagerly deallocate old values and statically rule out spacetime leaks, a notorious source of inefficiency in reactive programs. Furthermore, these memory guarantees are achieved without the use of a complex substructural type discipline. We also show that our implementation strategy of eager deallocation is safe, by showing the soundness of our type system with a novel step-indexed Kripke logical relation.},
	urldate = {2018-01-15},
	booktitle = {Proceedings of the 18th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Krishnaswami, Neelakantan R.},
	year = {2013},
	keywords = {functional reactive programming, temporal logic, capabilities, comonads, dataflow, guarded recursion, kripke logical relations},
	pages = {221--232},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/WYHKPRPH/Krishnaswami - 2013 - Higher-order Functional Reactive Programming Witho.pdf:application/pdf}
}

@book{thompson_type_1991,
	address = {Redwood City, CA, USA},
	title = {Type {Theory} and {Functional} {Programming}},
	isbn = {978-0-201-41667-1},
	publisher = {Addison Wesley Longman Publishing Co., Inc.},
	author = {Thompson, Simon},
	year = {1991}
}

@inproceedings{thaler_art_2017,
	address = {Dublin},
	title = {The {Art} {Of} {Iterating}: {Update}-{Strategies} in {Agent}-{Based} {Simulation}},
	abstract = {When developing a model for an Agent-Based Simulation (ABS) it is very important to select the update-strategy which reflects the semantics of the model as simulation results can vary vastly across different update-strategies. This awareness, we claim, is still underdeveloped in the majority of the field of ABS. In this paper we propose a new terminology to classify update strategies and then identify different strategies using this terminology. This will allow implementers and researchers in this field to use a general terminology, removing ambiguities when discussing ABS and their models. We will give results of simulating a discrete and a continuous game using our update-strategies and show that in the case of the discrete game only one specific strategy seems to be able to produce its emergent patterns whereas the pattern of the continuous game seems to be robust under varying update-strategies.},
	author = {Thaler, Jonathan and Siebers, Peer-Olaf},
	month = sep,
	year = {2017}
}

@article{siebers_discrete-event_2010,
	title = {Discrete-event simulation is dead, long live agent-based simulation!},
	volume = {4},
	issn = {1747-7778, 1747-7786},
	url = {https://link.springer.com/article/10.1057/jos.2010.14},
	doi = {10.1057/jos.2010.14},
	abstract = {There has been much discussion about why agent-based simulation (ABS) is not as widely used as discrete-event simulation in Operational Research (OR) as it is in neighbouring disciplines such as Computer Science, the Social Sciences or Economics. To consider this issue, a plenary panel was organised at the UK Operational Research Society's Simulation Workshop 2010 (SW10). This paper captures the discussion that took place and addresses the key questions and opportunities regarding ABS that will face the OR community in the future.},
	language = {en},
	number = {3},
	urldate = {2018-01-26},
	journal = {Journal of Simulation},
	author = {Siebers, P. O. and Macal, C. M. and Garnett, J. and Buxton, D. and Pidd, M.},
	month = sep,
	year = {2010},
	pages = {204--210},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/W95LAGGI/Siebers et al. - 2010 - Discrete-event simulation is dead, long live agent.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/MQULGRC8/jos.2010.html:text/html}
}

@inproceedings{dawson_opening_2014-1,
	title = {Opening pandora's box: {Some} insight into the inner workings of an {Agent}-{Based} {Simulation} environment},
	shorttitle = {Opening pandora's box},
	doi = {10.15439/2014F335},
	abstract = {Agent-Based Simulation (ABS) environments are somewhat of a black box to many modelers in Social Simulation or Economics and their inner workings are often only understood by the computer scientists who developed them. We intend to shed some light into the inner workings of such systems. For this purpose we have developed our own simple ABS environment in C++ using hierarchical state machines. In this paper we provide insight into the design of our ABS environment and then test the performance of it by comparing it to that of an "off the shelf" commercial package. While some programming knowledge is required to understand the paper in all its depth we believe that non programming experts will also benefit from this paper as it provides an insight into the underlying mechanisms operating within an ABS using graphical representations and explanations that avoid heavy technical jargon.},
	booktitle = {2014 {Federated} {Conference} on {Computer} {Science} and {Information} {Systems}},
	author = {Dawson, D. and Siebers, P. O. and Vu, Tuong Manh},
	month = sep,
	year = {2014},
	keywords = {ABS environments, agent-based simulation environment, Automata, black box, C++, C++ language, Computational modeling, economics, Educational institutions, graphical representations, hierarchical state machines, History, Object oriented modeling, Observers, Pandora box, social simulation, software agents, Unified modeling language},
	pages = {1453--1460},
	file = {IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/I4NSASZN/6933189.html:text/html;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/LZMMYFAU/Dawson et al. - 2014 - Opening pandora's box Some insight into the inner.pdf:application/pdf}
}

@phdthesis{perez_extensible_2017,
	address = {Nottingham},
	type = {Doctoral {Thesis}},
	title = {Extensible and {Robust} {Functional} {Reactive} {Programming}},
	language = {English},
	school = {University Of Nottingham},
	author = {Perez, Ivan},
	month = oct,
	year = {2017}
}

@article{abbey_examination_1952,
	title = {An {Examination} of the {Reed}-{Frost} {Theory} of {Epidemics}},
	volume = {24},
	url = {http://ezproxy.nottingham.ac.uk/login?url=https://search.proquest.com/docview/1301828990?accountid=8018},
	number = {3},
	journal = {Human Biology},
	author = {Abbey, Helen},
	month = sep,
	year = {1952},
	keywords = {Anthropology/Ethnology},
	pages = {201}
}

@inproceedings{brady_programming_2013,
	address = {New York, NY, USA},
	series = {{ICFP} '13},
	title = {Programming and {Reasoning} with {Algebraic} {Effects} and {Dependent} {Types}},
	isbn = {978-1-4503-2326-0},
	url = {http://doi.acm.org/10.1145/2500365.2500581},
	doi = {10.1145/2500365.2500581},
	abstract = {One often cited benefit of pure functional programming is that pure code is easier to test and reason about, both formally and informally. However, real programs have side-effects including state management, exceptions and interactions with the outside world. Haskell solves this problem using monads to capture details of possibly side-effecting computations --- it provides monads for capturing state, I/O, exceptions, non-determinism, libraries for practical purposes such as CGI and parsing, and many others, as well as monad transformers for combining multiple effects. Unfortunately, useful as monads are, they do not compose very well. Monad transformers can quickly become unwieldy when there are lots of effects to manage, leading to a temptation in larger programs to combine everything into one coarse-grained state and exception monad. In this paper I describe an alternative approach based on handling algebraic effects, implemented in the IDRIS programming language. I show how to describe side effecting computations, how to write programs which compose multiple fine-grained effects, and how, using dependent types, we can use this approach to reason about states in effectful programs.},
	urldate = {2018-02-02},
	booktitle = {Proceedings of the 18th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Brady, Edwin},
	year = {2013},
	keywords = {dependent types, algebraic effects},
	pages = {133--144},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/R5HBK998/Brady - 2013 - Programming and Reasoning with Algebraic Effects a.pdf:application/pdf}
}

@article{macal_everything_2016,
	title = {Everything you need to know about agent-based modelling and simulation},
	volume = {10},
	issn = {1747-7778, 1747-7786},
	url = {https://link.springer.com/article/10.1057/jos.2016.7},
	doi = {10.1057/jos.2016.7},
	abstract = {This paper addresses the background and current state of the field of agent-based modelling and simulation (ABMS). It revisits the issue of ABMS represents as a new development, considering the extremes of being an overhyped fad, doomed to disappear, or a revolutionary development, shifting fundamental paradigms of how research is conducted. This paper identifies key ABMS resources, publications, and communities. It also proposes several complementary definitions for ABMS, based on practice, intended to establish a common vocabulary for understanding ABMS, which seems to be lacking. It concludes by suggesting research challenges for ABMS to advance and realize its potential in the coming years.},
	language = {en},
	number = {2},
	urldate = {2018-02-09},
	journal = {Journal of Simulation},
	author = {Macal, C. M.},
	month = may,
	year = {2016},
	pages = {144--156},
	file = {Snapshot:/home/io.nathan/Zotero/storage/TI6F7ZIL/jos.2016.html:text/html}
}

@book{north_managing_2007,
	title = {Managing {Business} {Complexity}: {Discovering} {Strategic} {Solutions} with {Agent}-{Based} {Modeling} and {Simulation}},
	isbn = {978-0-19-517211-9},
	shorttitle = {Managing {Business} {Complexity}},
	abstract = {Agent-based modeling and simulation (ABMS), a way to simulate a large number of choices by individual actors, is one of the most exciting practical developments in business modeling since the invention of relational databases. It represents a new way to understand data and generate information that has never been available before--a way for businesses to view the future and to understand and anticipate the likely effects of their decisions on their markets and industries. It thus promises to have far-reaching effects on the way that businesses in many areas use computers to support practical decision-making.Managing Business Complexity is the first complete business-oriented agent-based modeling and simulation resource. It has three purposes: first, to teach readers how to think about ABMS, that is, about agents and their interactions; second, to teach readers how to explain the features and advantages of ABMS to other people and third, to teach readers how to actually implement ABMS by building agent-based simulations. It is intended to be a complete ABMS resource, accessible to readers who haven't had any previous experience in building agent-based simulations, or any other kinds of models, for that matter. It is also a collection of ABMS business applications resources, all assembled in one place for the first time. In short, Managing Business Complexity addresses who needs ABMS and why, where and when ABMS can be applied to the everyday business problems that surround us, and how specifically to build these powerful agent-based models.},
	language = {en},
	publisher = {Oxford University Press, USA},
	author = {North, Michael J. and Macal, Charles M.},
	month = mar,
	year = {2007},
	note = {Google-Books-ID: gRATDAAAQBAJ},
	keywords = {Business \& Economics / Decision-Making \& Problem Solving, Business \& Economics / Management Science}
}

@inproceedings{meyer_event-driven_2014,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Event-{Driven} {Multi}-agent {Simulation}},
	isbn = {978-3-319-14626-3 978-3-319-14627-0},
	url = {https://link.springer.com/chapter/10.1007/978-3-319-14627-0_1},
	doi = {10.1007/978-3-319-14627-0_1},
	abstract = {Most agent-based models today apply a time-driven approach, i.e. simulation time is advanced in equidistant steps. This time advance method is considerably easier to implement than the more flexible and efficient event-driven approach.Applying the event-driven approach requires that (a) the durations for agent and environment actions are determined before they terminate, (b) each agent is able to instantly react to changes in its environment, and (c) the update of the state of the environment can be kept efficient despite updating agents asynchronously.The simulation toolkit famos fulfils these requirements, extending an existing discrete-event simulator. The toolkit also supports a flexible representation of space and the movement of agents in that space. These are areas where existing toolkits for agent-based modelling show shortcomings, despite the fact that a majority of multi-agent models explicitly model space and allow for mobile agents.},
	language = {en},
	urldate = {2018-02-13},
	booktitle = {Multi-{Agent}-{Based} {Simulation} {XV}},
	publisher = {Springer, Cham},
	author = {Meyer, Ruth},
	month = may,
	year = {2014},
	pages = {3--16},
	file = {Snapshot:/home/io.nathan/Zotero/storage/RGMQKZE9/978-3-319-14627-0_1.html:text/html}
}

@inproceedings{majid_comparing_2009,
	address = {Vista, CA},
	series = {{SCSC} '09},
	title = {Comparing {Simulation} {Output} {Accuracy} of {Discrete} {Event} and {Agent} {Based} {Models}: {A} {Quantitative} {Approach}},
	shorttitle = {Comparing {Simulation} {Output} {Accuracy} of {Discrete} {Event} and {Agent} {Based} {Models}},
	url = {http://dl.acm.org/citation.cfm?id=2349508.2349532},
	abstract = {In our research we investigate the output accuracy of discrete event simulation models and agent based simulation models when studying human centric complex systems. In this paper we focus on human reactive behaviour as it is possible in both modelling approaches to implement human reactive behaviour in the model by using standard methods. As a case study we have chosen the retail sector, and here in particular the operations of the fitting room in the women wear department of a large UK department store. In our case study we looked at ways of determining the efficiency of implementing new management policies for the fitting room operation through modelling the reactive behaviour of staff and customers of the department. First, we have carried out a validation experiment in which we compared the results from our models to the performance of the real system. This experiment also allowed us to establish differences in output accuracy between the two modelling methods. In a second step a multi-scenario experiment was carried out to study the behaviour of the models when they are used for the purpose of operational improvement. Overall we have found that for our case study example both, discrete event simulation and agent based simulation have the same potential to support the investigation into the efficiency of implementing new management policies.},
	urldate = {2018-02-24},
	booktitle = {Proceedings of the 2009 {Summer} {Computer} {Simulation} {Conference}},
	publisher = {Society for Modeling \& Simulation International},
	author = {Majid, Mazlina Abdul and Aickelin, Uwe and Siebers, Peer-Olaf},
	year = {2009},
	keywords = {discrete event simulation, agent based simulation, human reactive behaviour, output analysis},
	pages = {177--184},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/PDWLNCPB/Majid et al. - 2009 - Comparing Simulation Output Accuracy of Discrete E.pdf:application/pdf}
}

@inproceedings{shaw_software_2000,
	address = {New York, NY, USA},
	series = {{ICSE} '00},
	title = {Software {Engineering} {Education}: {A} {Roadmap}},
	isbn = {978-1-58113-253-3},
	shorttitle = {Software {Engineering} {Education}},
	url = {http://doi.acm.org/10.1145/336512.336592},
	doi = {10.1145/336512.336592},
	urldate = {2018-02-26},
	booktitle = {Proceedings of the {Conference} on {The} {Future} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Shaw, Mary},
	year = {2000},
	keywords = {credentials, education, software engineering, software profession},
	pages = {371--380},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/8CV3Y9XA/Shaw - 2000 - Software Engineering Education A Roadmap.pdf:application/pdf}
}

@article{pidd_simulation_2006,
	title = {Simulation {Software}: {Not} the {Same} {Yesterday}, {Today} or {Forever}},
	shorttitle = {Simulation {Software}},
	abstract = {It is probably true, at least in part, that each generation assumes that the way it operates is the only way to go about things. It is easy to forget that different approaches were used in the past and hard to imagine what other approaches might be used in the future. We consider the symbiotic relationship between general developments in computing, especially in software and parallel developments in discrete event simulation. This shows that approaches other than today’s excellent simulation packages were used in the past, albeit with difficulty, to conduct useful simulations. Given that few current simulation packages make much use of recent developments in computer software, particularly in component-based developments, we consider how simulation software might develop if it utilized these developments. We present a brief description of DotNetSim, a prototype component-based discrete event simulation package to illustrate our argument.},
	journal = {Journal of Simulation},
	author = {Pidd, M. and Carvalho, A.},
	year = {2006},
	pages = {1--7},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/YQNNJ9XM/Pidd and Carvalho - 2006 - Simulation Software Not the Same Yesterday, Today.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/KQFZDBBT/summary.html:text/html}
}

@article{mansharamani_overview_1997,
	title = {An overview of discrete event simulation methodologies and implementation},
	volume = {22},
	issn = {0256-2499, 0973-7677},
	url = {https://link.springer.com/article/10.1007/BF02802549},
	doi = {10.1007/BF02802549},
	abstract = {Discrete event simulation has been widely used to model and evaluate computer and engineering systems and has been an on-going area of research and development. This paper presents an overview of the field. It covers specifications of discrete event systems, simulation methodology, simulation languages, data structures for event management, and front and backend support in simulation packages including random number generation and resource management. The emphasis of the survey is on simulation methodology and event scheduling, which forms the core of any simulation package or environment.},
	language = {en},
	number = {5},
	urldate = {2018-02-26},
	journal = {Sadhana},
	author = {Mansharamani, Rajesh},
	month = oct,
	year = {1997},
	pages = {611--627},
	file = {Full Text PDF:/home/io.nathan/Zotero/storage/5PCDCS98/Mansharamani - 1997 - An overview of discrete event simulation methodolo.pdf:application/pdf;Snapshot:/home/io.nathan/Zotero/storage/EV8FXBGB/BF02802549.html:text/html}
}

@inproceedings{fowler_dependent_2014,
	address = {New York, NY, USA},
	series = {{IFL} '13},
	title = {Dependent {Types} for {Safe} and {Secure} {Web} {Programming}},
	isbn = {978-1-4503-2988-0},
	url = {http://doi.acm.org/10.1145/2620678.2620683},
	doi = {10.1145/2620678.2620683},
	abstract = {Dependently-typed languages allow precise types to be used during development, facilitating static reasoning about program behaviour. However, with the use of more specific types comes the disadvantage that it becomes increasingly difficult to write programs that are accepted by a type checker, meaning additional proofs may have to be specified manually. Embedded domain-specific languages (EDSLs) can help address this problem by introducing a layer of abstraction over more precise underlying types, allowing domain-specific code to be written in a verified high-level language without imposing additional proof obligations on an application developer. In this paper, we apply this technique to web programming. Using the dependently typed programming language Idris, we show how to use EDSLs to enforce resource usage protocols associated with common web operations such as CGI, database access and session handling. We also introduce an EDSL which uses dependent types to facilitate the creation and handling of web forms, reducing the scope for programmer error and possible security implications.},
	urldate = {2018-04-24},
	booktitle = {Proceedings of the 25th {Symposium} on {Implementation} and {Application} of {Functional} {Languages}},
	publisher = {ACM},
	author = {Fowler, Simon and Brady, Edwin},
	year = {2014},
	keywords = {Verification, Dependent Types, Web Applications},
	pages = {49:49--49:60},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/8PSYAPNR/Fowler and Brady - 2014 - Dependent Types for Safe and Secure Web Programmin.pdf:application/pdf}
}

@inproceedings{brady_idris_2011,
	title = {Idris — systems programming meets full dependent types},
	abstract = {Dependent types have emerged in recent years as a promising ap-proach to ensuring program correctness. However, existing depen-dently typed languages such as Agda and Coq work at a very high level of abstraction, making it difficult to map verified programs to suitably efficient executable code. This is particularly problematic for programs which work with bit level data, e.g. network packet processing, binary file formats or operating system services. Such programs, being fundamental to the operation of computers in gen-eral, may stand to benefit significantly from program verification techniques. This paper describes the use of a dependently typed programming language, IDRIS, for specifying and verifying prop-erties of low-level systems programs, taking network packet pro-cessing as an extended example. We give an overview of the dis-tinctive features of IDRIS which allow it to interact with external systems code, with precise types. Furthermore, we show how to in-tegrate tactic scripts and plugin decision procedures to reduce the burden of proof on application developers. The ideas we present are readily adaptable to languages with related type systems.},
	booktitle = {In {Proc}. 5th {ACM} workshop on {Programming} languages meets program verification, {PLPV} ’11},
	publisher = {ACM},
	author = {Brady, Edwin C.},
	year = {2011},
	pages = {43--54},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/ANTB4VW9/Brady - 2011 - Idris — systems programming meets full dependent t.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/IZJYN3DY/summary.html:text/html}
}

@article{brady_correct-by-construction_2010,
	title = {Correct-by-{Construction} {Concurrency}: {Using} {Dependent} {Types} to {Verify} {Implementations} of {Effectful} {Resource} {Usage} {Protocols}},
	volume = {102},
	issn = {0169-2968},
	shorttitle = {Correct-by-{Construction} {Concurrency}},
	url = {http://dl.acm.org/citation.cfm?id=1883634.1883636},
	abstract = {In the modern, multi-threaded, multi-core programming environment, correctly managing system resources, including locks and shared variables, can be especially difficult and errorprone. A simple mistake, such as forgetting to release a lock, can have major consequences on the correct operation of a program, by, for example, inducing deadlock, often at a time and location that is isolated from the original error. In this paper, we propose a new type-based approach to resource management, based on the use of dependent types to construct a Domain-Specific Embedded Language (DSEL) whose typing rules directly enforce the formal program properties that we require. In this way, we ensure strong static guarantees of correctness-by-construction, without requiring the development of a new special-purpose type system or the associated special-purpose soundness proofs. We also reduce the need for “over-serialisation”, the overly-conservative use of locks that often occurs in manually constructed software, where formal guarantees cannot be exploited. We illustrate our approach by implementing a DSEL for concurrent programming and demonstrate its applicability with reference to an example based on simple bank account transactions.},
	number = {2},
	urldate = {2018-04-24},
	journal = {Fundam. Inf.},
	author = {Brady, Edwin and Hammond, Kevin},
	month = apr,
	year = {2010},
	pages = {145--176}
}

@techreport{brady_state_2016,
	title = {State {Machines} {All} {The} {Way} {Down} - {An} {Architecture} for {Dependently} {Typed} {Applications}},
	url = {https://www.idris-lang.org/drafts/sms.pdf},
	abstract = {A useful pattern in dependently typed programming is to de ne a state transition system, for example the states and
operations in a network protocol, as an indexed monad. We index each operation by its input and output states, thus
guaranteeing that operations satisfy pre- and post-conditions, by typechecking. However, what if we want to write a program
using several systems at once? What if we want to defne a high level state transition system, such as a network application
protocol, in terms of lower level states, such as network sockets and mutable variables?
In this paper, we present an architecture for dependently typed applications based on a hierarchy of state transition systems,
implemented in a generic data type ST. This is based on a monad indexed by contexts of resources, allowing us to reason
about multiple state transition systems in the type of a function. Using ST, we show: how to implement a state transition
system as a dependent type, with type level guarantees on its operations; how to account for operations which could fail;
how to combine state transition systems into a larger system; and, how to implement larger systems as a hierarchy of state
transition systems. We illustrate the system by implementing a number of examples, including a graphics API, POSIX network
sockets, asynchronous programming with threads, and a high level network application protocol.},
	urldate = {2018-04-24},
	author = {Brady, Edwin},
	year = {2016}
}

@inproceedings{mckinna_why_2006,
	address = {New York, NY, USA},
	series = {{POPL} '06},
	title = {Why {Dependent} {Types} {Matter}},
	isbn = {978-1-59593-027-9},
	url = {http://doi.acm.org/10.1145/1111037.1111038},
	doi = {10.1145/1111037.1111038},
	abstract = {Language designers have in recent years proposed a wealth of richer type systems for programming which seek to extend the range of statically enforced guarantees on data and code. Most such proposals have been evolutionary extensions of ML or Haskell, offering programmers a balanced compromise between expressive strength and existing well-understood technology. Typically they revolve around type- or kind-indexed types such as GADTs, supported by limited equality reasoning at the type-checking level, thus separating the dynamic behaviour of programs from the (simpler) static behaviour of indexing information occurring in their types.I want to argue in this talk for a more radical departure from such practice by examining full spectrum type dependency, lifting such restrictions on the data upon which types may depend. Conor McBride and I designed the language EPIGRAM for experiments in programming with inductive families of data (of which GADTs are a special case). Using it for illustration, I will explore some of the possibilities and challenges afforded by full spectrum type dependency at the static and dynamic level: types directly support modelling complex invariants in terms of other data (rather than their types), with a Curry-Howard flavour of data-as-evidence; such complexity is on a 'pay-as-you-go' basis, while keeping type annotations and other syntactic overheads to a minimum; data decomposition steps, e.g. case analysis, furnish more informative interactions between types and values during typechecking; such steps may moreover be abstractly specified by their types, and thus user definable; this supports a style of programming embracing 'learning by testing', views, and Burstall's 'hand simulation plus a little induction'; the absence of a rigid phase distinction need not lead to type-passing or excessive run-time overhead; effectful computation, in particular partiality, can be incorporated via variations on existing ideas such as monads.This talk is based on joint work with Conor McBride, Edwin Brady and Thorsten Altenkirch.},
	urldate = {2018-05-22},
	booktitle = {Conference {Record} of the 33rd {ACM} {SIGPLAN}-{SIGACT} {Symposium} on {Principles} of {Programming} {Languages}},
	publisher = {ACM},
	author = {McKinna, James},
	year = {2006},
	pages = {1--1},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/MY3884P4/McKinna - 2006 - Why Dependent Types Matter.pdf:application/pdf}
}

@inproceedings{dahl_birth_2002,
	title = {The birth of object orientation: the simula languages},
	shorttitle = {The birth of object orientation},
	abstract = {Abstract. The development of the programming languages Simula I and Simula 67 is briefly described. An attempt is made also to explain the cultural impact of the languages, in particular the object oriented aspects. 1},
	booktitle = {Software {Pioneers}: {Contributions} to {Software} {Engineering}, {Programming}, {Software} {Engineering} and {Operating} {Systems} {Series}},
	publisher = {Springer},
	author = {Dahl, Ole-johan},
	year = {2002},
	pages = {79--90},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/VR7T8X22/Dahl - 2002 - The birth of object orientation the simula langua.pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/XYPRXRLI/summary.html:text/html}
}

@article{halbwachs_synchronous_1991,
	title = {The synchronous data flow programming language {LUSTRE}},
	volume = {79},
	issn = {0018-9219},
	doi = {10.1109/5.97300},
	abstract = {The authors describe LUSTRE, a data flow synchronous language designed for programming reactive systems-such as automatic control and monitoring systems-as well as for describing hardware. The data flow aspect of LUSTRE makes it very close to usual description tools in these domains (block-diagrams, networks of operators, dynamical sample-systems, etc.), and its synchronous interpretation makes it well suited for handling time in programs. Moreover, this synchronous interpretation allows it to be compiled into an efficient sequential program. The LUSTRE formalism is very similar to temporal logics. This allows the language to be used for both writing programs and expressing program properties, which results in an original program verification methodology},
	number = {9},
	journal = {Proceedings of the IEEE},
	author = {Halbwachs, N. and Caspi, P. and Raymond, P. and Pilaud, D.},
	month = sep,
	year = {1991},
	keywords = {temporal logic, Aerospace control, Automatic programming, Computer languages, Computerized monitoring, Delay, description tools, Design methodology, Frequency synchronization, Hardware design languages, LUSTRE, parallel languages, program verification, program verification methodology, Protocols, reactive systems, Real time systems, sequential program, synchronous data flow programming language, temporal logics},
	pages = {1305--1320},
	file = {IEEE Xplore Abstract Record:/home/io.nathan/Zotero/storage/UC5SBSWC/97300.html:text/html;IEEE Xplore Full Text PDF:/home/io.nathan/Zotero/storage/54N6NC2L/Halbwachs et al. - 1991 - The synchronous data flow programming language LUS.pdf:application/pdf}
}

@misc{noauthor_simulation_nodate,
	title = {Simulation : {The} {Practice} of {Model} {Development} and {Use} by {Stewart} {Robinson} (2004, {Paperback})},
	shorttitle = {Simulation},
	url = {https://www.ebay.co.uk/p/Simulation-The-Practice-of-Model-Development-and-Use-by-Stewart-Robinson-2004-Paperback/5996292},
	abstract = {Find great deals for Simulation : The Practice of Model Development and Use by Stewart Robinson (2004, Paperback). Shop with confidence on eBay!},
	language = {en},
	urldate = {2018-06-07},
	journal = {eBay},
	file = {Snapshot:/home/io.nathan/Zotero/storage/UF5PGCP5/5996292.html:text/html}
}

@book{robinson_simulation:_2014,
	title = {Simulation: {The} {Practice} of {Model} {Development} and {Use}},
	isbn = {978-1-137-32802-1},
	shorttitle = {Simulation},
	abstract = {The new edition of this successful textbook provides a comprehensive introduction to simulation, foregrounding the topic as an applied problem-solving tool. Guiding readers through the key stages in a simulation project in terms of both the technical requirements and the project management issues surrounding it, the book will enable students to develop appropriate valid conceptual models, perform simulation experiments, analyse the results and draw insightful conclusions. The author’s engaging style and authoritative knowledge of the subject make the book as accessible as it is essential, drawing on case studies and complementary online content to encourage a critical engagement with the topic.This is an ideal textbook for those studying on upper level undergraduate and postgraduate degree courses in Business and Management and MBA programmes, and is a core text for those specialising in operations management. In addition, it is an important text for students taking Simulation modules on Engineering, Computer Science or Mathematics degree programmes.},
	language = {en},
	publisher = {Macmillan Education UK},
	author = {Robinson, Stewart},
	month = sep,
	year = {2014},
	note = {Google-Books-ID: Dtn0oAEACAAJ},
	keywords = {Business \& Economics / General, Business \& Economics / Business Mathematics}
}

@article{kleijnen_verification_1995,
	title = {Verification and validation of simulation models},
	volume = {82},
	issn = {0377-2217},
	url = {http://www.sciencedirect.com/science/article/pii/0377221794000166},
	doi = {10.1016/0377-2217(94)00016-6},
	abstract = {This paper surveys verification and validation of models, especially simulation models in operations research. For verification it discusses 1) general good programming practice (such as modular programming), 2) checking intermediate simulation outputs through tracing and statistical testing per module, 3) statistical testing of final simulation outputs against analytical results, and 4) animation. For validation it discusses 1) obtaining real-worl data, 2) comparing simulated and real data through simple tests such as graphical, Schruben-Turing, and t tests, 3) testing whether simulated and real responses are positively correlated and moreover have the same mean, using two new statistical procedures based on regression analysis, 4) sensitivity analysis based on design of experiments and regression analysis, and risk or uncertainty analysis based on Monte Carlo sampling, and 5) white versus black box simulation models. Both verification and validation require good documentation, and are crucial parts of assessment, credibility, and accreditation. A bibliography with 61 references is included.},
	number = {1},
	urldate = {2018-06-07},
	journal = {European Journal of Operational Research},
	author = {Kleijnen, Jack P. C.},
	month = apr,
	year = {1995},
	keywords = {modelling, Regression, Risk analysis, Simulation, Statistics},
	pages = {145--162}
}

@incollection{ormerod_validation_2006,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Validation and {Verification} of {Agent}-{Based} {Models} in the {Social} {Sciences}},
	isbn = {978-3-642-01108-5 978-3-642-01109-2},
	url = {https://link.springer.com/chapter/10.1007/978-3-642-01109-2_10},
	abstract = {This paper considers some of the difficulties in establishing verificaction and validation of agent based models. The fact that most ABMs are solved by simulation rather than analytically blurs the distinction between validation and verification. We suggest that a clear description of the phenomena to be explained by the model and testing for the simplest possible realistic agent rules of behaviour are key to the successful validation of ABMs and will provide the strongest base for enabling model comparison and acceptance. In particular, the empirical evidence that in general agents act intuitively rather than rationally is now strong. This implies that models which assign high levels of cognition to their agents require particularly strong justification if they are to be considered valid.},
	language = {en},
	urldate = {2018-06-07},
	booktitle = {Epistemological {Aspects} of {Computer} {Simulation} in the {Social} {Sciences}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Ormerod, Paul and Rosewell, Bridget},
	month = oct,
	year = {2006},
	doi = {10.1007/978-3-642-01109-2_10},
	pages = {130--140},
	file = {Snapshot:/home/io.nathan/Zotero/storage/WCM352LP/978-3-642-01109-2_10.html:text/html}
}

@article{galan_errors_2009-1,
	title = {Errors and {Artefacts} in {Agent}-{Based} {Modelling}},
	volume = {12},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/12/1/1.html},
	abstract = {The objectives of this paper are to define and classify different types of errors and artefacts that can appear in the process of developing an agent-based model, and to propose activities aimed at avoiding them during the model construction and testing phases. To do this in a structured way, we review the main concepts of the process of developing such a model – establishing a general framework that summarises the process of designing, implementing, and using agent-based models. Within this framework we identify the various stages where different types of errors and artefacts may appear. Finally we propose activities that could be used to detect (and hence eliminate) each type of error or artefact.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Galán, José Manuel and Izquierdo, Luis R. and Izquierdo, Segismundo S. and Santos, José Ignacio and del Olmo, Ricardo and López-Paredes, Adolfo and Edmonds, Bruce},
	year = {2009},
	keywords = {Replication, Verification, Agent-Based Modelling, Artefact, Error, Modelling Roles},
	pages = {1}
}

@article{galan_errors_2009-2,
	title = {Errors and {Artefacts} in {Agent}-{Based} {Modelling}},
	volume = {12},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/12/1/1.html},
	abstract = {The objectives of this paper are to define and classify different types of errors and artefacts that can appear in the process of developing an agent-based model, and to propose activities aimed at avoiding them during the model construction and testing phases. To do this in a structured way, we review the main concepts of the process of developing such a model – establishing a general framework that summarises the process of designing, implementing, and using agent-based models. Within this framework we identify the various stages where different types of errors and artefacts may appear. Finally we propose activities that could be used to detect (and hence eliminate) each type of error or artefact.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Galán, José Manuel and Izquierdo, Luis R. and Izquierdo, Segismundo S. and Santos, José Ignacio and del Olmo, Ricardo and López-Paredes, Adolfo and Edmonds, Bruce},
	year = {2009},
	keywords = {Replication, Verification, Agent-Based Modelling, Artefact, Error, Modelling Roles},
	pages = {1}
}

@article{polhill_ghost_2005,
	title = {The {Ghost} in the {Model} (and {Other} {Effects} of {Floating} {Point} {Arithmetic})},
	volume = {8},
	issn = {1460-7425},
	url = {http://jasss.soc.surrey.ac.uk/8/1/5.html},
	abstract = {This paper will explore the effects of errors in floating point arithmetic in two published agent-based models: the first a model of land use change (Polhill et al. 2001; Gotts et al. 2003), the second a model of the stock market (LeBaron et al. 1999). The first example demonstrates how branching statements with floating point operands of comparison operators create a high degree of nonlinearity, leading in this case to the creation of 'ghost' agents – visible to some parts of the program but not to others. A potential solution to this problem is proposed. The second example shows how mathematical descriptions of models in the literature are insufficient to enable exact replication of work since mathematically equivalent implementations in terms of real number arithmetic are not equivalent in terms of floating point arithmetic.},
	number = {1},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Polhill, J. Gary and Izquierdo, Luis R. and Gotts, Nicholas M.},
	year = {2005},
	keywords = {Replication, Agent Based Modelling, Floating Point Arithmetic, Interval Arithmetic},
	pages = {1}
}

@article{bauer_programming_2015,
	title = {Programming with {Algebraic} {Effects} and {Handlers}},
	volume = {84},
	issn = {23522208},
	url = {http://arxiv.org/abs/1203.1539},
	doi = {10.1016/j.jlamp.2014.02.001},
	abstract = {Eff is a programming language based on the algebraic approach to computational effects, in which effects are viewed as algebraic operations and effect handlers as homomorphisms from free algebras. Eff supports first-class effects and handlers through which we may easily define new computational effects, seamlessly combine existing ones, and handle them in novel ways. We give a denotational semantics of eff and discuss a prototype implementation based on it. Through examples we demonstrate how the standard effects are treated in eff, and how eff supports programming techniques that use various forms of delimited continuations, such as backtracking, breadth-first search, selection functionals, cooperative multi-threading, and others.},
	number = {1},
	urldate = {2018-06-12},
	journal = {Journal of Logical and Algebraic Methods in Programming},
	author = {Bauer, Andrej and Pretnar, Matija},
	month = jan,
	year = {2015},
	note = {arXiv: 1203.1539},
	keywords = {Computer Science - Programming Languages, D.3.3, F.3.3},
	pages = {108--123},
	file = {arXiv\:1203.1539 PDF:/home/io.nathan/Zotero/storage/XALRK75W/Bauer and Pretnar - 2015 - Programming with Algebraic Effects and Handlers.pdf:application/pdf;arXiv.org Snapshot:/home/io.nathan/Zotero/storage/Y2DD5R6G/1203.html:text/html}
}

@book{stump_verified_2016,
	address = {New York, NY, USA},
	title = {Verified {Functional} {Programming} in {Agda}},
	isbn = {978-1-970001-27-3},
	abstract = {Agda is an advanced programming language based on Type Theory. Agda's type system is expressive enough to support full functional verification of programs, in two styles. In external verification, we write pure functional programs and then write proofs of properties about them. The proofs are separate external artifacts, typically using structural induction. In internal verification, we specify properties of programs through rich types for the programs themselves. This often necessitates including proofs inside code, to show the type checker that the specified properties hold. The power to prove properties of programs in these two styles is a profound addition to the practice of programming, giving programmers the power to guarantee the absence of bugs, and thus improve the quality of software more than previously possible. Verified Functional Programming in Agda is the first book to provide a systematic exposition of external and internal verification in Agda, suitable for undergraduate students of Computer Science. No familiarity with functional programming or computer-checked proofs is presupposed.  The book begins with an introduction to functional programming through familiar examples like booleans, natural numbers, and lists, and techniques for external verification. Internal verification is considered through the examples of vectors, binary search trees, and Braun trees. More advanced material on type-level computation, explicit reasoning about termination, and normalization by evaluation is also included. The book also includes a medium-sized case study on Huffman encoding and decoding.},
	publisher = {Association for Computing Machinery and Morgan \& Claypool},
	author = {Stump, Aaron},
	year = {2016}
}

@misc{noauthor_software_nodate,
	title = {Software {Foundations}},
	url = {https://www.goodreads.com/work/best_book/18694371-software-foundations},
	abstract = {The Software Foundations series is a broad introduction to the mathematical underpinnings of reliable software.  The principal novelty of...},
	urldate = {2018-06-13},
	file = {Snapshot:/home/io.nathan/Zotero/storage/PFM3VQ2Z/13413455-software-foundations.html:text/html}
}

@book{pierce_programming_2018,
	series = {Software {Foundations} series, volume 2},
	title = {Programming {Language} {Foundations}},
	publisher = {Electronic textbook},
	author = {Pierce, Benjamin C. and Amorim, Arthur Azevedo de and Casinghino, Chris and Gaboardi, Marco and Greenberg, Michael and Hriţcu, Cǎtǎlin and Sjöberg, Vilhelm and Tolmach, Andrew and Yorgey, Brent},
	month = may,
	year = {2018}
}

@article{harris_composable_nodate,
	title = {Composable {Memory} {Transactions}},
	abstract = {Writing concurrent programs is notoriously diﬃcult, and is of increasing practical importance. A particular source of concern is that even correctly-implemented concurrency abstractions cannot be composed together to form larger abstractions. In this paper we present a new concurrency model, based on transactional memory, that oﬀers far richer composition. All the usual beneﬁts of transactional memory are present (e.g. freedom from deadlock), but in addition we describe new modular forms of blocking and choice that have been inaccessible in earlier work.},
	language = {en},
	author = {Harris, Tim and Peyton, Simon Marlow Simon and Herlihy, Jones Maurice},
	pages = {13},
	file = {Harris et al. - Composable Memory Transactions.pdf:/home/io.nathan/Zotero/storage/5JW8QGYH/Harris et al. - Composable Memory Transactions.pdf:application/pdf}
}

@inproceedings{harris_composable_2005,
	address = {New York, NY, USA},
	series = {{PPoPP} '05},
	title = {Composable {Memory} {Transactions}},
	isbn = {978-1-59593-080-4},
	url = {http://doi.acm.org/10.1145/1065944.1065952},
	doi = {10.1145/1065944.1065952},
	abstract = {Writing concurrent programs is notoriously difficult, and is of increasing practical importance. A particular source of concern is that even correctly-implemented concurrency abstractions cannot be composed together to form larger abstractions. In this paper we present a new concurrency model, based on transactional memory, that offers far richer composition. All the usual benefits of transactional memory are present (e.g. freedom from deadlock), but in addition we describe new modular forms of blocking and choice that have been inaccessible in earlier work.},
	urldate = {2018-06-21},
	booktitle = {Proceedings of the {Tenth} {ACM} {SIGPLAN} {Symposium} on {Principles} and {Practice} of {Parallel} {Programming}},
	publisher = {ACM},
	author = {Harris, Tim and Marlow, Simon and Peyton-Jones, Simon and Herlihy, Maurice},
	year = {2005},
	keywords = {locks, non-blocking algorithms, transactions},
	pages = {48--60},
	file = {ACM Full Text PDF:/home/io.nathan/Zotero/storage/B7AD466N/Harris et al. - 2005 - Composable Memory Transactions.pdf:application/pdf}
}

@inproceedings{siebers_proposal_2018,
	address = {Stratford, Worcestershire},
	title = {Proposal of a design pattern for embedding the concept of social forces in human centric simulation models},
	abstract = {There exist many papers that explain the social force model and its application for modelling pedestrian dynamics. None of these papers, however, explains how to implement the social force model in order to use it for systems simulation studies. In this paper we propose a design pattern (reusable template) that supports the implementation of the social force model within an artificial lab to run experiments for human centric systems. It allows considering not only people but also static and moveable markups. We demonstrate how to implement the design pattern in two commonly used agent-based modelling packages, Repast Simphony and AnyLogic. For this we use an illustrative example from the Adaptive Architecture domain. Both packages require a slightly different implementation strategy, due to the API constraints they provide. Overall, we found that the design pattern provides very helpful guidance when working on the individual solutions for the different packages.},
	author = {Siebers, Peer-Olaf and Deng, YuFeng and Thaler, Jonathan and Schnädelbach, Holger and Özcan, Ender},
	month = mar,
	year = {2018}
}

@article{turing_computable_1937,
	title = {On {Computable} {Numbers}, with an {Application} to the {Entscheidungsproblem}},
	volume = {s2-42},
	url = {http://dx.doi.org/10.1112/plms/s2-42.1.230},
	doi = {10.1112/plms/s2-42.1.230},
	number = {1},
	journal = {Proceedings of the London Mathematical Society},
	author = {Turing, A. M.},
	year = {1937},
	pages = {230--265}
}

@article{church_unsolvable_1936,
	title = {An {Unsolvable} {Problem} of {Elementary} {Number} {Theory}},
	volume = {58},
	issn = {00029327},
	url = {http://dx.doi.org/10.2307/2371045},
	doi = {10.2307/2371045},
	number = {2},
	journal = {American Journal of Mathematics},
	author = {Church, Alonzo},
	month = apr,
	year = {1936},
	keywords = {elementary\_number\_theory mathematics},
	pages = {345--363}
}

@inproceedings{jones_tackling_2002,
	title = {Tackling the {Awkward} {Squad}: monadic input/output, concurrency, exceptions, and foreign-language calls in {Haskell}},
	shorttitle = {Tackling the {Awkward} {Squad}},
	abstract = {Functional programming may be beautiful, but to write real applications we must grapple  with awkward real-world issues: input/output, robustness, concurrency, and interfacing to  programs written in other languages.},
	booktitle = {Engineering theories of software construction},
	publisher = {Press},
	author = {Jones, Simon Peyton},
	year = {2002},
	pages = {47--96},
	file = {Citeseer - Full Text PDF:/home/io.nathan/Zotero/storage/B5QDDLSJ/Jones - 2002 - Tackling the Awkward Squad monadic inputoutput, .pdf:application/pdf;Citeseer - Snapshot:/home/io.nathan/Zotero/storage/7WBAI3LK/summary.html:text/html}
}

@inproceedings{jones_tackling_2002-1,
	title = {Tackling the {Awkward} {Squad}: monadic input/output, concurrency, exceptions, and foreign-language calls in {Haskell}},
	booktitle = {Engineering theories of software construction},
	publisher = {Press},
	author = {Jones, Simon Peyton},
	year = {2002},
	pages = {47--96}
}

@article{odell_objects_2002,
	title = {Objects and {Agents} {Compared}},
	volume = {1},
	abstract = {Just how different - or the same - are objects and agents? Some developers consider agents to be objects, except with more bells and whistles. Then, there are those who see agents and objects as different even though they share many things in common. Both approaches, however, envision using objects and agents together in the development of software systems. In other words, objects and agents are two distinct notions - each having its own particular place in software development. The important point here is that the agent-based way of thinking brings a useful and important perspective for system development, which is different from - while similar to - the object-oriented way. This paper discusses some of the differences and similarities between agents and objects and lets you decide which viewpoint you want to choose.},
	number = {1},
	journal = {Journal of Object Technology},
	author = {Odell, James},
	month = may,
	year = {2002},
	pages = {41--53}
}

@inproceedings{winograd-cort_virtualizing_2012,
	address = {Berlin, Heidelberg},
	series = {{PADL}'12},
	title = {Virtualizing {Real}-world {Objects} in {FRP}},
	isbn = {978-3-642-27693-4},
	url = {http://dx.doi.org/10.1007/978-3-642-27694-1_17},
	doi = {10.1007/978-3-642-27694-1_17},
	abstract = {We begin with a functional reactive programming (FRP) model in which every program is viewed as a signal function that converts a stream of input values into a stream of output values. We observe that objects in the real world --- such as a keyboard or sound card --- can be thought of as signal functions as well. This leads us to a radically different approach to I/O: instead of treating real-world objects as being external to the program, we expand the sphere of influence of program execution to include them within. We call this virtualizing real-world objects. We explore how virtual objects (such as GUI widgets) and even non-local effects (such as debugging and random number generation) can be handled in the same way. The key to our approach is the notion of a resource type that assures that a virtualized object cannot be duplicated, and is safe. Resource types also provide a deeper level of transparency: by inspecting the type, one can see exactly what resources are being used. We use arrows, type classes, and type families to implement our ideas in Haskell, and the result is a safe, effective, and transparent approach to stream-based I/O.},
	urldate = {2018-06-30},
	booktitle = {Proceedings of the 14th {International} {Conference} on {Practical} {Aspects} of {Declarative} {Languages}},
	publisher = {Springer-Verlag},
	author = {Winograd-Cort, Daniel and Liu, Hai and Hudak, Paul},
	year = {2012},
	keywords = {arrows, functional programming, functional reactive programming, Haskell, I/O, stream processing, unique types},
	pages = {227--241}
}

@techreport{vipindeep_list_2005,
	title = {List of {Common} {Bugs} and {Programming} {Practices} to avoid them},
	institution = {Indian Institute of Technology, Kanpur},
	author = {Vipindeep, V. and Jalote, Pankaj},
	month = mar,
	year = {2005}
}