{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ifthe",
				"ifThenElseM"
			],
			[
				"ifThen",
				"ifThenElse"
			],
			[
				"update",
				"updateDomainStateM"
			],
			[
				"agentout",
				"agentOutFromIn ∷ AgentIn s m ec l → AgentOut s m ec l\tFrABS.Agent.Agent"
			],
			[
				"envion",
				"environmentPositionM"
			],
			[
				"igni",
				"ignitionEvent"
			],
			[
				"init",
				"initIgnite"
			],
			[
				"extractParamFrom",
				"extractParamFromVector ∷ Value → Int → Maybe Value\tRpc.Utils"
			],
			[
				"exc",
				"extractParam ∷ Value → Int → Text → Maybe Value\tRpc.Utils"
			],
			[
				"encod",
				"encodeQuantity ∷ Int → String\tRpc.Utils"
			],
			[
				"JsonRpcRe",
				"JsonRpcResponse \tEthJsonRpc.Methods"
			],
			[
				"server",
				"serverLoop"
			],
			[
				"et",
				"ethJsonRpcPort"
			],
			[
				"SockA",
				"SockAddrInet"
			],
			[
				"receivi",
				"receivingIdx"
			],
			[
				"rece",
				"receivingIn"
			],
			[
				"may",
				"mayIdx"
			],
			[
				"handleCon",
				"handleConversationAux"
			],
			[
				"mayb",
				"maybeFunc1"
			],
			[
				"SugarScapeC",
				"SugarScapeEnvCell \tSugarScape.SugarScapeModel"
			],
			[
				"sugEnv",
				"sugEnvSugarLevel ∷ SugarScapeEnvCell → Double\tSugarScape.SugarScapeModel"
			],
			[
				"sugAgSug",
				"sugAgSugarLevel ∷ SugarScapeAgentState → Double\tSugarScape.SugarScapeModel"
			],
			[
				"Cultur",
				"SugarScapeCulturalTag \tSugarScape.SugarScapeModel"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "{-# LANGUAGE Arrows #-}\nmodule SIRS.SIRSAgent where\n\nimport SIRS.SIRSModel\nimport Utils.Utils\n\nimport FRP.Yampa\n\nimport FrABS.Agent.Agent\nimport FrABS.Agent.AgentUtils\nimport FrABS.Env.Environment\n\nimport Control.Monad.Random\nimport Control.Monad.Trans.State\nimport Control.Monad.IfElse\n\nimport Debug.Trace\n\n------------------------------------------------------------------------------------------------------------------------\n-- AGENT-BEHAVIOUR MONADIC implementation\n------------------------------------------------------------------------------------------------------------------------\nisM :: SIRSState -> State SIRSAgentOut Bool\nisM sirsStateComp = \n    do\n        ss <- domainStateFieldM sirsState\n        return $ ss == sirsStateComp\n\nsirsDtM :: Double -> State SIRSAgentOut ()\nsirsDtM dt =\n    do\n        whenM (isM Infected) $ handleInfectedAgentM dt\n        whenM (isM Recovered) $ handleRecoveredAgentM dt \n\ninfectAgentM :: State SIRSAgentOut ()\ninfectAgentM =\n    do\n        doInfect <- drawBoolWithProbFromAgentM infectionProbability\n        when doInfect $ updateDomainStateM (\\s -> s { sirsState = Infected, sirsTime = 0.0} )\n\nhandleInfectedAgentM :: Double -> State SIRSAgentOut ()\nhandleInfectedAgentM dt = \n    do\n        t <- domainStateFieldM sirsTime\n\n        let t' = t + dt\n        let hasRecovered = t' >= infectedDuration\n\n        -- NOTE: agent has just recovered, don't send infection-contact to others\n        ifThenElse hasRecovered \n                    (updateDomainStateM (\\s -> s { sirsState = Recovered, sirsTime = 0.0 } ))\n                    $ do \n                        updateDomainStateM (\\s -> s { sirsTime = t' } )\n                        randomContactM\n\nhandleRecoveredAgentM :: Double -> State SIRSAgentOut ()\nhandleRecoveredAgentM dt = \n    do\n        t <- domainStateFieldM sirsTime\n\n        let t' = t + dt\n        let lostImmunity = t' >= immuneDuration\n\n        ifThenElse lostImmunity\n                    (updateDomainStateM (\\s -> s { sirsState = Susceptible, sirsTime = 0.0 } ))\n                    (updateDomainStateM (\\s -> s { sirsTime = t' } ))\n\nrandomContactM :: State SIRSAgentOut ()\nrandomContactM = \n    do\n        (_, randNeighId) <- pickRandomNeighbourCellM\n        sendMessageM (randNeighId, (Contact Infected))\n\nsirsAgentBehaviourFuncM :: SIRSAgentIn -> State SIRSAgentOut ()\nsirsAgentBehaviourFuncM ain = \n    do\n        onMessageM ain contactInfectedM\n        sirsDtM 1.0\n\n    where\n        contactInfectedM :: AgentMessage SIRSMsg -> State SIRSAgentOut ()\n        contactInfectedM (_, Contact Infected) = whenM (isM Susceptible) infectAgentM\n        contactInfectedM _ = return ()\n\n------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------------------------------------\n-- AGENT-BEHAVIOUR YAMPA implementation\n------------------------------------------------------------------------------------------------------------------------\nsirsAgentSuceptibleSF :: RandomGen g => g -> SIRSAgentBehaviour\nsirsAgentSuceptibleSF g = switch \n                            sirsAgentSusceptibleBehaviourSF\n                            (sirsAgentSusceptibleInfectedSF g)\n\nsirsAgentSusceptibleBehaviourSF :: SF SIRSAgentIn (SIRSAgentOut, Event ())\nsirsAgentSusceptibleBehaviourSF = proc ain ->\n    do\n        let ao = agentOutFromIn ain\n        let ao' = updateDomainState ao (\\s -> s { sirsState = Susceptible})\n\n        infectionEvent <- (iEdge False) -< hasMessage ain (Contact Infected)\n\n        returnA -< (ao', infectionEvent)\n\n-- TODO: update sirsState to infected here once, no need to constantly set to infected in infecedbehaviourSF\nsirsAgentSusceptibleInfectedSF :: RandomGen g => g -> () -> SIRSAgentBehaviour\nsirsAgentSusceptibleInfectedSF g _ = sirsAgentInfectedSF g\n\n\n\nsirsAgentInfectedSF :: RandomGen g => g -> SIRSAgentBehaviour\nsirsAgentInfectedSF g = switch \n                            (sirsAgentInfectedBehaviourSF g)\n                            (sirsAgentInfectedRecoveredSF g)\n\n\nsirsAgentInfectedBehaviourSF :: RandomGen g => g -> SF SIRSAgentIn (SIRSAgentOut, Event ())\nsirsAgentInfectedBehaviourSF g = proc ain ->\n    do\n        let ao = agentOutFromIn ain\n        let ao' = updateDomainState ao (\\s -> s { sirsState = Infected})\n\n        remainingInfectedTime <- (infectedDuration-) ^<< integral -< 1.0\n        recoveredEvent <- edge -< (remainingInfectedTime <= 0)\n\n        -- NOTE: this means the agent is randomly contacting two neighbours within the infected duration\n        makeContact <- occasionally g (infectedDuration * 0.5) () -< ()\n\n        let ao'' = if isEvent makeContact then\n                    randomContact ao'\n                        else\n                            ao'\n\n        returnA -< (ao'', recoveredEvent)\n\n-- TODO: update sirsState to recovered here once, no need to constantly set to recovered in recoverbehaviourSF\nsirsAgentInfectedRecoveredSF :: RandomGen g => g -> () -> SIRSAgentBehaviour\nsirsAgentInfectedRecoveredSF g _ = sirsAgentRecoveredSF g\n\n\n\nsirsAgentRecoveredSF :: RandomGen g => g -> SIRSAgentBehaviour\nsirsAgentRecoveredSF g = switch \n                            sirsAgentRecoveredBehaviourSF\n                            (sirsAgentRecoveredSusceptibleSF g)\n\nsirsAgentRecoveredBehaviourSF :: SF SIRSAgentIn (SIRSAgentOut, Event ())\nsirsAgentRecoveredBehaviourSF = proc ain ->\n    do\n        let ao = agentOutFromIn ain\n        let ao' = updateDomainState ao (\\s -> s { sirsState = Recovered})\n\n        remainingImmuneTime <- (immuneDuration-) ^<< integral -< 1.0\n        backToSusceptibleEvent <- edge -< (remainingImmuneTime <= 0)\n\n        returnA -< (ao', backToSusceptibleEvent)\n\n-- TODO: update sirsState to susceptible here once, no need to constantly set to susceptible in susceptiblebehaviourSF\nsirsAgentRecoveredSusceptibleSF :: RandomGen g => g -> () -> SIRSAgentBehaviour\nsirsAgentRecoveredSusceptibleSF g _ = sirsAgentSuceptibleSF g\n\nsirsAgentBehaviourSF :: RandomGen g => g -> SIRSState -> SIRSAgentBehaviour\nsirsAgentBehaviourSF g Susceptible = sirsAgentSuceptibleSF g\nsirsAgentBehaviourSF g Infected = sirsAgentInfectedSF g\nsirsAgentBehaviourSF g Recovered = sirsAgentRecoveredSF g\n------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------------------------------------------------\n-- AGENT-BEHAVIOUR NON-monadic implementation\n------------------------------------------------------------------------------------------------------------------------\nis :: SIRSAgentOut -> SIRSState -> Bool\nis ao ss = (sirsState s) == ss\n    where\n        s = aoState ao\n\n-- TODO: use switching SFs when in different states as behaviour changes\nsirsDt :: SIRSAgentOut -> Double -> SIRSAgentOut\nsirsDt ao dt\n    | is ao Susceptible = ao\n    | is ao Infected = handleInfectedAgent ao dt\n    | otherwise = handleRecoveredAgent ao dt\n\ninfectAgent :: SIRSAgentOut -> SIRSAgentOut\ninfectAgent ao\n    | yes = updateDomainState ao' (\\s -> s { sirsState = Infected,\n                                      sirsTime = 0.0} )\n    | otherwise = ao'\n    where\n         (yes, ao') = drawBoolWithProbFromAgent ao infectionProbability\n\ncontactInfected :: SIRSAgentOut -> AgentMessage SIRSMsg -> SIRSAgentOut\ncontactInfected a (_, Contact Infected) \n    | is a Susceptible = infectAgent a\n    | otherwise = a\ncontactInfected a _ = a\n\nhandleInfectedAgent :: SIRSAgentOut -> Double -> SIRSAgentOut\nhandleInfectedAgent ao dt = if t' >= infectedDuration then\n                                recoveredAgent           -- NOTE: agent has just recovered, don't send infection-contact to others\n                                else\n                                    randomContact gettingBetterAgent\n\n    where\n        t = (sirsTime (aoState ao))\n        t' = t + dt\n        recoveredAgent = updateDomainState ao (\\s -> s { sirsState = Recovered,\n                                                        sirsTime = 0.0 } )\n        gettingBetterAgent = updateDomainState ao (\\s -> s { sirsTime = t' } )\n\n\nhandleRecoveredAgent :: SIRSAgentOut -> Double -> SIRSAgentOut\nhandleRecoveredAgent ao dt = if t' >= immuneDuration then\n                                susceptibleAgent\n                                else\n                                    immuneReducedAgent\n    where\n        t = (sirsTime (aoState ao))\n        t' = t + dt  -- TODO: use Yampa-function integral\n        susceptibleAgent = updateDomainState ao (\\s -> s { sirsState = Susceptible,\n                                                        sirsTime = 0.0 } )\n        immuneReducedAgent = updateDomainState ao (\\s -> s { sirsTime = t' } )\n\n-- TODO: include time-semantics e.g. 1 ontact per time-unit\nrandomContact :: SIRSAgentOut -> SIRSAgentOut\nrandomContact ao = sendMessage ao' (randNeigh, (Contact Infected))\n    where\n        ((_, randNeigh), ao') = runAgentRandom ao (pickRandomNeighbourCell ao)\n\nsirsAgentBehaviourFunc :: SIRSAgentIn -> SIRSAgentOut -> SIRSAgentOut\nsirsAgentBehaviourFunc ain ao = aoAfterTime\n    where\n        aoAfterMsg = onMessage ain contactInfected ao\n        aoAfterTime = sirsDt aoAfterMsg 1.0\n------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------------------------------------\nsirsAgentBehaviour :: SIRSAgentBehaviour\nsirsAgentBehaviour = proc ain ->\n    do\n        let ao = agentOutFromIn ain \n        --let ao' = sirsAgentBehaviourFunc ain ao\n        let ao' = execState (sirsAgentBehaviourFuncM ain) ao\n        returnA -< ao'\n------------------------------------------------------------------------------------------------------------------------\n",
			"file": "examples/SIRS/SIRSAgent.hs",
			"file_size": 9893,
			"file_write_time": 131429693078338374,
			"settings":
			{
				"buffer_size": 9894,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 92.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jonathan/phd/coding/libraries/frABS",
		"/home/jonathan/phd/coding/libraries/frABS/examples",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire",
		"/home/jonathan/phd/coding/libraries/frABS/src",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Agent",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Env"
	],
	"file_history":
	[
		"/home/jonathan/phd/coding/libraries/frABS/examples/Main.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgentPure.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgentMonadic.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Agent/Agent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgentCommon.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Env/Environment.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Utils/Utils.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/SIRSAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/    • Variable not in scope",
		"/home/jonathan/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/frABSExamples.cabal",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Agent/AgentUtils.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgentM.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeEnvironmentM.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroEnvironment.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/        Actual type",
		"/home/jonathan/phd/coding/libraries/frABS/examples/DoubleAuction/DATrader.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/PrisonersDilemma/PDAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Conversation/ConversationModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/DoubleAuction/DAAuctioneer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/RecursiveABS/RecursiveABSModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireAgent.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/DoubleAuction/DARun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/DoubleAuction/DAInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/DoubleAuction/DAModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/SIRSRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/SIRSInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/SIRSModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/frABS.cabal",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/Simulation.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/SeqIteration.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/ParIteration.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/Utils.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/FrABS.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Utils.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Rendering/GlossSimulator.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/PrisonersDilemma/PDRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationStats.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Segregation/SegregationRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Conversation/ConversationRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/RecursiveABS/RecursiveABSRun.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/SIRSRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/PrisonersDilemma/PDRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/SimulationUtils.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireRenderer.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Rendering/Agents2DDiscrete.hs",
		"/home/jonathan/phd/coding/libraries/frABS/src/FrABS/Simulation/SimulationHelper.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/SIRS/RunSIRS.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/PrisonersDilemma/PDModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/PrisonersDilemma/PDInit.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireModel.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/    Saw",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WildfireEnvironment.hs",
		"/home/jonathan/phd/coding/libraries/frABS/examples/Wildfire/WilidfireRun.hs",
		"/home/jonathan/ethereum/ethaskell/src/Rpc/Server.hs",
		"/home/jonathan/ethereum/ethaskell/src/Rpc/Methods.hs",
		"/home/jonathan/ethereum/ethaskell/src/Rpc/CURL_TEST.txt",
		"/home/jonathan/ethereum/ethaskell/ETHaskell.cabal",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/Utils.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/CURL_TEST.txt",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/p2p/Server.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/Server.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/p2p/P2P.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/Methods.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/Json.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Rpc/JsonRpc.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/    Variable not in scope",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/EthJsonRpc/Utils.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/EthJsonRpc/Methods.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/ETHaskell.cabal",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/    Parse error in pattern",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/EthJsonRpc/JsonRpc.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/EthJsonRpc/Server.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/                             imported from `Prelude' at EthJsonRpc/Server.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/DoubleAuction/DAModel.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Devp2p/Devp2p.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/jsonrpc/JSONRpc.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/EthJsonRpc/EthJsonRpc.hs",
		"/C/Users/Jonathan Thaler/coding/ethaskell/TODO.txt",
		"/C/Users/Jonathan Thaler/coding/ethaskell/src/Main.hs",
		"/C/Users/Jonathan Thaler/coding/ETHaskell/ETHaskell.cabal",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/Main.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/FrABS/Simulation/Simulation.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroRun.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/DoubleAuction/DARun.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeRun.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/Agent 1",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/received AskOfferings from 1",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/received AskOfferings from 2",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/Agent received BidOfferings from 1",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/FrABS/Agent/Agent.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/DoubleAuction/DAAuctioneer.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/AgentZero/AgentZeroAgent.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/SIRS/SIRSModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/SugarScape/SugarScapeAgent.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/examples/DoubleAuction/DATrader.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/FrABS/Simulation/ParIteration.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Main.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Segregation/SegregationModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Segregation/SegregationRun.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/RecursiveABS/RecursiveABSModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/RecursiveABS/RecursiveABSInit.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/SugarScape/SugarScapeModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/SugarScape/SugarScapeAgent.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Conversation/ConversationModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/SIRS/SIRSModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Segregation/SegregationInit.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/MetaABS/MetaABSModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/MetaABS/MetaABSInit.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/Conversation/ConversationInit.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/MessageSampling/MessageSamplingInit.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/MessageSampling/MessageSamplingModel.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/    Not in scope",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/FrABS/Env/Environment.hs",
		"/C/Users/Jonathan Thaler/phd/coding/libraries/frABS/src/SugarScape/SugarScapeInit.hs"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Users\\Jonathan Thaler\\phd\\coding\\libraries\\frABS\\src,*.hs"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"handleMatingConversationM",
			"agentPickRandomMultiple",
			"multiple",
			"agentAgeing",
			"agentDeathHandleCreditsM",
			"isDead",
			"agentKilledInCombat",
			"conversationReplyMonadicRunner",
			"welfareIncreases",
			"Chapter",
			"handleMatingConversation",
			"behaviou",
			"agentWelfareChange",
			"ifThenElse",
			"ifThenElse\n",
			"cellOccupied",
			"createAgent",
			"dieFromAge\n",
			"unoccupyPosition",
			"ifelsem",
			"cellAt",
			"neighboursDistanceM",
			"selectBestCells",
			"agentWelfareChange",
			"agentPickRandomM",
			"agentPoluteCell",
			"ifelsem",
			"when",
			"neighbourNodes",
			"foldM",
			"agentCell",
			"unoccu",
			"sirsAgentBehaviourFuncM",
			"onmessage",
			"todo",
			"updatedomainStateFieldM",
			"domainStateM",
			"updateStateM",
			"PDAgentOut",
			"updateState",
			"onMessage",
			"sirsAgentBehaviourFuncM",
			"burndown",
			"sirsCoord",
			"hasmess",
			"drawBoolWithProbFromAgent",
			"runSeqSF",
			"runSeqInternal",
			"internal",
			"calculate",
			"distance",
			"cellsAround",
			"renderCircles",
			"renderFrame",
			"dt ",
			"nvironment",
			"WildfireEnvironment",
			"WildfireAgentOut",
			"WildfireAgentIn",
			"WildfireAgentDef",
			"sirsAgentBehaviourFuncM",
			"WildfireAgentState",
			"WildfireAgentIn",
			"WildfireAgentOut",
			"WildfireEnvironment",
			"WildfireMsg",
			"WildfireLinkLabel",
			"WildfireCell",
			"kill",
			"AgentZeroAgentOut",
			"AgentZeroAgentIn",
			"AgentZeroEnvironment",
			"extractParam",
			"decodeUnformattedData",
			"alphaNumToHex",
			"-------------------------------------------------------------------------------------------",
			"contactInfected",
			"onMessage",
			"randomCellWithRadius",
			"runrandom",
			"rand",
			"random",
			"agentNonCombatMove",
			"inheritSugar",
			"agentCultureContact",
			"agentSex",
			"polute",
			"agentPoluteCell",
			"unoccupyPosition",
			"agentCell",
			"agentPolutingCell",
			"moveAndHarvestBestCell",
			"agentStayAndHarvest",
			"agentMetabolism",
			"agentLookout",
			"combatReward",
			"unoccupyPosition",
			"agentAgeing",
			"unoccupyPosition",
			"agentAgeing",
			"agentAction",
			"agentMoveAndHarvestCell",
			"agentPickRandom",
			"selectBestCells",
			"refCoord",
			"selectBestCells",
			"randomAgentIO",
			"cellOccupier",
			"SugarScapeAgentState",
			"createCells",
			"SugarScapeEnvCellOccupier",
			"cellOccupier",
			"filter",
			"filter (",
			"cellUnoccupied",
			"agentLookout",
			"agentCollecting",
			"cellUnoccupied",
			"agentLookout",
			"^(.*)$",
			"neighbourIds",
			"replace",
			"randomage",
			"handleCreateAgents",
			"handleKillOrLiveAgent",
			"handleAgent",
			"createAgent",
			"handleCreateAgents"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"agentCellOnPos",
			"updateDomainStateM",
			"domainStateFieldM",
			"updateDomainStateM",
			"updateDomainState",
			"distanceManhattan",
			"Environment",
			"nvironment ec l ",
			"AgentOut s m ec l",
			"AgentIn s m ec l",
			"AgentDef s m ec l",
			"PDAgentState",
			"PDAgentIn",
			"PDAgentOut",
			"PDEnvironment",
			"PDMsg",
			"PDLinkLabel",
			"PDCell",
			"WildfireAgentOut",
			"WildfireAgentIn",
			"WildfireEnvironment",
			"hexLitToInt",
			"-------------------------------------------------------------------------------"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "examples/SIRS/SIRSAgent.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9894,
						"regions":
						{
						},
						"selection":
						[
							[
								4451,
								4451
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1665.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 273.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sublime_haskell_error_panel":
	{
		"height": 118.0
	},
	"output.sublime_haskell_output_panel":
	{
		"height": 245.0
	},
	"pinned_build_system": "Packages/Haskell/Haskell.sublime-build",
	"project": "frabs.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
