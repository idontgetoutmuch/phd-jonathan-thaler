Thomas Schwarz
- Du schreibst 3 Arbeiten gleichzeitig.
	-> Functional ABS technical PoC
	-> Advantages of functional programming in the domain of ABS
	-> ABS for finance and how functional programming may improve quality of modelling
- Die Struktur der Arbeit ist mir unklar. Welche der obigen Fragestellungen liefert den roten Faden. Aktuell sind es all und keine
- Je nachdem welche Arbeit du schreiben wolltest bist du entweder zu technisch (functional) oder zu simulatorisch. Beides zu sein ist extrem anstreng zu lesen
- Der Property Teil hat sich mir nicht erschlossen. Hast du da nur verifiziert, dass deine Software korrekt ist? Was ist daran wissenschaftlich neu, wo liegt dein Beitrag?
- Die Conclusion ist für mich zu beladen mit neuen Ansätzen, welche ich in den vorherigen Kapiteln nicht erkannt habe. Meine Regel ist, dass in der Conclusion nichts neues mehr vorgebracht wird, es wird zusammengefasst und in Kontext gesetzt.

---------------------------------------
- REFLECTIONS FROM ME ON THE FEEDBACK -
---------------------------------------
My thesis is not really about ABS, it is rather about "software engineering in ABS with pure functional programming". it is not really interested in the modelling aspect of ABS but solely discusses implementation of ABS. It covers the three big areas of: 1. implementation techniques and concepts; 2. parallelism and concurrency concepts; 3. testing. It does NOT deal with "how to model ABS from a pure functional perspective", therefore it is indeed a purely software engineering centric thesis. This is ok, as obviously it falls into computer science - the question is, whether my narrative, my arguments and my claims are presented and structured in a way that it comes across as a software engineering thesis rather than an ABS (modelling) one. The feedback from Thomas suggest that this is not the case and I should rather rework it into an "obvious" software engineering thesis and not one that is in disguise, as it is at the moment.
What needs to be changed? Certainly the title needs a slight change to hint at the different viewpoint e.g. "Software Engineering Agent-Based Simulations in pure functional programming". Then obviously the introduction needs to develop its argument and presentation slightly different by actually MENTIONING software engineering and introducing the thesis and the problems it discusses from a software engineering viewpoint. The actual content is good but the narrative in the respective chapters would need some minor changes by putting it into a software engineering context, by (again) mentioning it. Some claims need to be little bit more substantiated as Thomas has added in the respective comments. Also he suggested to contrast it with "how it would be done in Java/OOP" but I am very reluctant to go into this direction as it is beyond the scope of this thesis. 
A doubt is thought: does my software engineering approach encompass important developments in SE in ABS in general? For example I am never really discussing a BDI implementation - then again, should I? 

It seems that the book chapter 6 "What Software Engineering Has to Offer to Agent-Based Social Simulation" from "Simulation Social Complexity" of my supervisor (Peer-Olaf) is an important read to put my stuff into a broader context of software engineering in ABS (Agent-Based SOCIAL Simulation to be more precise). My work falls into the "Third Pillar: Architectures and Patterns". Their work focuses only on OOP and patterns, thus my PhD can be seen as a unique extension of that thirds pillar, with substantial contribution to knowledge. I could actually use this work of Peer (et al) to set up the narrative within my introduction towards a more Software Engineering approach. A possible narrative would be to say that work of Siebers developed a structured Software Engineering approach to develop ABS, including their implementation but that they focus primarily on OOP - this thesis asks whether a pure functional approach in such a software engineering approach is viable / possible and how it can be done and what the benefits / drawbacks are. Obviously Siebers has developed a complete framework (EABSS) with a full process, encompassing analysis, conceptual modelling, implementation, validation (and testing). We only focus on implementation techniques and validation & verification and leave the other steps untouched as we hypothesise that they apply equally to pure FP as they do to OOP (with minor adaptions). The framework (EABSS) contains also UML and other OOP related modelling techniques but we claim that we can map them with our developed concepts direcetly to a pure functional approach as well, with minor changes. For example a sequence diagram can be applied to model agent interactions of pure functional agents as we implement it in the sugarscape model; a class diagram can model the various behaviours of an agent and its internal state fields as we implement it in the Sugarscape model; state machines can be used to model internal states of an agent as we implement it in the SIR model; activity diagrams can be used to model pro-active behaviour of agents as we implement it in the SIR model; use case diagrams are completely language agnostic and thus apply equally to OOP and FP without any changes
